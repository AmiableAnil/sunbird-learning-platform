package org.ekstep.telemetry.handler;

import java.util.List;
import java.util.Map;

import org.ekstep.telemetry.TelemetryGenerator;

/**
 * Interface to implement the handlers for the telemetry generated by
 * {@link TelemetryGenerator}. The implementation of this interface should use
 * {@link TelemetryGenerator} to generate telemetry and have logic to handle and
 * push the telemetry to Ekstep data pipeline.
 * 
 * @author mahesh
 *
 */

public interface TelemetryHandler {

	/**
	 * To generate and handle LOG event of type api_access.
	 * 
	 * @param context
	 * @param params
	 */
	public void access(Map<String, String> context, Map<String, Object> params);

	/**
	 * To generate and handle normal LOG event having all the properties of edata.
	 * 
	 * @param context
	 * @param type
	 * @param level
	 * @param message
	 * @param pageid
	 * @param params
	 */
	public void log(Map<String, String> context, String type, String level, String message, String pageid,
			List<Map<String, Object>> params);

	/**
	 * To generate and handle normal LOG event having required properties of edata.
	 * 
	 * @param context
	 * @param type
	 * @param level
	 * @param message
	 */
	public void log(Map<String, String> context, String type, String level, String message);

	/**
	 * To generate and handle ERROR event having all the properties of edata.
	 * 
	 * @param context
	 * @param code
	 * @param type
	 * @param stacktrace
	 * @param pageid
	 * @param object
	 */

	public void error(Map<String, String> context, String code, String type, String stacktrace, String pageid,
			Object object);

	/**
	 * To generate and handle ERROR event having required properties of edata.
	 * 
	 * @param context
	 * @param code
	 * @param type
	 * @param stacktrace
	 */
	public void error(Map<String, String> context, String code, String type, String stacktrace);
}
