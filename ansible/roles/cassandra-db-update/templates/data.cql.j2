CREATE KEYSPACE IF NOT EXISTS {{ content_keyspace_name }} WITH replication = {
  'class': 'SimpleStrategy',
  'replication_factor': '1'
};

CREATE TABLE IF NOT EXISTS {{ content_keyspace_name }}.content_data (
  content_id text, 
  last_updated_on timestamp,
  body blob,
  oldBody blob,
  stageIcons blob,
  screenshots blob,
  externallink text,
  PRIMARY KEY (content_id)
);

CREATE KEYSPACE IF NOT EXISTS {{ hierarchy_keyspace_name }} WITH replication = {
  'class': 'SimpleStrategy',
  'replication_factor': '1'
};

CREATE TABLE IF NOT EXISTS {{ hierarchy_keyspace_name }}.content_hierarchy (
  identifier text,
  hierarchy text,
  PRIMARY KEY (identifier)
);

CREATE TABLE IF NOT EXISTS {{ hierarchy_keyspace_name }}.framework_hierarchy (
  identifier text,
  hierarchy text,
  PRIMARY KEY (identifier)
);

{% if groups['cassandra-node-2'] is defined %}
ALTER KEYSPACE {{ content_keyspace_name }} WITH replication = {
  'class': 'NetworkTopologyStrategy',
  'datacenter1' : 2
};

ALTER KEYSPACE {{ hierarchy_keyspace_name }} WITH replication = {
  'class': 'NetworkTopologyStrategy',
  'datacenter1' : 2
};

ALTER TABLE {{ hierarchy_keyspace_name }}.content_hierarchy ADD relational_metadata text;

{% endif %}


CREATE TRIGGER IF NOT EXISTS content_data_trigger ON {{ content_keyspace_name }}.content_data USING 'org.sunbird.cassandra.triggers.TransactionEventTrigger';
CREATE TRIGGER IF NOT EXISTS framework_hierarchy_trigger ON {{ hierarchy_keyspace_name }}.framework_hierarchy USING 'org.sunbird.cassandra.triggers.TransactionEventTrigger';
CREATE TRIGGER IF NOT EXISTS content_hierarchy_trigger ON {{ hierarchy_keyspace_name }}.content_hierarchy USING 'org.sunbird.cassandra.triggers.TransactionEventTrigger';


CREATE KEYSPACE IF NOT EXISTS {{ category_keyspace_name }} WITH replication = {'class': 'NetworkTopologyStrategy', 'datacenter1': '2'}  AND durable_writes = true;

CREATE TABLE IF NOT EXISTS {{ category_keyspace_name }}.category_definition_data (
    identifier text PRIMARY KEY,
    forms map<text, text>,
    objectmetadata map<text, text>
);

CREATE KEYSPACE IF NOT EXISTS {{ platform_keyspace_name }} WITH replication = {
  'class': 'SimpleStrategy',
  'replication_factor': '1'
};


CREATE TABLE IF NOT EXISTS {{ platform_keyspace_name }}.job_request (
    client_key text,
    request_id text,
    job_id text,
    status text,
    request_data text,
    location text,
    dt_file_created timestamp,
    dt_first_event timestamp,
    dt_last_event timestamp,
    dt_expiration timestamp,
    iteration int,
    dt_job_submitted timestamp,
    dt_job_processing timestamp,
    dt_job_completed timestamp,
    input_events int,
    output_events int,
    file_size bigint,
    latency int,
    execution_time bigint,
    err_message text,
    stage text,
    stage_status text,
    job_name text,
    PRIMARY KEY (client_key, request_id)
);
