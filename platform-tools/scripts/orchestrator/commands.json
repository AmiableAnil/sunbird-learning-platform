[{ "_id" : { "$oid" : "569daeeba8261c2e6f85eb5e" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.SearchManagerImpl", "operation" : "getDataNode", "router" : "GRAPH_REQUEST_ROUTER" }, "name" : "getDataNode", "parameters" : [ { "index" : 0, "name" : "graph_id", "routing_param" : true }, { "index" : 1, "name" : "node_id", "routing_param" : false } ], "request_path" : { "path_params" : [ "graph_id", "node_id" ], "type" : "GET", "url" : "/v1/graph/*/datanodes/*" }, "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569daf37a8261c2e6f85eb5f" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.SearchManagerImpl", "operation" : "getAllDefinitions", "router" : "GRAPH_REQUEST_ROUTER" }, "name" : "getAllDefinitions", "parameters" : [ { "index" : 0, "name" : "graph_id", "routing_param" : true } ], "request_path" : { "path_params" : [ "graph_id" ], "type" : "GET", "url" : "/v1/graph/*/definitions" }, "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569daf84a8261c2e6f85eb60" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.SearchManagerImpl", "operation" : "getNodeDefinition", "router" : "GRAPH_REQUEST_ROUTER" }, "name" : "getDefinition", "parameters" : [ { "index" : 0, "name" : "graph_id", "routing_param" : true }, { "index" : 1, "name" : "object_type", "routing_param" : false } ], "request_path" : { "path_params" : [ "graph_id", "object_type" ], "type" : "GET", "url" : "/v1/graph/*/definitions/*" }, "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569dafdfa8261c2e6f85eb61" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.SearchManagerImpl", "operation" : "getDataNodes", "router" : "GRAPH_REQUEST_ROUTER" }, "name" : "getDataNodes", "parameters" : [ { "index" : 0, "name" : "graph_id", "routing_param" : true }, { "datatype" : "java.util.ArrayList", "index" : 1, "name" : "node_ids", "routing_param" : false } ], "request_path" : { "path_params" : [ "graph_id" ], "type" : "POST", "url" : "/v1/graph/*/datanodes/list" }, "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569db02ea8261c2e6f85eb62" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.SearchManagerImpl", "operation" : "getNodesByObjectType", "router" : "GRAPH_REQUEST_ROUTER" }, "name" : "getNodesByObjectType", "parameters" : [ { "index" : 0, "name" : "graph_id", "routing_param" : true }, { "index" : 1, "name" : "object_type", "routing_param" : false } ], "request_path" : { "path_params" : [ "graph_id", "object_type" ], "type" : "GET", "url" : "/v1/graph/*/objects/*" }, "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569db0bda8261c2e6f85eb63" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.SearchManagerImpl", "operation" : "getChildren", "router" : "GRAPH_REQUEST_ROUTER" }, "name" : "getChildren", "parameters" : [ { "index" : 0, "name" : "graph_id", "routing_param" : true }, { "index" : 1, "name" : "node_id", "routing_param" : false }, { "datatype" : "java.lang.Integer", "index" : 2, "name" : "depth", "routing_param" : false } ], "request_path" : { "path_params" : [ "graph_id", "node_id", "depth" ], "type" : "GET", "url" : "/v1/graph/*/children/*/*" }, "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569db102a8261c2e6f85eb64" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.SearchManagerImpl", "operation" : "getDescendants", "router" : "GRAPH_REQUEST_ROUTER" }, "name" : "traverse", "parameters" : [ { "index" : 0, "name" : "graph_id", "routing_param" : true }, { "index" : 1, "name" : "node_id", "routing_param" : false }, { "index" : 2, "name" : "relation", "routing_param" : false }, { "datatype" : "java.lang.Integer", "index" : 3, "name" : "depth", "routing_param" : false } ], "request_path" : { "path_params" : [ "graph_id", "node_id" ], "type" : "POST", "url" : "/v1/graph/*/traverse/*" }, "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569db150a8261c2e6f85eb65" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.SearchManagerImpl", "operation" : "searchNodes", "router" : "GRAPH_REQUEST_ROUTER" }, "name" : "searchNodes", "parameters" : [ { "index" : 0, "name" : "graph_id", "routing_param" : true }, { "datatype" : "com.ilimi.graph.dac.model.SearchCriteria", "index" : 1, "name" : "search_criteria", "routing_param" : false } ], "request_path" : { "path_params" : [ "graph_id" ], "type" : "POST", "url" : "/v1/graph/*/search" }, "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569db16da8261c2e6f85eb66" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.SearchManagerImpl", "operation" : "getNodesCount", "router" : "GRAPH_REQUEST_ROUTER" }, "name" : "getNodesCount", "parameters" : [ { "index" : 0, "name" : "graph_id", "routing_param" : true }, { "datatype" : "com.ilimi.graph.dac.model.SearchCriteria", "index" : 1, "name" : "search_criteria", "routing_param" : false } ], "request_path" : { "path_params" : [ "graph_id" ], "type" : "POST", "url" : "/v1/graph/*/count" }, "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569db1d2a8261c2e6f85eb67" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.NodeManagerImpl", "operation" : "createDataNode", "router" : "GRAPH_REQUEST_ROUTER" }, "name" : "createDataNode", "parameters" : [ { "index" : 0, "name" : "graph_id", "routing_param" : true }, { "datatype" : "com.ilimi.graph.dac.model.Node", "index" : 1, "name" : "node", "routing_param" : false } ], "request_path" : { "path_params" : [ "graph_id" ], "type" : "POST", "url" : "/v1/graph/*/datanode" }, "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569db1fca8261c2e6f85eb68" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.NodeManagerImpl", "operation" : "validateNode", "router" : "GRAPH_REQUEST_ROUTER" }, "name" : "validateNode", "parameters" : [ { "index" : 0, "name" : "graph_id", "routing_param" : true }, { "datatype" : "com.ilimi.graph.dac.model.Node", "index" : 1, "name" : "node", "routing_param" : false } ], "request_path" : { "path_params" : [ "graph_id" ], "type" : "POST", "url" : "/v1/graph/*/datanode/validate" }, "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569db25aa8261c2e6f85eb69" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.NodeManagerImpl", "operation" : "updateDataNode", "router" : "GRAPH_REQUEST_ROUTER" }, "name" : "updateDataNode", "parameters" : [ { "index" : 0, "name" : "graph_id", "routing_param" : true }, { "index" : 1, "name" : "node_id", "routing_param" : false }, { "datatype" : "com.ilimi.graph.dac.model.Node", "index" : 2, "name" : "node", "routing_param" : false } ], "request_path" : { "path_params" : [ "graph_id", "node_id" ], "type" : "PATCH", "url" : "/v1/graph/*/datanode/*" }, "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569db287a8261c2e6f85eb6a" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.NodeManagerImpl", "operation" : "deleteDataNode", "router" : "GRAPH_REQUEST_ROUTER" }, "name" : "deleteDataNode", "parameters" : [ { "index" : 0, "name" : "graph_id", "routing_param" : true }, { "index" : 1, "name" : "node_id", "routing_param" : false } ], "request_path" : { "path_params" : [ "graph_id", "node_id" ], "type" : "DELETE", "url" : "/v1/graph/*/datanode/*" }, "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569db306a8261c2e6f85eb6b" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.GraphMgrImpl", "operation" : "createRelation", "router" : "GRAPH_REQUEST_ROUTER" }, "name" : "addRelation", "parameters" : [ { "index" : 0, "name" : "graph_id", "routing_param" : true }, { "index" : 1, "name" : "start_node_id", "routing_param" : false }, { "index" : 2, "name" : "relation_type", "routing_param" : false }, { "index" : 3, "name" : "end_node_id", "routing_param" : false } ], "request_path" : { "path_params" : [ "graph_id", "start_node_id", "relation_type", "end_node_id" ], "type" : "POST", "url" : "/v1/graph/*/relation/*/*/*" }, "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569db339a8261c2e6f85eb6c" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.GraphMgrImpl", "operation" : "removeRelation", "router" : "GRAPH_REQUEST_ROUTER" }, "name" : "deleteRelation", "parameters" : [ { "index" : 0, "name" : "graph_id", "routing_param" : true }, { "index" : 1, "name" : "start_node_id", "routing_param" : false }, { "index" : 2, "name" : "relation_type", "routing_param" : false }, { "index" : 3, "name" : "end_node_id", "routing_param" : false } ], "request_path" : { "path_params" : [ "graph_id", "start_node_id", "relation_type", "end_node_id" ], "type" : "DELETE", "url" : "/v1/graph/*/relation/*/*/*" }, "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569db8f2a8261c2e6f85eb6d" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "actor_path" : { "manager" : "LEXILE_MEASURES_ACTOR", "operation" : "computeWordComplexity", "router" : "LANGUAGE_REQUEST_ROUTER" }, "name" : "computeWordComplexity", "parameters" : [ { "index" : 0, "name" : "language_id", "routing_param" : true }, { "index" : 1, "name" : "word", "routing_param" : false } ], "request_path" : { "path_params" : [ "language_id" ], "type" : "POST", "url" : "/v1/language/*/lexileMeasures/word" }, "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569db92fa8261c2e6f85eb6e" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "actor_path" : { "manager" : "LEXILE_MEASURES_ACTOR", "operation" : "computeTextComplexity", "router" : "LANGUAGE_REQUEST_ROUTER" }, "name" : "computeTextComplexity", "parameters" : [ { "index" : 0, "name" : "language_id", "routing_param" : true }, { "index" : 1, "name" : "text", "routing_param" : false } ], "request_path" : { "path_params" : [ "language_id" ], "type" : "POST", "url" : "/v1/language/*/lexileMeasures/text" }, "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569db9d8a8261c2e6f85eb6f" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "actor_path" : { "manager" : "LEXILE_MEASURES_ACTOR", "operation" : "computeComplexity", "router" : "LANGUAGE_REQUEST_ROUTER" }, "name" : "computeComplexity", "parameters" : [ { "index" : 0, "name" : "language_id", "routing_param" : true }, { "datatype" : "java.util.ArrayList", "index" : 1, "name" : "words", "routing_param" : false }, { "datatype" : "java.util.ArrayList", "index" : 2, "name" : "texts", "routing_param" : false } ], "request_path" : { "path_params" : [ "language_id" ], "type" : "POST", "url" : "/v1/language/*/lexileMeasures" }, "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569dbabda8261c2e6f85eb70" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "command_class" : "com.ilimi.orchestrator.interpreter.command.CheckResponseError", "name" : "check_response_error", "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569dbacfa8261c2e6f85eb71" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "command_class" : "com.ilimi.orchestrator.interpreter.command.ConvertGraphNode", "name" : "convert_graph_node", "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569dbae1a8261c2e6f85eb72" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "command_class" : "com.ilimi.orchestrator.interpreter.command.ConvertToGraphNode", "name" : "convert_to_graph_node", "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569dbaf5a8261c2e6f85eb73" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "command_class" : "com.ilimi.orchestrator.interpreter.command.GetResponseValue", "name" : "get_resp_value", "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569dbb0aa8261c2e6f85eb74" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "command_class" : "com.ilimi.orchestrator.interpreter.command.MergeResponse", "name" : "merge_response", "type" : "COMMAND" }
,{ "_id" : { "$oid" : "569ea794e4b0eb99fae9351b" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "create_response", "type" : "COMMAND", "command_class" : "com.ilimi.orchestrator.interpreter.command.CreateResponse" }
,{ "_id" : { "$oid" : "569ea7afe4b0eb99fae9351c" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "create_search_criteria", "type" : "COMMAND", "command_class" : "com.ilimi.orchestrator.interpreter.command.CreateSearchCriteria" }
,{ "_id" : { "$oid" : "569ea81ee4b0eb99fae9351d" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getDomainObjectType", "body" : "package require java\njava::import -package java.util HashMap Map\nif {$type == \"dimensions\"} {\nreturn \"Dimension\"\n} elseif {$type == \"concepts\"} {\nreturn \"Concept\"\n} elseif {$type == \"misconceptions\"} {\nreturn \"Misconception\"\n} elseif {$type == \"methods\"} {\nreturn \"Method\"\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_DOMAIN_INVALID_OBJECT_TYPE\"\n$result_map put \"message\" \"Invalid Object Type\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "type", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/getDomainObjectType" } }
,{ "_id" : { "$oid" : "569ea871e4b0eb99fae9351e" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getDomainObjects", "api_id" : "ekstep.domain.object.list", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Filter\njava::import -package com.ilimi.graph.dac.model Node\nset is_sortBy_null [java::isnull $sort]\nset is_resultSize_null [java::isnull $limit]\nset object_type_res [getDomainObjectType $type]\nset check_obj_type_error [check_response_error $object_type_res]\nif {$check_obj_type_error} {\nreturn $object_type_res\n} else {\nset graph_id \"domain\"\nset object_type [get_resp_value $object_type_res \"result\"]\nset get_domain_resp [getDataNode $graph_id $domain_id]\nset check_error [check_response_error $get_domain_resp]\nif {$check_error} {\nreturn $get_domain_resp\n} else {\nset domain_node [get_resp_value $get_domain_resp \"node\"]\nset domain_obj_type [java::prop $domain_node \"objectType\"]\nif {$domain_obj_type == \"Domain\"} {\nset map [java::new HashMap]\n$map put \"subject\" $domain_id\n$map put \"objectType\" $object_type\nif {$is_sortBy_null == 0} {\n$map put \"sortBy\" $sort\n}\nif {$is_resultSize_null == 0} {\n$map put \"resultSize\" $limit\n}\n$map put \"status\" \"Live\"\n$map put \"order\" $order\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset returnFields false\nset is_fieldList_null [java::isnull $fields]\nif {$is_fieldList_null == 0} {\nset returnFields true\n}\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset obj_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nif {$returnFields} {\nset domain_obj [convert_graph_node $graph_node $def_node $fields]\n} else {\nset domain_obj [convert_graph_node $graph_node $def_node]\n}\n$obj_list add $domain_obj\n}\nset result_map [java::new HashMap]\n$result_map put $type $obj_list\nset response_list [create_response $result_map]\nreturn $response_list\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_DOMAIN_NOT_FOUND\"\n$result_map put \"message\" \"Domain $domain_id not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "domain_id", "index" : 0, "routing_param" : false }, { "name" : "type", "index" : 1, "routing_param" : false }, { "name" : "sort", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false }, { "name" : "order", "index" : 3, "routing_param" : false }, { "name" : "limit", "datatype" : "java.lang.Integer", "index" : 4, "routing_param" : false }, { "name" : "fields", "datatype" : "java.util.ArrayList", "index" : 5, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/domains/*/*", "path_params" : [ "domain_id", "type" ], "request_params" : [ "sort", "order", "limit", "fields" ] } }
,{ "_id" : { "$oid" : "569ea8d9e4b0eb99fae9351f" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getDomainObject", "api_id" : "ekstep.domain.object.info", "body" : "package require java\njava::import -package java.util HashMap Map\nset object_type_res [getDomainObjectType $type]\nset check_obj_type_error [check_response_error $object_type_res]\nif {$check_obj_type_error} {\nreturn $object_type_res\n} else {\nset object_type [get_resp_value $object_type_res \"result\"]\nset graph_id \"domain\"\nset resp_get_node [getDataNode $graph_id $object_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset returnFields false\nset is_fieldList_null [java::isnull $fields]\nif {$is_fieldList_null == 0} {\nset returnFields true\n}\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset node_object_type [java::prop $graph_node \"objectType\"]\nset str_object_type [$object_type toString]\nif {$node_object_type == $str_object_type} {\nset node_metadata [java::prop $graph_node \"metadata\"]\nset node_subject [$node_metadata get \"subject\"]\nset node_subject_str [$node_subject toString]\nif {$domain_id == $node_subject_str} {\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nif {$returnFields} {\nset resp_object [convert_graph_node $graph_node $def_node $fields]\n} else {\nset resp_object [convert_graph_node $graph_node $def_node]\n}\nset result_map [java::new HashMap]\n$result_map put $object_type $resp_object\nset response_list [create_response $result_map]\nreturn $response_list\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_NODE_NOT_FOUND\"\n$result_map put \"message\" \"$str_object_type $object_id not found in $domain_id\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_NODE_NOT_FOUND\"\n$result_map put \"message\" \"$str_object_type $object_id not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "domain_id", "index" : 0, "routing_param" : false }, { "name" : "type", "index" : 1, "routing_param" : false }, { "name" : "object_id", "index" : 2, "routing_param" : false }, { "name" : "fields", "datatype" : "java.util.ArrayList", "index" : 3, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/domains/*/*/*", "path_params" : [ "domain_id", "type", "object_id" ], "request_params" : [ "fields" ] } }
,{ "_id" : { "$oid" : "569ea925e4b0eb99fae93520" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "searchDomainObjects", "api_id" : "ekstep.domain.object.search", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node RelationFilter\nproc proc_createRelationFilter {relationName direction} {\nset filter [java::new RelationFilter $relationName]\n$filter setFromDepth [java::new Integer 0]\n$filter setToDepth [java::new Integer 0]\n$filter setToDepth [java::new Integer 0]\n$filter setDirection $direction\nreturn $filter\n}\nproc proc_setRelationCriteria {concepts_list objectType filters} {\nset relation_query [java::new HashMap]\nset concepts_list_null [java::isnull $concepts_list]\nif {$concepts_list_null == 0} {\nset is_list [java::instanceof $concepts_list List]\nif {$is_list == 1} {\nset concepts_list_obj [java::cast List $concepts_list]\nset concepts_list_size [$concepts_list_obj size]\nif {$concepts_list_size > 0} {\n$relation_query put \"filters\" $filters\n$relation_query put \"objectType\" $objectType\nset concept_ids [java::new ArrayList]\njava::for {String concept_id} $concepts_list_obj {\n$concept_ids add $concept_id\n}\n$relation_query put \"identifiers\" $concept_ids\n}\n}\n}\nreturn $relation_query\n}\nset object_null [java::isnull $search]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_INVALID_SEARCH_REQUEST\"\n$result_map put \"message\" \"Invalid Search Request\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset object_type_res [getDomainObjectType $type]\nset check_obj_type_error [check_response_error $object_type_res]\nif {$check_obj_type_error} {\nreturn $object_type_res\n} else {\nset object_type [get_resp_value $object_type_res \"result\"]\nset str_object_type [$object_type toString]\nset invalidObjectType false\nset object_type_param [$search get \"objectType\"]\nset object_type_param_null [java::isnull $object_type_param]\nif {$object_type_param_null == 0} {\nset str_object_type_param [$object_type_param toString]\nif {$str_object_type_param != $str_object_type} {\nset invalidObjectType true\n}\n}\nif {$invalidObjectType} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_OBJECT_NOT_FOUND\"\n$result_map put \"message\" \"$str_object_type not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset check_null [java::isnull $search]\nif {$search == 1} {\nset $search [java::new HashMap]\n}\n$search put \"objectType\" $object_type\n$search put \"subject\" $domain_id\nset relations_list [java::new ArrayList]\nset concept_relation_names [java::new ArrayList]\n$concept_relation_names add [proc_createRelationFilter \"associatedTo\" \"OUT\"]\nset concepts_list [$search get \"concepts\"]\nset concept_query_map [proc_setRelationCriteria $concepts_list \"Concept\" $concept_relation_names]\nset concept_query_empty [$concept_query_map isEmpty]\nif {!$concept_query_empty} {\n$relations_list add $concept_query_map\n$search remove \"concepts\"\n}\nset relation_names [java::new ArrayList]\nif {$type == \"misconceptions\" || $type == \"methods\"} {\n$relation_names add [proc_createRelationFilter \"associatedTo\" \"OUT\"]\n}\n$relation_names add [proc_createRelationFilter \"isParentOf\" \"IN\"]\nset domains_list [$search get \"domains\"]\nset domain_query_map [proc_setRelationCriteria $domains_list \"Domain\" $relation_names]\nset domain_query_empty [$domain_query_map isEmpty]\nif {!$domain_query_empty} {\n$relations_list add $domain_query_map\n$search remove \"domains\"\n}\nset dimensions_list [$search get \"dimensions\"]\nset dimension_query_map [proc_setRelationCriteria $dimensions_list \"Dimension\" $relation_names]\nset dimension_query_empty [$dimension_query_map isEmpty]\nif {!$dimension_query_empty} {\n$relations_list add $dimension_query_map\n$search remove \"dimensions\"\n}\nset relationsListSize [$relations_list size]\nif {$relationsListSize > 0} {\n$search put \"relationCriteria\" $relations_list\n}\nset sort [$search get \"sort\"]\nset limit [$search get \"limit\"]\n$search put \"sortBy\" $sort\n$search put \"resultSize\" $limit\n$search remove \"sort\"\n$search remove \"limit\"\nset search_criteria [create_search_criteria $search]\nset graph_id \"domain\"\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset obj_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nset domain_obj [convert_graph_node $graph_node $def_node]\n$obj_list add $domain_obj\n}\nset result_map [java::new HashMap]\n$result_map put $type $obj_list\nset response_list [create_response $result_map]\nreturn $response_list\n}\n}\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "domain_id", "index" : 0, "routing_param" : false }, { "name" : "type", "index" : 1, "routing_param" : false }, { "name" : "search", "datatype" : "java.util.Map", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/domains/*/*/search", "path_params" : [ "domain_id", "type" ] } }
,{ "_id" : { "$oid" : "569ea970e4b0eb99fae93521" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "saveDomainObject", "api_id" : "ekstep.domain.object.save", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_null [java::isnull $object]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_DOMAIN_INVALID_OBJECT\"\n$result_map put \"message\" \"Invalid Request\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset object_type_res [getDomainObjectType $type]\nset check_obj_type_error [check_response_error $object_type_res]\nif {$check_obj_type_error} {\nreturn $object_type_res\n} else {\nset object_type [get_resp_value $object_type_res \"result\"]\nset graph_id \"domain\"\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$object put \"objectType\" $object_type\n$object put \"subject\" $domain_id\nset domain_obj [convert_to_graph_node $object $def_node]\nset create_response [createDataNode $graph_id $domain_obj]\nreturn $create_response\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "domain_id", "index" : 0, "routing_param" : false }, { "name" : "type", "index" : 1, "routing_param" : false }, { "name" : "object", "datatype" : "java.util.Map", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/domains/*/*", "path_params" : [ "domain_id", "type" ] } }
,{ "_id" : { "$oid" : "569ea9c8e4b0eb99fae93522" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateDomainObject", "api_id" : "ekstep.domain.object.update", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_null [java::isnull $object]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_DOMAIN_INVALID_OBJECT\"\n$result_map put \"message\" \"Invalid Request\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset object_type_res [getDomainObjectType $type]\nset check_obj_type_error [check_response_error $object_type_res]\nif {$check_obj_type_error} {\nreturn $object_type_res\n} else {\nset object_type [get_resp_value $object_type_res \"result\"]\nset graph_id \"domain\"\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$object put \"objectType\" $object_type\n$object put \"identifier\" $object_id\n$object put \"subject\" $domain_id\nset domain_obj [convert_to_graph_node $object $def_node]\nset create_response [updateDataNode $graph_id $object_id $domain_obj]\nreturn $create_response\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "domain_id", "index" : 0, "routing_param" : false }, { "name" : "type", "index" : 1, "routing_param" : false }, { "name" : "object_id", "index" : 2, "routing_param" : false }, { "name" : "object", "datatype" : "java.util.Map", "index" : 3, "routing_param" : false } ], "request_path" : { "type" : "PATCH", "url" : "/v2/domains/*/*/*", "path_params" : [ "domain_id", "type", "object_id" ] } }
,{ "_id" : { "$oid" : "569ea9ffe4b0eb99fae93523" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getDomains", "api_id" : "ekstep.domain.list", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset is_sortBy_null [java::isnull $sort]\nset is_resultSize_null [java::isnull $limit]\nset object_type \"Domain\"\nset map [java::new HashMap]\n$map put \"objectType\" $object_type\n$map put \"nodeType\" \"DATA_NODE\"\nif {$is_sortBy_null == 0} {\n$map put \"sortBy\" $sort\n}\nif {$is_resultSize_null == 0} {\n$map put \"resultSize\" $limit\n}\n$map put \"order\" $order\n$map put \"status\" \"Live\"\nset search_criteria [create_search_criteria $map]\nset returnFields false\nset is_fieldList_null [java::isnull $fields]\nif {$is_fieldList_null == 0} {\nset returnFields true\n}\nset graph_id \"domain\"\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset obj_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nif {$returnFields} {\nset domain_obj [convert_graph_node $graph_node $def_node $fields]\n} else {\nset domain_obj [convert_graph_node $graph_node $def_node]\n}\n$obj_list add $domain_obj\n}\nset result_map [java::new HashMap]\n$result_map put \"domains\" $obj_list\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "sort", "datatype" : "java.util.ArrayList", "index" : 0, "routing_param" : false }, { "name" : "order", "index" : 1, "routing_param" : false }, { "name" : "limit", "datatype" : "java.lang.Integer", "index" : 2, "routing_param" : false }, { "name" : "fields", "datatype" : "java.util.ArrayList", "index" : 3, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/domains", "request_params" : [ "sort", "order", "limit", "fields" ] } }
,{ "_id" : { "$oid" : "569eaa39e4b0eb99fae93524" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getDomain", "api_id" : "ekstep.domain.info", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList\nproc getCount {graph_id object_type domain_id} {\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $object_type\n$map put \"subject\" $domain_id\n$map put \"status\" \"Live\"\nset search_criteria [create_search_criteria $map]\nset search_response [getNodesCount $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn 0\n} else {\nset count [get_resp_value $search_response \"count\"]\nreturn $count\n}\n}\nproc getContentCount {graph_id domain_id} {\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" \"Content\"\nset domains [java::new ArrayList]\n$domains add $domain_id\n$map put \"domain\" $domains\n$map put \"status\" \"Live\"\nset contentTypes [java::new ArrayList]\n$contentTypes add \"Story\"\n$contentTypes add \"Worksheet\"\n$contentTypes add \"Game\"\n$contentTypes add \"Collection\"\n$map put \"contentType\" $contentTypes\nset search_criteria [create_search_criteria $map]\nset search_response [getNodesCount $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn 0\n} else {\nset count [get_resp_value $search_response \"count\"]\nreturn $count\n}\n}\nset object_type \"Domain\"\nset graph_id \"domain\"\nset resp_get_node [getDataNode $graph_id $domain_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset returnFields false\nset is_fieldList_null [java::isnull $fields]\nif {$is_fieldList_null == 0} {\nset returnFields true\n}\nset result_map [java::new HashMap]\njava::try {\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nif {$returnFields} {\nset resp_object [convert_graph_node $graph_node $def_node $fields]\n} else {\nset resp_object [convert_graph_node $graph_node $def_node]\n}\nset dimension_count [getCount $graph_id \"Dimension\" $domain_id]\nset concept_count [getCount $graph_id \"Concept\" $domain_id]\nset misconception_count [getCount $graph_id \"Misconception\" $domain_id]\nset method_count [getCount $graph_id \"Method\" $domain_id]\nset content_count [getContentCount $graph_id $domain_id]\n$resp_object put \"dimension_count\" $dimension_count\n$resp_object put \"concept_count\" $concept_count\n$resp_object put \"misconception_count\" $misconception_count\n$resp_object put \"method_count\" $method_count\n$resp_object put \"content_count\" $content_count\n$result_map put \"domain\" $resp_object\n} catch {Exception err} {\n$result_map put \"error\" [$err getMessage]\n}\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "domain_id", "index" : 0, "routing_param" : false }, { "name" : "fields", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/domains/*", "path_params" : [ "domain_id" ], "request_params" : [ "fields" ] } }
,{ "_id" : { "$oid" : "569f53b7e4b0eb99fae93525" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "convertGraphNode", "body" : "package require java\njava::import -package java.util HashMap Map\n\nset graph_id \"domain\"\nset resp_get_node [getDataNode $graph_id $object_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset object_type [java::prop $graph_node \"objectType\"]\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset resp_object [convert_graph_node $graph_node $def_node]\nset result_map [java::new HashMap]\n$result_map put $object_type $resp_object\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "object_id", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v1/graph/object/*", "path_params" : [ "object_id" ] } }
,{ "_id" : { "$oid" : "569f5766e4b0eb99fae93526" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getItemConcepts", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Filter\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.graph.dac.model Relation\nproc getNodeRelations {graphId nodeId} {\nset response [getDataNode $graphId $nodeId]\nset check_error [check_response_error $response]\nif {$check_error} {\njava::throw [java::new Exception \"Error response from getDataNode\"]\n}\nset node [get_resp_value $response \"node\"]\nset outRelations [java::prop $node \"outRelations\"]\nreturn $outRelations\n}\nproc relationsExist {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getNodeProperty {graphId nodeId property} {\nset response [getDataNode $graphId $nodeId]\nset check_error [check_response_error $response]\nif {$check_error} {\njava::throw [java::new Exception \"Error response from getDataNode\"]\n}\nset node [get_resp_value $response \"node\"]\nset propValue [java::prop $node $property]\nreturn $propValue\n}\nproc getConcepts {graphId nodeId} {\nset concepts [java::new ArrayList]\nset relations [getNodeRelations $graphId $nodeId]\nset hasRelations [relationsExist $relations]\nif {$hasRelations} {\njava::for {Relation relation} $relations {\nif {[java::prop $relation \"endNodeObjectType\"] == \"Concept\"} {\n$concepts add [java::prop $relation \"endNodeId\"]\n}\n}\n}\nreturn $concepts\n}\nset resultMap [java::new HashMap]\njava::try {\nset concepts [getConcepts $graphId $itemId]\nset itemMetadata [getNodeProperty $graphId $itemId \"metadata\"]\nset maxScore [$itemMetadata get \"max_score\"]\nif {[$concepts size] == 0} {\nset concepts [getConcepts $graphId $contentId]\n}\n} catch {Exception err} {\nputs [$err getMessage]\n$resultMap put \"error\" [$err getMessage]\n}\n$resultMap put \"concepts\" $concepts\n$resultMap put \"maxScore\" $maxScore\nset responseList [create_response $resultMap]\nreturn $responseList", "type" : "SCRIPT", "parameters" : [ { "name" : "graphId", "index" : 0, "routing_param" : true }, { "name" : "contentId", "index" : 1, "routing_param" : false }, { "name" : "itemId", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v1/analytics/domain/*/*/*", "path_params" : [ "graphId", "contentId", "itemId" ] } }
,{ "_id" : { "$oid" : "569f5e53e4b0eb99fae93527" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "deleteRelationOnConcepts", "body" : "package require java\njava::import -package java.util HashMap Map\nset graph_id \"domain\"\nset resp [deleteRelation $graph_id $concept_id1 $relation_name $concept_id2]\nreturn $resp", "type" : "SCRIPT", "parameters" : [ { "name" : "domain_id", "index" : 0, "routing_param" : false }, { "name" : "concept_id1", "index" : 1, "routing_param" : false }, { "name" : "relation_name", "index" : 2, "routing_param" : false }, { "name" : "concept_id2", "index" : 3, "routing_param" : false } ], "request_path" : { "type" : "PATCH", "url" : "/v2/domains/*/concepts/*/*/*", "path_params" : [ "domain_id", "concept_id1", "relation_name", "concept_id2" ] } }
,{ "_id" : { "$oid" : "569fbddae4b0eb99fae93528" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getContentItems", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Filter\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.graph.dac.model Relation\nproc getNode {graphId nodeId} {\nset response [getDataNode $graphId $nodeId]\nset check_error [check_response_error $response]\nif {$check_error} {\njava::throw [java::new Exception \"Error response from getDataNode\"]\n}\nset node [get_resp_value $response \"node\"]\nreturn $node\n}\nproc relationsExist {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getNodeMetadata {node property} {\nset metadata [java::prop $node \"metadata\"]\nset propValue [$metadata get $property]\nreturn $propValue\n}\nproc getNodeRelationIds {node relationType property} {\nset relationIds [java::new ArrayList]\nset outRelations [java::prop $node \"outRelations\"]\nset hasRelations [relationsExist $outRelations]\nif {$hasRelations} {\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"endNodeObjectType\"] == $relationType} {\n$relationIds add [java::prop $relation $property]\n}\n}\n}\nreturn $relationIds\n}\nproc getSetMembers {graphId setId} {\nset response [getDataNode $graphId $nodeId]\nset check_error [check_response_error $response]\nif {$check_error} {\njava::throw [java::new Exception \"Error response from getSetMembers\"]\n}\nset members [get_resp_value $response \"members\"]\nreturn $members\n}\nproc getItem {graphId itemId} {\nset node [getNode $graphId $nodeId]\nset item [java::prop $node \"metadata\"]\n$item put \"tags\" [java::prop $node \"tags\"]\nset concepts [getNodeRelationIds $node \"Concept\" \"endNodeId\"]\n$item put \"concepts\" $concepts\nreturn $item\n}\nset graphId \"domain\"\nset resultMap [java::new HashMap]\nset items [java::new ArrayList]\njava::try {\nset content [getNode $graphId $contentId]\nset itemSetIds [getNodeRelationIds $content \"ItemSet\" \"endNodeId\"]\nif {[$itemSetIds size] > 0} {\njava::for {String itemSetId} $itemSetIds {\nset itemIds [getSetMembers $graphId $itemSetId]\nif {[$itemIds length] > 0} {\njava::for {String itemId} $itemIds {\n$items add [getItem $graphId $itemId]\n}\n}\n}\n}\n} catch {Exception err} {\nputs [$err getMessage]\n$resultMap put \"error\" [$err getMessage]\n}\n$resultMap put \"items\" $items\nset responseList [create_response $resultMap]\nreturn $responseList", "type" : "SCRIPT", "parameters" : [ { "name" : "contentId", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v1/analytics/*/items", "path_params" : [ "contentId" ] } }
,{ "_id" : { "$oid" : "569fcd6be4b0eb99fae9352a" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getDomainMap", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Filter\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.graph.dac.model Relation\nproc getNodesByObjectType {graphId type} {\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $type\n$map put \"status\" \"Live\"\nset search_criteria [create_search_criteria $map]\nset response [searchNodes $graphId $search_criteria]\nset check_error [check_response_error $response]\nif {$check_error} {\njava::throw [java::new Exception \"Error response from getDataNode\"]\n}\nset nodes [get_resp_value $response \"node_list\"]\nreturn $nodes\n}\nproc relationsExist {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getNodes {graphId type} {\nset nodeList [java::new ArrayList]\nset relationList [java::new ArrayList]\nset nodes [getNodesByObjectType $graphId $type]\njava::for {Node node} $nodes {\nset metadata [java::prop $node \"metadata\"]\n$metadata put \"objectType\" $type\n$metadata put \"identifier\" [java::prop $node \"identifier\"]\n$metadata put \"tags\" [java::prop $node \"tags\"]\n$nodeList add $metadata\nset relations [java::prop $node \"outRelations\"]\nif {[relationsExist $relations]} {\njava::for {Relation relation} $relations {\nset relMetadata [java::prop $relation \"metadata\"]\nset nodeMetadata [java::prop $relation \"endNodeMetadata\"]\nset nodeStatus [java::cast {String} [$nodeMetadata get \"status\"]]\nif {[$nodeStatus equals \"Live\"]} {\n$relMetadata put \"relationType\" [java::prop $relation \"relationType\"]\n$relMetadata put \"startNodeId\" [java::prop $relation \"startNodeId\"]\n$relMetadata put \"endNodeId\" [java::prop $relation \"endNodeId\"]\n$relMetadata put \"startNodeObjectType\" [java::prop $relation \"startNodeObjectType\"]\n$relMetadata put \"endNodeObjectType\" [java::prop $relation \"endNodeObjectType\"]\n$relationList add $relMetadata\n}\n}\n}\n}\nset result [java::new HashMap]\n$result put \"nodes\" $nodeList\n$result put \"relations\" $relationList\nreturn $result\n}\nset resultMap [java::new HashMap]\nset nodeList [java::new ArrayList]\nset relationList [java::new ArrayList]\nset objectTypes [java::new {String[]} 3]\njava::try {\n$objectTypes set 0 \"Domain\"\n$objectTypes set 1 \"Dimension\"\n$objectTypes set 2 \"Concept\"\njava::for {String objectType} $objectTypes {\nset result [getNodes \"domain\" $objectType]\nset nodes [$result get \"nodes\"]\nset relations [$result get \"relations\"]\n$nodeList addAll [java::cast {List} $nodes]\n$relationList addAll [java::cast {List} $relations]\n}\n} catch {Exception err} {\nputs [$err getMessage]\n$resultMap put \"error\" [$err getMessage]\n}\n$resultMap put \"concepts\" $nodeList\n$resultMap put \"conceptsSize\" [$nodeList size]\n$resultMap put \"relations\" $relationList\nset responseList [create_response $resultMap]\nreturn $responseList", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "GET", "url" : "/v2/analytics/domain/map", "path_params" : [] } }
,{ "_id" : { "$oid" : "569fdf89e4b07cab1f4aa0e4" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getContent_v2", "api_id" : "ekstep.content.info", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\nproc proc_isNotNull {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 0} {\nset exist true\n}\n} catch {Exception err} {\nset exist false\n}\nreturn $exist\n}\nproc proc_getFirstElement {input_list} {\nset listNotNull [proc_isNotNull $input_list]\nif {$listNotNull} {\nset arr_instance [java::instanceof $input_list {String[]}]\nif {$arr_instance == 1} {\nset array [java::cast {String[]} $input_list]\nset listSize [$array length]\nif {$listSize > 0} {\nset word [$array get 0]\nreturn $word\n} else {\nreturn [java::new String \"English\"]\n}\n} else {\nreturn [$input_list toString]\n}\n} else {\nreturn [java::new String \"English\"]\n}\n}\nproc proc_updateLanguageCode {resp_object graph_node} {\nset objectNotNull [proc_isNotNull $resp_object]\nif {$objectNotNull} {\nset languageCode [$resp_object get \"languageCode\"]\nset languageCodeNotNull [proc_isNotNull $languageCode]\nif {!$languageCodeNotNull} {\nset node_metadata [java::prop $graph_node \"metadata\"]\nset language [$node_metadata get \"language\"]\nset languageVal [proc_getFirstElement $language]\nset language_map [java::new HashMap]\n$language_map put \"english\" \"en\"\n$language_map put \"telugu\" \"te\"\n$language_map put \"hindi\" \"hi\"\n$language_map put \"kannada\" \"ka\"\n$language_map put \"tamil\" \"ta\"\n$language_map put \"marathi\" \"mr\"\n$language_map put \"bengali\" \"bn\"\n$language_map put \"gujarati\" \"gu\"\n$language_map put \"odia\" \"or\"\n$language_map put \"assamese\" \"as\"\nset lang_lc [[java::new String $languageVal] toLowerCase]\nset langCode [$language_map get $lang_lc]\nset langCodeNotNull [proc_isNotNull $langCode]\nif {$langCodeNotNull} {\n$resp_object put \"languageCode\" $langCode\n} else {\n$resp_object put \"languageCode\" \"en\"\n}\n}\n}\n}\nset isEditMode 0\nset imageMode 0\nset object_type \"Content\"\nset graph_id \"domain\"\nset content_image_id ${content_id}.img\nset is_mode_null [java::isnull $mode]\nset resp_get_node [java::null]]\nif {($is_mode_null == 0) && ([$mode toString] == \"edit\")} {\nset resp_get_node [getDataNode $graph_id $content_image_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nset isEditMode 1\nset resp_get_node [getDataNode $graph_id $content_id]\n} else {\nset imageMode 1\n}\n} else {\nset resp_get_node [getDataNode $graph_id $content_id]\n}\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset returnFields false\nset is_fieldList_null [java::isnull $fields]\nif {$is_fieldList_null == 0} {\nset returnFields true\n}\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset metadata [java::prop $graph_node \"metadata\"]\nset status_val [$metadata get \"status\"]\nset status_val_str [java::new String [$status_val toString]]\nset isLiveState [$status_val_str equalsIgnoreCase \"Live\"]\nset isFlaggedState [$status_val_str equalsIgnoreCase \"Flagged\"]\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nif {$returnFields} {\nset resp_object [convert_graph_node $graph_node $def_node $fields]\nset externalProps [java::new ArrayList]\nset returnBody [$fields contains \"body\"]\nif {$returnBody == 1} {\n$externalProps add \"body\"\n}\nset returnOldBody [$fields contains \"oldBody\"]\nif {$returnOldBody == 1} {\n$externalProps add \"oldBody\"\n}\nset returnStageIcons [$fields contains \"stageIcons\"]\nif {$returnStageIcons == 1} {\n$externalProps add \"stageIcons\"\n}\nset externalPropId $content_id\nif {$imageMode == 1} {\nset externalPropId $content_image_id\n}\nset bodyResponse [getContentProperties $externalPropId $externalProps]\nset check_error [check_response_error $bodyResponse]\nif {!$check_error} {\nset extValues [get_resp_value $bodyResponse \"values\"]\nset is_extValues_null [java::isnull $extValues]\nif {$is_extValues_null == 0} {\nset extValuesMap [java::cast Map $extValues]\n$resp_object putAll $extValuesMap\n}\n}\n} else {\nset resp_object [convert_graph_node $graph_node $def_node]\n}\nproc_updateLanguageCode $resp_object $graph_node\n$resp_object put \"identifier\" $content_id\nif {$isEditMode == 1 && $isLiveState == 1} {\n$resp_object put \"status\" \"Draft\"\n}\nset result_map [java::new HashMap]\n$result_map put \"content\" $resp_object\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "content_id", "index" : 0, "routing_param" : false }, { "name" : "fields", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false }, { "name" : "mode", "datatype" : "java.lang.String", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/content/*", "path_params" : [ "content_id" ], "request_params" : [ "fields", "mode" ] } }
,{ "_id" : { "$oid" : "569fdf93e4b07cab1f4aa0e5" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "listContent_v2", "api_id" : "ekstep.content.list", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node RelationFilter\nproc proc_createRelationFilter {relationName direction} {\nset filter [java::new RelationFilter $relationName]\n$filter setFromDepth [java::new Integer 0]\n$filter setToDepth [java::new Integer 0]\n$filter setToDepth [java::new Integer 0]\n$filter setDirection $direction\nreturn $filter\n}\nproc proc_setRelationCriteria {concepts_list objectType filters} {\nset relation_query [java::new HashMap]\nset concepts_list_null [java::isnull $concepts_list]\nif {$concepts_list_null == 0} {\nset is_list [java::instanceof $concepts_list List]\nif {$is_list == 1} {\nset concepts_list_obj [java::cast List $concepts_list]\nset concepts_list_size [$concepts_list_obj size]\nif {$concepts_list_size > 0} {\n$relation_query put \"filters\" $filters\n$relation_query put \"objectType\" $objectType\nset concept_ids [java::new ArrayList]\njava::for {String concept_id} $concepts_list_obj {\n$concept_ids add $concept_id\n}\n$relation_query put \"identifiers\" $concept_ids\n}\n}\n}\nreturn $relation_query\n}\nset object_null [java::isnull $search]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_INVALID_SEARCH_REQUEST\"\n$result_map put \"message\" \"Invalid Search Request\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset invalidObjectType false\nset object_type_param [$search get \"objectType\"]\nset object_type_param_null [java::isnull $object_type_param]\nif {$object_type_param_null == 0} {\nset str_object_type_param [$object_type_param toString]\nif {$str_object_type_param != \"Content\"} {\nset invalidObjectType true\n}\n}\nif {$invalidObjectType} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_NOT_FOUND\"\n$result_map put \"message\" \"No content found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset object_type \"Content\"\nset check_null [java::isnull $search]\nif {$search == 1} {\nset $search [java::new HashMap]\n}\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\nset status_val [$search get \"status\"]\nset is_status_null [java::isnull $status_val]\nif {$is_status_null == 1} {\n$search put \"status\" \"Live\"\n}\nset filter_list [java::new ArrayList]\nset filter [java::new HashMap]\n$filter put \"property\" \"contentType\"\n$filter put \"operator\" \"!=\"\n$filter put \"value\" \"Asset\"\n$filter_list add $filter\nset filter2 [java::new HashMap]\n$filter2 put \"property\" \"contentType\"\n$filter2 put \"operator\" \"!=\"\n$filter2 put \"value\" \"Template\"\n$filter_list add $filter2\n$search put \"filters\" $filter_list\nset relations_list [java::new ArrayList]\nset concepts_list [$search get \"concepts\"]\nset concepts_list_null [java::isnull $concepts_list]\nif {$concepts_list_null == 0} {\nset is_list [java::instanceof $concepts_list List]\nif {$is_list == 1} {\nset concepts_list_obj [java::cast List $concepts_list]\nset concepts_list_size [$concepts_list_obj size]\nif {$concepts_list_size > 0} {\nset relation_query [java::new HashMap]\n$relation_query put \"name\" \"associatedTo\"\n$relation_query put \"objectType\" \"Concept\"\nset concept_ids [java::new ArrayList]\njava::for {String concept_id} $concepts_list_obj {\n$concept_ids add $concept_id\n}\n$relation_query put \"identifiers\" $concept_ids\n$relations_list add $relation_query\n$search remove \"concepts\"\n}\n}\n}\nset relation_names [java::new ArrayList]\n$relation_names add [proc_createRelationFilter \"associatedTo\" \"OUT\"]\n$relation_names add [proc_createRelationFilter \"isParentOf\" \"IN\"]\nset domains_list [$search get \"domains\"]\nset domain_query_map [proc_setRelationCriteria $domains_list \"Domain\" $relation_names]\nset domain_query_empty [$domain_query_map isEmpty]\nif {!$domain_query_empty} {\n$relations_list add $domain_query_map\n$search remove \"domains\"\n}\nset dimensions_list [$search get \"dimensions\"]\nset dimension_query_map [proc_setRelationCriteria $dimensions_list \"Dimension\" $relation_names]\nset dimension_query_empty [$dimension_query_map isEmpty]\nif {!$dimension_query_empty} {\n$relations_list add $dimension_query_map\n$search remove \"dimensions\"\n}\nset relationsListSize [$relations_list size]\nif {$relationsListSize > 0} {\n$search put \"relationCriteria\" $relations_list\n}\nset sort [$search get \"sort\"]\nset limit [$search get \"limit\"]\nset limit_null [java::isnull $limit]\nif {$limit_null == 1} {\nset limit [java::new Integer 50]\n}\n$search put \"sortBy\" $sort\n$search put \"resultSize\" $limit\n$search remove \"sort\"\n$search remove \"limit\"\nset returnFields false\nset fieldList [$search get \"fields\"]\nset is_fieldList_null [java::isnull $fieldList]\nif {$is_fieldList_null == 0} {\n$search remove \"fields\"\nset returnFields true\n}\nset search_criteria [create_search_criteria $search]\nset graph_id \"domain\"\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset obj_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nif {$returnFields} {\nset domain_obj [convert_graph_node $graph_node $def_node $fieldList]\n} else {\nset domain_obj [convert_graph_node $graph_node $def_node]\n}\n$obj_list add $domain_obj\n}\nset content_ttl [java::new Integer 0]\nset def_metadata [java::prop $def_node \"metadata\"]\nset def_metadata_null [java::isnull $def_metadata]\nif {$def_metadata_null != 1} {\nset ttl_val [$def_metadata get \"ttl\"]\nset ttl_val_null [java::isnull $ttl_val]\nif {$ttl_val_null != 1} {\nset content_ttl $ttl_val\n}\n}\nset result_map [java::new HashMap]\n$result_map put \"ttl\" $content_ttl\n$result_map put \"content\" $obj_list\nset response_list [create_response $result_map]\nreturn $response_list\n}\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "search", "datatype" : "java.util.Map", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/content/list" } }
,{ "_id" : { "$oid" : "569fdf9de4b07cab1f4aa0e6" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "searchContent_v2", "api_id" : "ekstep.content.search", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node RelationFilter\nproc proc_createRelationFilter {relationName direction} {\nset filter [java::new RelationFilter $relationName]\n$filter setFromDepth [java::new Integer 0]\n$filter setToDepth [java::new Integer 0]\n$filter setToDepth [java::new Integer 0]\n$filter setDirection $direction\nreturn $filter\n}\nproc proc_setRelationCriteria {concepts_list objectType filters} {\nset relation_query [java::new HashMap]\nset concepts_list_null [java::isnull $concepts_list]\nif {$concepts_list_null == 0} {\nset is_list [java::instanceof $concepts_list List]\nif {$is_list == 1} {\nset concepts_list_obj [java::cast List $concepts_list]\nset concepts_list_size [$concepts_list_obj size]\nif {$concepts_list_size > 0} {\n$relation_query put \"filters\" $filters\n$relation_query put \"objectType\" $objectType\nset concept_ids [java::new ArrayList]\njava::for {String concept_id} $concepts_list_obj {\n$concept_ids add $concept_id\n}\n$relation_query put \"identifiers\" $concept_ids\n}\n}\n}\nreturn $relation_query\n}\nset object_null [java::isnull $search]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_INVALID_SEARCH_REQUEST\"\n$result_map put \"message\" \"Invalid Search Request\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset invalidObjectType false\nset object_type_param [$search get \"objectType\"]\nset object_type_param_null [java::isnull $object_type_param]\nif {$object_type_param_null == 0} {\nset str_object_type_param [$object_type_param toString]\nif {$str_object_type_param != \"Content\"} {\nset invalidObjectType true\n}\n}\nif {$invalidObjectType} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_NOT_FOUND\"\n$result_map put \"message\" \"No content found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset object_type \"Content\"\nset check_null [java::isnull $search]\nif {$search == 1} {\nset $search [java::new HashMap]\n}\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\nset relations_list [java::new ArrayList]\nset concepts_list [$search get \"concepts\"]\nset concepts_list_null [java::isnull $concepts_list]\nif {$concepts_list_null == 0} {\nset is_list [java::instanceof $concepts_list List]\nif {$is_list == 1} {\nset concepts_list_obj [java::cast List $concepts_list]\nset concepts_list_size [$concepts_list_obj size]\nif {$concepts_list_size > 0} {\nset relations_list [java::new ArrayList]\nset relation_query [java::new HashMap]\n$relation_query put \"name\" \"associatedTo\"\n$relation_query put \"objectType\" \"Concept\"\nset concept_ids [java::new ArrayList]\njava::for {String concept_id} $concepts_list_obj {\n$concept_ids add $concept_id\n}\n$relation_query put \"identifiers\" $concept_ids\n$relations_list add $relation_query\n$search remove \"concepts\"\n}\n}\n}\nset relation_names [java::new ArrayList]\n$relation_names add [proc_createRelationFilter \"associatedTo\" \"OUT\"]\n$relation_names add [proc_createRelationFilter \"isParentOf\" \"IN\"]\nset domains_list [$search get \"domains\"]\nset domain_query_map [proc_setRelationCriteria $domains_list \"Domain\" $relation_names]\nset domain_query_empty [$domain_query_map isEmpty]\nif {!$domain_query_empty} {\n$relations_list add $domain_query_map\n$search remove \"domains\"\n}\nset dimensions_list [$search get \"dimensions\"]\nset dimension_query_map [proc_setRelationCriteria $dimensions_list \"Dimension\" $relation_names]\nset dimension_query_empty [$dimension_query_map isEmpty]\nif {!$dimension_query_empty} {\n$relations_list add $dimension_query_map\n$search remove \"dimensions\"\n}\nset relationsListSize [$relations_list size]\nif {$relationsListSize > 0} {\n$search put \"relationCriteria\" $relations_list\n}\nset sort [$search get \"sort\"]\nset limit [$search get \"limit\"]\n$search put \"sortBy\" $sort\n$search put \"resultSize\" $limit\n$search remove \"sort\"\n$search remove \"limit\"\nset returnFields false\nset fieldList [$search get \"fields\"]\nset is_fieldList_null [java::isnull $fieldList]\nif {$is_fieldList_null == 0} {\n$search remove \"fields\"\nset returnFields true\n}\nset search_criteria [create_search_criteria $search]\nset graph_id \"domain\"\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset obj_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nif {$returnFields} {\nset domain_obj [convert_graph_node $graph_node $def_node $fieldList]\n} else {\nset domain_obj [convert_graph_node $graph_node $def_node]\n}\n$obj_list add $domain_obj\n}\nset result_map [java::new HashMap]\n$result_map put \"content\" $obj_list\nset response_list [create_response $result_map]\nreturn $response_list\n}\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "search", "datatype" : "java.util.Map", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/content/search" } }
,{ "_id" : { "$oid" : "569fdfa8e4b07cab1f4aa0e7" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "saveContent_v2", "api_id" : "ekstep.content.save", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package java.util HashSet Set\njava::import -package com.ilimi.graph.dac.model Node Relation\njava::import -package com.ilimi.graph.model.node MetadataDefinition\nproc proc_isEmpty {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 1} {\nset exist true\n} else {\nset strValue [$value toString]\nset newStrValue [java::new String $strValue]\nset strLength [$newStrValue length]\nif {$strLength == 0} {\nset exist true\n}\n}\n} catch {Exception err} {\nset exist true\n}\nreturn $exist\n}\nset object_null [java::isnull $content]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_INVALID_OBJECT\"\n$result_map put \"message\" \"Invalid Request\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset object_type \"Content\"\nset graph_id \"domain\"\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$content put \"objectType\" $object_type\nset mimeType [$content get \"mimeType\"]\nset mimeTypeEmpty [proc_isEmpty $mimeType]\nif {!$mimeTypeEmpty} {\nset isApkMimeType [[java::new String [$mimeType toString]] equalsIgnoreCase \"application/vnd.android.package-archive\"]\nif {$isApkMimeType != 1} {\n$content put \"osId\" \"org.ekstep.quiz.app\"\n}\n}\nset osId_Error false\nset contentType [$content get \"contentType\"]\nset contentTypeEmpty [proc_isEmpty $contentType]\nif {!$mimeTypeEmpty} {\nset osId [$content get \"osId\"]\nset osIdEmpty [proc_isEmpty $osId]\nset osIdCheck [[java::new String [$mimeType toString]] equalsIgnoreCase \"application/vnd.android.package-archive\"]\nif {$osIdCheck == 1 && $osIdEmpty} {\nset osId_Error false\n}\nif {!$contentTypeEmpty} {\nset textbookUnitCheck [[java::new String [$contentType toString]] equalsIgnoreCase \"TextBookUnit\"]\nif {$textbookUnitCheck == 1} {\n$content put \"visibility\" \"Parent\"\n}\n}\nif {$osId_Error} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_INVALID_OSID\"\n$result_map put \"message\" \"OSId cannot be empty\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset externalProps [java::new HashMap]\nset body [$content get \"body\"]\nset bodyEmpty [proc_isEmpty $body]\nif {!$bodyEmpty} {\n$content put \"body\" [java::null]\n$externalProps put \"body\" $body\n}\nset oldBody [$content get \"oldBody\"]\nset oldBodyEmpty [proc_isEmpty $oldBody]\nif {!$oldBodyEmpty} {\n$content put \"oldBody\" [java::null]\n$externalProps put \"oldBody\" $oldBody\n}\nset stageIcons [$content get \"stageIcons\"]\nset stageIconsEmpty [proc_isEmpty $stageIcons]\nif {!$stageIconsEmpty} {\n$content put \"stageIcons\" [java::null]\n$externalProps put \"stageIcons\" $stageIcons\n}\nset codeValidationFailed 0\nif {!$mimeTypeEmpty} {\nset isPluginMimeType [[java::new String [$mimeType toString]] equalsIgnoreCase \"application/vnd.ekstep.plugin-archive\"]\nif {$isPluginMimeType == 1} {\nset pluginCode [$content get \"code\"]\nset codeEmpty [proc_isEmpty $pluginCode]\nif {$codeEmpty} {\nset codeValidationFailed 1\n} else {\n$content put \"identifier\" $pluginCode\n}\n}\n}\nif {$codeValidationFailed == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_PLUGIN_CODE_REQUIRED\"\n$result_map put \"message\" \"Unique code is mandatory for plugins\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset domain_obj [convert_to_graph_node $content $def_node]\nset create_response [createDataNode $graph_id $domain_obj]\nset check_error [check_response_error $create_response]\nif {$check_error} {\nreturn $create_response\n} else {\nset content_id [get_resp_value $create_response \"node_id\"]\nif {!$bodyEmpty || !$oldBodyEmpty} {\nset bodyResponse [updateContentProperties $content_id $externalProps]\nset check_error [check_response_error $bodyResponse]\nif {$check_error} {\nreturn $bodyResponse\n} else {\nreturn $create_response\n}\n} else {\nreturn $create_response\n}\n}\n}\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_INVALID_CONTENT_MIMETYPE_TYPE\"\n$result_map put \"message\" \"Mime Type cannot be empty\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "content", "datatype" : "java.util.Map", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/content" } }
,{ "_id" : { "$oid" : "569fdfb3e4b07cab1f4aa0e8" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateContent_v2", "api_id" : "ekstep.content.update", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map Date\njava::import -package java.util HashSet Set\njava::import -package com.ilimi.graph.dac.model Node Relation\njava::import -package com.ilimi.graph.common DateUtils\nproc proc_isNotNull {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 0} {\nset exist true\n}\n} catch {Exception err} {\nset exist false\n}\nreturn $exist\n}\nproc proc_isEmpty {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 1} {\nset exist true\n} else {\nset strValue [$value toString]\nset newStrValue [java::new String $strValue]\nset strLength [$newStrValue length]\nif {$strLength == 0} {\nset exist true\n}\n}\n} catch {Exception err} {\nset exist true\n}\nreturn $exist\n}\nproc proc_isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nset object_null [java::isnull $content]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_INVALID_OBJECT\"\n$result_map put \"message\" \"Invalid Request\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset original_content_id $content_id\nset object_type \"Content\"\nset content_image_object_type \"ContentImage\"\nset graph_id \"domain\"\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$content put \"objectType\" $object_type\n$content put \"identifier\" $content_id\nset osId_Error false\nset contentType [$content get \"contentType\"]\nset contentTypeNotNull [proc_isNotNull $contentType]\nset contentTypeEmpty false\nif {$contentTypeNotNull} {\nset contentTypeEmpty [proc_isEmpty $contentType]\n}\nif {!$contentTypeEmpty} {\nset isImageObjectCreationNeeded 0\nset imageObjectExists 0\nset osId [$content get \"osId\"]\nset osIdNotNull [proc_isNotNull $osId]\nset osIdEmpty false\nif {$osIdNotNull} {\nset osIdEmpty [proc_isEmpty $osId]\n}\nset osIdCheck 1\nif {$contentTypeNotNull} {\nset osIdCheck [[java::new String [$contentType toString]] equalsIgnoreCase \"Game\"]\n}\nif {$osIdCheck == 1 && $osIdEmpty} {\nset osId_Error false\n}\nif {$osId_Error} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_INVALID_OSID\"\n$result_map put \"message\" \"OSId cannot be empty\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset content_image_id ${content_id}.img\nset get_node_response [getDataNode $graph_id $content_image_id]\nset get_node_response_error [check_response_error $get_node_response]\nif {$get_node_response_error} {\nset isImageObjectCreationNeeded 1\nset get_node_response [getDataNode $graph_id $content_id]\nset get_node_response_error [check_response_error $get_node_response]\n} else {\nset imageObjectExists 1\n}\nif {$get_node_response_error} {\nreturn $get_node_response;\n} else {\nset externalProps [java::new HashMap]\nset body [$content get \"body\"]\nset bodyEmpty [proc_isEmpty $body]\nif {!$bodyEmpty} {\n$externalProps put \"body\" $body\n$content put \"artifactUrl\" [java::null]\n$content put \"body\" [java::null]\n}\nset oldBody [$content get \"oldBody\"]\nset oldBodyEmpty [proc_isEmpty $oldBody]\nif {!$oldBodyEmpty} {\n$externalProps put \"oldBody\" $oldBody\n$content put \"oldBody\" [java::null]\n}\nset stageIcons [$content get \"stageIcons\"]\nset stageIconsEmpty [proc_isEmpty $stageIcons]\nif {!$stageIconsEmpty} {\n$content put \"stageIcons\" [java::null]\n$externalProps put \"stageIcons\" $stageIcons\n}\nset graph_node [get_resp_value $get_node_response \"node\"]\nset metadata [java::prop $graph_node \"metadata\"]\nset mimeType [$metadata get \"mimeType\"]\nset domain_val [$metadata get \"domain\"]\nset domain_val_null [java::isnull $domain_val]\nif {$domain_val_null == 0} {\nset domain_val_instance [java::instanceof $domain_val {String[]}]\nif {$domain_val_instance == 0} {\nset input_domain [$content get \"domain\"]\nset input_domain_null [java::isnull $input_domain]\nif {$input_domain_null == 1} {\nset domain_list [java::new ArrayList]\n$domain_list add $domain_val\n$content put \"domain\" $domain_list\n}\n}\n}\nset audience_val [$metadata get \"audience\"]\nset audience_val_null [java::isnull $audience_val]\nif {$audience_val_null == 0} {\nset audience_val_instance [java::instanceof $audience_val {String[]}]\nif {$audience_val_instance == 0} {\nset audience_list [java::new ArrayList]\n$audience_list add $audience_val\n$metadata put \"audience\" $audience_list\nset input_audience [$content get \"audience\"]\nset input_audience_null [java::isnull $input_audience]\nif {$input_audience_null == 1} {\n$content put \"audience\" $audience_list\n}\n}\n}\nset status_val [$metadata get \"status\"]\nset status_val_str [java::new String [$status_val toString]]\nset isReviewState [$status_val_str equalsIgnoreCase \"Review\"]\nset isFlaggedReviewState [$status_val_str equalsIgnoreCase \"FlagReview\"]\nset isFlaggedState [$status_val_str equalsIgnoreCase \"Flagged\"]\nset isLiveState [$status_val_str equalsIgnoreCase \"Live\"]\nset input_status [$content get \"status\"]\nset input_status_null [java::isnull $input_status]\nset log_event 0\nif {$input_status_null == 0} {\nset input_status_str [java::new String [$input_status toString]]\nset updateToReviewState [$input_status_str equalsIgnoreCase \"Review\"]\nset updateToFlagReviewState [$input_status_str equalsIgnoreCase \"FlagReview\"]\nif {( $updateToReviewState == 1 || $updateToFlagReviewState == 1 ) && ( $isReviewState != 1 || $isFlaggedReviewState != 1 )} {\n$content put \"lastSubmittedOn\" [java::call DateUtils format [java::new Date]]\n}\nif {![$input_status_str equals $status_val_str]} {\nset log_event 1\n}\n}\nset check_error false\nset create_response [java::null]\nif {$isLiveState == 1 || $isFlaggedState == 1} {\nif {$isImageObjectCreationNeeded == 1} {\njava::prop $graph_node \"identifier\" $content_image_id\njava::prop $graph_node \"objectType\" $content_image_object_type\n#if {$isFlaggedState == 1} {\n#$metadata put \"status\" \"FlagDraft\"\n#} else {\n$metadata put \"status\" \"Draft\"\n#}\nset lastUpdatedBy [$content get \"lastUpdatedBy\"]\nset isLastUpdateNotNull [proc_isNotNull $lastUpdatedBy]\nif {$isLastUpdateNotNull} {\n$metadata put \"lastUpdatedBy\" $lastUpdatedBy\n}\nset create_response [createDataNode $graph_id $graph_node]\nset check_error [check_response_error $create_response]\nif {!$check_error} {\nset externalPropFields [java::new ArrayList]\n$externalPropFields add \"body\"\n$externalPropFields add \"oldBody\"\n$externalPropFields add \"stageIcons\"\nset bodyResponse [getContentProperties $content_id $externalPropFields]\nset check_error [check_response_error $bodyResponse]\nif {!$check_error} {\nset extValues [get_resp_value $bodyResponse \"values\"]\nset is_extValues_null [java::isnull $extValues]\nif {$is_extValues_null == 0} {\nset extValuesMap [java::cast Map $extValues]\nset bodyResponse [updateContentProperties $content_image_id $extValuesMap]\n}\n}\n$content put \"versionKey\" [get_resp_value $create_response \"versionKey\"]\n}\n}\nset content_id $content_image_id\n} elseif {$imageObjectExists == 1} {\nset content_id $content_image_id\n}\nif {$check_error} {\nreturn $create_response\n} else {\nset domain_obj [convert_to_graph_node $content $def_node $graph_node]\nset create_response [updateDataNode $graph_id $content_id $domain_obj]\nset check_error [check_response_error $create_response]\nif {$check_error} {\nreturn $create_response\n} else {\n$create_response put \"node_id\" $original_content_id\nif {$log_event == 1} {\n$metadata putAll $content\n$metadata put \"prevState\" $status_val_str\nset log_response [log_content_lifecycle_event $original_content_id $metadata]\n}\nif {!$bodyEmpty || !$oldBodyEmpty} {\nset bodyResponse [updateContentProperties $content_id $externalProps]\nset check_error [check_response_error $bodyResponse]\nif {$check_error} {\nreturn $bodyResponse\n} else {\nreturn $create_response\n}\n} else {\nreturn $create_response\n}\n}\n}\n}\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_INVALID_CONTENT_TYPE\"\n$result_map put \"message\" \"Content Type cannot be empty\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "content_id", "index" : 0, "routing_param" : false }, { "name" : "content", "datatype" : "java.util.Map", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "PATCH", "url" : "/v2/content/*", "path_params" : [ "content_id" ] } }
,{ "_id" : { "$oid" : "56a07db1e4b03e0095c22f85" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createSet", "type" : "COMMAND", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "members", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false }, { "name" : "object_type", "index" : 2, "routing_param" : false }, { "name" : "member_type", "index" : 3, "routing_param" : false }, { "name" : "node", "datatype" : "com.ilimi.graph.dac.model.Node", "index" : 4, "routing_param" : false } ], "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.CollectionManagerImpl", "operation" : "createSet", "router" : "GRAPH_REQUEST_ROUTER" }, "request_path" : { "type" : "POST", "url" : "/v1/graph/*/createSet", "path_params" : [ "graph_id" ] } }
,{ "_id" : { "$oid" : "56a07dbee4b03e0095c22f86" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getCollectionMembers", "type" : "COMMAND", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "collection_id", "index" : 1, "routing_param" : false }, { "name" : "collection_type", "index" : 2, "routing_param" : false } ], "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.CollectionManagerImpl", "operation" : "getCollectionMembers", "router" : "GRAPH_REQUEST_ROUTER" }, "request_path" : { "type" : "GET", "url" : "/v1/graph/*/getCollectionMembers/*/*", "path_params" : [ "graph_id", "collection_id", "collection_type" ] } }
,{ "_id" : { "$oid" : "56a07dcce4b03e0095c22f87" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateSet", "type" : "COMMAND", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "members", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false }, { "name" : "object_type", "index" : 2, "routing_param" : false }, { "name" : "member_type", "index" : 3, "routing_param" : false }, { "name" : "node", "datatype" : "com.ilimi.graph.dac.model.Node", "index" : 4, "routing_param" : false } ], "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.CollectionManagerImpl", "operation" : "updateSet", "router" : "GRAPH_REQUEST_ROUTER" }, "request_path" : { "type" : "PATCH", "url" : "/v1/graph/*/updateSet", "path_params" : [ "graph_id" ] } }
,{ "_id" : { "$oid" : "56a07df2e4b03e0095c22f88" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createWordList", "api_id" : "ekstep.wordlist.save", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset lemma_list [java::new ArrayList]\nset object_type \"Word\"\nset set_type \"WordList\"\nset error_status \"Failed\"\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $object_type\n$map put \"lemma\" $words\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset word_id_list [java::new ArrayList]\nset graphSize [$graph_nodes size]\nset lemmaSize [$words size]\nif {$graphSize < $lemmaSize} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"NODE_NOT_FOUND\"\n$result_map put \"message\" \"Node(s) not found\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset err_response [create_error_response $result_map]\nreturn $err_response\n}\njava::for {Node graph_node} $graph_nodes {\nset word_id [java::prop $graph_node \"identifier\"]\n$word_id_list add $word_id\n}\nset set_node [java::new Node]\njava::prop $set_node \"metadata\" $metadata\nset resp [createSet $language_id $word_id_list $set_type $object_type $set_node]\nupdateWordListMembership $language_id $word_id_list\nreturn $resp\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "words", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false }, { "name" : "metadata", "datatype" : "java.util.HashMap", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/language/dictionary/wordlist/*", "path_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "56a07e03e4b03e0095c22f89" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateWordList", "api_id" : "ekstep.wordlist.update", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset lemma_list [java::new ArrayList]\nset object_type \"Word\"\nset collection_type \"SET\"\nset set_type \"WordList\"\nset wordIds [java::new ArrayList]\nset isWordNull [java::isnull $words]\nif {$isWordNull == 0} {\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $object_type\n$map put \"lemma\" $words\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset word_id_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nset word_id [java::prop $graph_node \"identifier\"]\n$word_id_list add $word_id\n}\n$wordIds addAll $word_id_list\nset resp [addMembers $language_id $wordlist_id $collection_type $word_id_list]\nset check_error_add_member [check_response_error $resp]\nif {$check_error_add_member} {\nreturn $resp\n}\n}\n}\nset isRemoveWordsNull [java::isnull $removeWords]\nif {$isRemoveWordsNull == 0} {\nset rm_map [java::new HashMap]\n$rm_map put \"nodeType\" \"DATA_NODE\"\n$rm_map put \"objectType\" $object_type\n$rm_map put \"lemma\" $removeWords\nset rm_search_criteria [create_search_criteria $rm_map]\nset rm_search_response [searchNodes $language_id $rm_search_criteria]\nset rm_check_error [check_response_error $rm_search_response]\nif {$rm_check_error} {\nreturn $rm_search_response;\n} else {\nset rm_graph_nodes [get_resp_value $rm_search_response \"node_list\"]\nset rm_word_id_list [java::new ArrayList]\njava::for {Node rm_graph_node} $rm_graph_nodes {\nset rm_word_id [java::prop $rm_graph_node \"identifier\"]\n$rm_word_id_list add $rm_word_id\n}\n$wordIds addAll $rm_word_id_list\nset rm_resp [removeMembers $language_id $wordlist_id $collection_type $rm_word_id_list]\nset check_error_rm_member [check_response_error $rm_resp]\nif {$check_error_rm_member} {\nreturn $rm_resp\n}\n}\n}\nupdateWordListMembership $language_id $wordIds\nset get_resp [getWordList $language_id $wordlist_id]\nset get_resp_check_error [check_response_error $get_resp]\nif {$get_resp_check_error} {\nreturn $get_resp;\n}\nset word_list_node [get_resp_value $get_resp \"wordlist\"]\nset words_list_obj [$word_list_node get \"words\"]\nset words_list [java::cast ArrayList $words_list_obj]\nset words_list_size [$words_list size]\nif { $words_list_size > 0 } {\nset up_map [java::new HashMap]\n$up_map put \"nodeType\" \"DATA_NODE\"\n$up_map put \"objectType\" $object_type\n$up_map put \"lemma\" $words_list\nset up_search_criteria [create_search_criteria $up_map]\nset up_search_response [searchNodes $language_id $up_search_criteria]\nset up_check_error [check_response_error $up_search_response]\nif {$up_check_error} {\nreturn $up_search_response;\n} else {\nset up_graph_nodes [get_resp_value $up_search_response \"node_list\"]\nset up_word_id_list [java::new ArrayList]\njava::for {Node up_graph_node} $up_graph_nodes {\nset up_word_id [java::prop $up_graph_node \"identifier\"]\n$up_word_id_list add $up_word_id\n}\nset set_node [java::new Node]\njava::prop $set_node \"identifier\" $wordlist_id\njava::prop $set_node \"metadata\" $metadata\nset up_resp [updateSet $language_id $up_word_id_list $set_type $object_type $set_node]\nset check_error_up_resp [check_response_error $up_resp]\nreturn $up_resp\n}\n} else {\nreturn \"Ok\"\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "wordlist_id", "index" : 1, "routing_param" : true }, { "name" : "words", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false }, { "name" : "metadata", "datatype" : "java.util.HashMap", "index" : 3, "routing_param" : false }, { "name" : "removeWords", "datatype" : "java.util.ArrayList", "index" : 4, "routing_param" : false } ], "request_path" : { "type" : "PATCH", "url" : "/v1/language/dictionary/wordlist/*/*", "path_params" : [ "language_id", "wordlist_id" ] } }
,{ "_id" : { "$oid" : "56a07e10e4b03e0095c22f8a" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getWordList", "api_id" : "ekstep.wordlist.info", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc getOutRelations {graph_node} {\nset outRelations [java::prop $graph_node \"outRelations\"]\nreturn $outRelations\n}\nproc isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getNodeRelationIds {graph_node relationType property} {\nset relationIds [java::new ArrayList]\nset outRelations [getOutRelations $graph_node]\nset hasRelations [isNotEmpty $outRelations]\nif {$hasRelations} {\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"endNodeObjectType\"] == $relationType} {\nset prop_value [java::prop $relation $property]\n$relationIds add [java::prop $relation $property]\n}\n}\n}\nreturn $relationIds\n}\nset lemma_list [java::new ArrayList]\nset object_type \"WordList\"\nset map [java::new HashMap]\n$map put \"nodeType\" \"SET\"\n$map put \"objectType\" $object_type\n$map put \"identifier\" $wordlist_id\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset result_map [java::new HashMap]\njava::try {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset set_metadata [java::new HashMap]\nset word_id_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nset word_ids [getNodeRelationIds $graph_node \"Word\" \"endNodeId\"]\nset not_empty_list [isNotEmpty $word_ids]\nif {$not_empty_list} {\n$word_id_list addAll $word_ids\n}\nset set_metadata [java::prop $graph_node \"metadata\"]\n}\nset set_map [java::new HashMap]\n$set_map put \"identifier\" $wordlist_id\n$set_map put \"metadata\" $set_metadata\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" \"Word\"\n$map put \"identifier\" $word_id_list\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset lemma_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nset word_metadata [java::prop $graph_node \"metadata\"]\n$lemma_list add [$word_metadata get \"lemma\"]\n}\n$set_map put \"words\" $lemma_list\n$result_map put \"wordlist\" $set_map\n}\n} catch {Exception err} {\n$result_map put \"error\" [$err getMessage]\n}\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "wordlist_id", "index" : 1, "routing_param" : true } ], "request_path" : { "type" : "GET", "url" : "/v1/language/dictionary/wordlist/*/*", "path_params" : [ "language_id", "wordlist_id" ] } }
,{ "_id" : { "$oid" : "56a07e1de4b03e0095c22f8b" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getWordLists", "api_id" : "ekstep.wordlist.list", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc getOutRelations {graph_node} {\nset outRelations [java::prop $graph_node \"outRelations\"]\nreturn $outRelations\n}\nproc isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getMemberLemmas {graph_node} {\nset relationIds [java::new ArrayList]\nset outRelations [getOutRelations $graph_node]\nset hasRelations [isNotEmpty $outRelations]\nif {$hasRelations} {\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"endNodeObjectType\"] == \"Word\"} {\nset end_node_metadata [java::prop $relation \"endNodeMetadata\"]\nset hasMetadata [isNotEmpty $end_node_metadata]\nif {$hasMetadata} {\n$relationIds add [$end_node_metadata get \"lemma\"]\n}\n}\n}\n}\nreturn $relationIds\n}\nset lemma_list [java::new ArrayList]\nset object_type \"WordList\"\nset map [java::new HashMap]\n$map put \"nodeType\" \"SET\"\n$map put \"objectType\" $object_type\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset result_map [java::new HashMap]\njava::try {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset word_list_map [java::new HashMap]\njava::for {Node graph_node} $graph_nodes {\nset set_id [java::prop $graph_node \"identifier\"]\nset set_map [java::new HashMap]\n$set_map put \"identifier\" $set_id\n$set_map put \"metadata\" [java::prop $graph_node \"metadata\"]\nset lemma_list [getMemberLemmas $graph_node]\nset not_empty_list [isNotEmpty $lemma_list]\nif {$not_empty_list} {\n$set_map put \"words\" $lemma_list\n}\n$word_list_map put $set_id $set_map\n}\n$result_map put \"wordlists\" $word_list_map\n} catch {Exception err} {\n$result_map put \"error\" [$err getMessage]\n}\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "GET", "url" : "/v1/language/dictionary/wordlist/*", "path_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "56a0a5f1e4b05d193e177825" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_qe_getSynonyms", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package java.util HashSet Set\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc getRelations {graph_node relations_dir} {\nset outRelations [java::prop $graph_node $relations_dir]\nreturn $outRelations\n}\nproc isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getRelationIds {graph_node relationDir relationType compare_prop property} {\nset relationIds [java::new ArrayList]\nset inRelations [getRelations $graph_node $relationDir]\nset hasRelations [isNotEmpty $inRelations]\nif {$hasRelations} {\njava::for {Relation relation} $inRelations {\nif {[java::prop $relation $compare_prop] == $relationType} {\nset prop_value [java::prop $relation $property]\n$relationIds add [java::prop $relation $property]\n}\n}\n}\nreturn $relationIds\n}\nproc getInRelationIds {graph_node relationType compare_prop property} {\nset relationIds [getRelationIds $graph_node \"inRelations\" $relationType $compare_prop $property]\nreturn $relationIds\n}\nproc getOutRelationIds {graph_node relationType compare_prop property} {\nset relationIds [getRelationIds $graph_node \"outRelations\" $relationType $compare_prop $property]\nreturn $relationIds\n}\nproc searchQuery {language_id map} {\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\njava::throw [java::new Exception \"Error response from searchNodes\"]\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nreturn $graph_nodes\n}\n}\nproc getNode {list} {\nset node [java::new Node]\nset not_empty [isNotEmpty $list]\nif {$not_empty} {\njava::for {Node graph_node} $list {\nset node $graph_node\n}\n}\nreturn $node\n}\nset result_map [java::new HashMap]\njava::try {\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" \"Word\"\n$map put \"lemma\" $word\nset graph_nodes [searchQuery $language_id $map]\nset not_empty [isNotEmpty $graph_nodes]\nset synonyms [java::new HashSet]\nif {$not_empty} {\nset graph_node [getNode $graph_nodes]\nset synset_ids [getInRelationIds $graph_node \"Synset\" \"startNodeObjectType\" \"startNodeId\"]\nset not_empty_list [isNotEmpty $synset_ids]\nif {$not_empty_list} {\nset word_id_list [java::new ArrayList]\nset synset_id_list [java::new ArrayList]\n$synset_id_list addAll $synset_ids\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" \"Synset\"\n$map put \"identifier\" $synset_id_list\nset synset_nodes [searchQuery $language_id $map]\njava::for {Node graph_node} $synset_nodes {\nset word_ids [getOutRelationIds $graph_node \"Word\" \"endNodeObjectType\" \"endNodeId\"]\n$word_id_list addAll $word_ids\n}\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" \"Word\"\n$map put \"identifier\" $word_id_list\nset word_nodes [searchQuery $language_id $map]\njava::for {Node graph_node} $word_nodes {\nset metadata [java::prop $graph_node \"metadata\"]\nset lemma [$metadata get \"lemma\"]\n$synonyms add $lemma\n}\n}\n}\n$result_map put \"synonyms\" $synonyms\n} catch {Exception err} {\n$result_map put \"error\" [$err getMessage]\n}\nset response_list [create_response $result_map]\nreturn $response_list", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "word", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/lang_qe_getSynonyms" } }
,{ "_id" : { "$oid" : "56a1a907e4b08fa74515934a" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getLanguages", "api_id" : "ekstep.language.list", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Language\"\nset graph_id \"domain\"\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $object_type\nset sortBy [java::new ArrayList]\n$sortBy add \"name\"\n$map put \"sortBy\" $sortBy\n$map put \"order\" \"ASC\"\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset result_map [java::new HashMap]\njava::try {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset language_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nset lang_id [java::prop $graph_node \"identifier\"]\nset metadata [java::prop $graph_node \"metadata\"]\nset lang_map [java::new HashMap]\n$lang_map put \"identifier\" $lang_id\n$lang_map putAll $metadata\n$language_list add $lang_map\n}\n$result_map put \"languages\" $language_list\n} catch {Exception err} {\n$result_map put \"error\" [$err getMessage]\n}\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "GET", "url" : "/v1/language" } }
,{ "_id" : { "$oid" : "56a1cbdbe4b0745eb9ccd745" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_qe_orthographic_search", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nproc isNotNull {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 0} {\nset exist true\n}\n} catch {Exception err} {\nset exist false\n}\nreturn $exist\n}\nset object_type \"Word\"\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $object_type\nset filter_list [java::new ArrayList]\nset isSyllableCount [isNotNull $syllableCount]\nif {$isSyllableCount} {\nset filter1 [java::new HashMap]\n$filter1 put \"property\" \"syllableCount\"\n$filter1 put \"operator\" \"=\"\n$filter1 put \"value\" $syllableCount\n$filter_list add $filter1\n}\nset isStartsWith [isNotNull $startsWith]\nif {$isStartsWith} {\nset filter2 [java::new HashMap]\n$filter2 put \"property\" \"lemma\"\n$filter2 put \"operator\" \"startsWith\"\n$filter2 put \"value\" $startsWith\n$filter_list add $filter2\n}\nset isMinComplexity [isNotNull $minComplexity]\nif {!$isMinComplexity} {\nset minComplexity [java::new Double 0]\n}\nset filter3 [java::new HashMap]\n$filter3 put \"property\" \"orthographic_complexity\"\n$filter3 put \"operator\" \">=\"\n$filter3 put \"value\" $minComplexity\n$filter_list add $filter3\n$map put \"filters\" $filter_list\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset result_map [java::new HashMap]\njava::try {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset word_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nset wordMetadataRes [lang_qe_getWordMetadata $graph_node]\nset wordMetadata [get_resp_value $wordMetadataRes \"result\"]\n$word_list add $wordMetadata\n}\n$result_map put \"words\" $word_list\n} catch {Exception err} {\n$result_map put \"error\" [$err getMessage]\n}\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "syllableCount", "datatype" : "java.lang.Integer", "index" : 1, "routing_param" : false }, { "name" : "startsWith", "datatype" : "java.lang.String", "index" : 2, "routing_param" : false }, { "name" : "minComplexity", "datatype" : "java.lang.Double", "index" : 3, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/lang_qe_orthographic_search" } }
,{ "_id" : { "$oid" : "56a8a294e4b08ceb101238bd" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getContentList", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.graph.dac.model Filter\njava::import -package com.ilimi.graph.dac.model Relation\nproc relationsExist {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getNodesByObjectType {graphId type} {\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $type\n$map put \"status\" \"Live\"\nset contentTypes [java::new {String[]} 4]\n$contentTypes set 0 \"Story\"\n$contentTypes set 1 \"Worksheet\"\n$contentTypes set 2 \"Game\"\n$contentTypes set 3 \"Collection\"\n$map put \"contentType\" $contentTypes\nset search_criteria [create_search_criteria $map]\nset response [searchNodes $graphId $search_criteria]\nset check_error [check_response_error $response]\nif {$check_error} {\njava::throw [java::new Exception \"Error response from getDataNode\"]\n}\nset nodes [get_resp_value $response \"node_list\"]\nreturn $nodes\n}\nset resultMap [java::new HashMap]\nset contentList [java::new ArrayList]\njava::try {\nset nodes [getNodesByObjectType \"domain\" \"Content\"]\njava::for {Node node} $nodes {\nset content [java::prop $node \"metadata\"]\n$content put \"tags\" [java::prop $node \"tags\"]\n$content put \"identifier\" [java::prop $node \"identifier\"]\n$content remove \"body\"\n$content remove \"editorState\"\nset concepts [java::new ArrayList]\nset relations [java::prop $node \"outRelations\"]\nif {[relationsExist $relations]} {\njava::for {Relation relation} $relations {\nif {[java::prop $relation \"endNodeObjectType\"] == \"Concept\"} {\n$concepts add [java::prop $relation \"endNodeId\"]\n}\n}\n}\n$content put \"concepts\" $concepts\n$contentList add $content\n}\n} catch {Exception err} {\nputs [$err getMessage]\n$resultMap put \"error\" [$err getMessage]\n}\n$resultMap put \"contents\" $contentList\nset responseList [create_response $resultMap]\nreturn $responseList", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "GET", "url" : "/v2/analytics/content/list", "path_params" : [] } }
,{ "_id" : { "$oid" : "56a8bc3ae4b08ceb101238be" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getSetMembers", "body" : "package require java\nset response [getCollectionMembers $graph_id $set_id \"SET\"]\nreturn $response", "type" : "SCRIPT", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "set_id", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v1/graph/*/getSetMembers/*", "path_params" : [ "graph_id", "set_id" ] } }
,{ "_id" : { "$oid" : "56a8fde0e4b08ceb101238c2" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getContentItemsV1", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Filter\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.graph.dac.model Relation\nproc getNode {graphId nodeId} {\nset response [getDataNode $graphId $nodeId]\nset check_error [check_response_error $response]\nif {$check_error} {\njava::throw [java::new Exception \"Error response from getDataNode\"]\n}\nset node [get_resp_value $response \"node\"]\nreturn $node\n}\nproc relationsExist {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getNodeMetadata {node property} {\nset metadata [java::prop $node \"metadata\"]\nset propValue [$metadata get $property]\nreturn $propValue\n}\nproc getNodeRelationIds {node relationType property} {\nset relationIds [java::new ArrayList]\nset outRelations [java::prop $node \"outRelations\"]\nset hasRelations [relationsExist $outRelations]\nif {$hasRelations} {\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"endNodeObjectType\"] == $relationType} {\n$relationIds add [java::prop $relation $property]\n}\n}\n}\nreturn $relationIds\n}\nproc getSetMemberIds {graphId setId} {\nset response [getSetMembers $graphId $setId]\nset check_error [check_response_error $response]\nif {$check_error} {\njava::throw [java::new Exception \"Error response from getSetMembers\"]\n}\nset members [get_resp_value $response \"members\"]\nreturn $members\n}\nproc getItem {graphId itemId domain} {\nset node [getNode $graphId $itemId]\nset item [java::prop $node \"metadata\"]\n$item put \"identifier\" [java::prop $node \"identifier\"]\n$item put \"objectType\" [java::prop $node \"objectType\"]\n$item put \"domain\" $domain\n$item put \"tags\" [java::prop $node \"tags\"]\nset concepts [getNodeRelationIds $node \"Concept\" \"endNodeId\"]\n$item put \"concepts\" $concepts\nreturn $item\n}\nproc getContentItems {graphId contentId} {\nset items [java::new ArrayList]\nset content [getNode $graphId $contentId]\nset questionnaires [getNodeRelationIds $content \"Questionnaire\" \"endNodeId\"]\njava::for {String questionnaireId} $questionnaires {\nset questionnaire [getNode $graphId $questionnaireId]\nset domain [getNodeMetadata $questionnaire \"domain\"]\nset itemSetIds [getNodeRelationIds $questionnaire \"ItemSet\" \"endNodeId\"]\njava::for {String itemSetId} $itemSetIds {\nset itemIds [getSetMemberIds $graphId $itemSetId]\njava::for {String itemId} $itemIds {\n$items add [getItem $graphId $itemId $domain]\n}\n}\n}\nreturn $items\n}\nset resultMap [java::new HashMap]\nset items [java::new ArrayList]\njava::try {\nset items [getContentItems \"numeracy\" $contentId]\n} catch {Exception err} {\njava::try {\nset items [getContentItems \"literacy_v2\" $contentId]\n} catch {Exception err} {\nputs [$err getMessage]\n$resultMap put \"error\" [$err getMessage]\n}\n}\n$resultMap put \"items\" $items\nset responseList [create_response $resultMap]\nreturn $responseList", "type" : "SCRIPT", "parameters" : [ { "name" : "contentId", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v1/analytics/items/*", "path_params" : [ "contentId" ] } }
,{ "_id" : { "$oid" : "56a909f4e4b08ceb101238c3" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getItemConceptsV1", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Filter\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.graph.dac.model Relation\nproc getNode {graphId nodeId} {\nset response [getDataNode $graphId $nodeId]\nset check_error [check_response_error $response]\nif {$check_error} {\njava::throw [java::new Exception \"Error response from getDataNode\"]\n}\nset node [get_resp_value $response \"node\"]\nreturn $node\n}\nproc relationsExist {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getNodeMetadata {node property} {\nset metadata [java::prop $node \"metadata\"]\nset propValue [$metadata get $property]\nreturn $propValue\n}\nproc getNodeRelationIds {node relationType property} {\nset relationIds [java::new ArrayList]\nset outRelations [java::prop $node \"outRelations\"]\nset hasRelations [relationsExist $outRelations]\nif {$hasRelations} {\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"endNodeObjectType\"] == $relationType} {\n$relationIds add [java::prop $relation $property]\n}\n}\n}\nreturn $relationIds\n}\nproc getItemConcepts {graphId itemId contentId} {\nset resultMap [java::new HashMap]\nset item [getNode $graphId $itemId]\nset maxScore [getNodeMetadata $item \"max_score\"]\nset concepts [getNodeRelationIds $item \"Concept\" \"endNodeId\"]\nif {[$concepts size] == 0} {\nset content [getNode $graphId $contentId]\nset concepts [getNodeRelationIds $item \"Concept\" \"endNodeId\"]\n}\n$resultMap put \"concepts\" $concepts\n$resultMap put \"maxScore\" $maxScore\nreturn $resultMap\n}\nset resultMap [java::new HashMap]\njava::try {\nset resultMap [getItemConcepts \"numeracy\" $itemId $contentId]\nset conceptsObj [$resultMap get \"concepts\"]\nset concepts [java::cast {List} $conceptsObj]\nif {[$concepts size] == 0} {\nset resultMap [getItemConcepts \"literacy_v2\" $itemId $contentId]\n}\n} catch {Exception err} {\njava::try {\nset resultMap [getItemConcepts \"literacy_v2\" $itemId $contentId]\n} catch {Exception err} {\nputs [$err getMessage]\n$resultMap put \"error\" [$err getMessage]\n}\n}\nset responseList [create_response $resultMap]\nreturn $responseList", "type" : "SCRIPT", "parameters" : [ { "name" : "contentId", "index" : 0, "routing_param" : false }, { "name" : "itemId", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v1/analytics/item/*/*", "path_params" : [ "contentId", "itemId" ] } }
,{ "_id" : { "$oid" : "56a90db4e4b08ceb101238c4" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getContentItemsV2", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Filter\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.graph.dac.model Relation\nproc getNode {graphId nodeId} {\nset response [getDataNode $graphId $nodeId]\nset check_error [check_response_error $response]\nif {$check_error} {\njava::throw [java::new Exception \"Error response from getDataNode\"]\n}\nset node [get_resp_value $response \"node\"]\nreturn $node\n}\nproc relationsExist {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getSetMemberIds {graphId setId} {\nset response [getSetMembers $graphId $setId]\nset check_error [check_response_error $response]\nif {$check_error} {\njava::throw [java::new Exception \"Error response from getSetMembers\"]\n}\nset members [get_resp_value $response \"members\"]\nreturn $members\n}\nproc getNodeRelationIds {node relationType property} {\nset relationIds [java::new ArrayList]\nset outRelations [java::prop $node \"outRelations\"]\nset hasRelations [relationsExist $outRelations]\nif {$hasRelations} {\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"endNodeObjectType\"] == $relationType} {\n$relationIds add [java::prop $relation $property]\n}\n}\n}\nreturn $relationIds\n}\nproc getItem {graphId itemId} {\nset node [getNode $graphId $itemId]\nset item [java::prop $node \"metadata\"]\n$item put \"tags\" [java::prop $node \"tags\"]\n$item put \"identifier\" $itemId\nset concepts [getNodeRelationIds $node \"Concept\" \"endNodeId\"]\n$item put \"concepts\" $concepts\nreturn $item\n}\nset graphId \"domain\"\nset resultMap [java::new HashMap]\nset items [java::new ArrayList]\njava::try {\nset content [getNode $graphId $contentId]\nset itemSetIds [getNodeRelationIds $content \"ItemSet\" \"endNodeId\"]\njava::for {String itemSetId} $itemSetIds {\nset itemIds [getSetMemberIds $graphId $itemSetId]\nif {[$itemIds size] > 0} {\njava::for {String itemId} $itemIds {\n$items add [getItem $graphId $itemId]\n}\n}\n}\n} catch {Exception err} {\nputs [$err getMessage]\n$resultMap put \"error\" [$err getMessage]\n}\n$resultMap put \"items\" $items\nset responseList [create_response $resultMap]\nreturn $responseList", "type" : "SCRIPT", "parameters" : [ { "name" : "contentId", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/analytics/items/*", "path_params" : [ "contentId" ] } }
,{ "_id" : { "$oid" : "56a90e96e4b08ceb101238c5" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getItemConceptsV2", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Filter\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.graph.dac.model Relation\nproc getNode {graphId nodeId} {\nset response [getDataNode $graphId $nodeId]\nset check_error [check_response_error $response]\nif {$check_error} {\njava::throw [java::new Exception \"Error response from getDataNode\"]\n}\nset node [get_resp_value $response \"node\"]\nreturn $node\n}\nproc relationsExist {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getNodeMetadata {node property} {\nset metadata [java::prop $node \"metadata\"]\nset propValue [$metadata get $property]\nreturn $propValue\n}\nproc getNodeRelationIds {node relationType property} {\nset relationIds [java::new ArrayList]\nset outRelations [java::prop $node \"outRelations\"]\nset hasRelations [relationsExist $outRelations]\nif {$hasRelations} {\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"endNodeObjectType\"] == $relationType} {\n$relationIds add [java::prop $relation $property]\n}\n}\n}\nreturn $relationIds\n}\nproc getItemConcepts {graphId itemId contentId} {\nset resultMap [java::new HashMap]\nset item [getNode $graphId $itemId]\nset maxScore [getNodeMetadata $item \"max_score\"]\nset concepts [getNodeRelationIds $item \"Concept\" \"endNodeId\"]\nif {[$concepts size] == 0} {\nset content [getNode $graphId $contentId]\nset concepts [getNodeRelationIds $item \"Concept\" \"endNodeId\"]\n}\n$resultMap put \"concepts\" $concepts\n$resultMap put \"maxScore\" $maxScore\nreturn $resultMap\n}\nset graphId \"domain\"\nset resultMap [java::new HashMap]\njava::try {\nset resultMap [getItemConcepts $graphId $itemId $contentId]\n} catch {Exception err} {\nputs [$err getMessage]\n$resultMap put \"error\" [$err getMessage]\n}\nset responseList [create_response $resultMap]\nreturn $responseList", "type" : "SCRIPT", "parameters" : [ { "name" : "contentId", "index" : 0, "routing_param" : false }, { "name" : "itemId", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/analytics/item/*/*", "path_params" : [ "contentId", "itemId" ] } }
,{ "_id" : { "$oid" : "56a9ea5be4b00ff921959b69" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "create_error_response", "type" : "COMMAND", "command_class" : "com.ilimi.orchestrator.interpreter.command.CreateErrorResponse" }
,{ "_id" : { "$oid" : "56af0ff1e4b090424241cfd3" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "convert_response_to_csv", "type" : "COMMAND", "command_class" : "com.ilimi.orchestrator.interpreter.command.ConvertResponseToCSV" }
,{ "_id" : { "$oid" : "56af1002e4b090424241cfd4" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_qe_getWordsBySource", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc isNotNull {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 0} {\nset exist true\n}\n} catch {Exception err} {\nset exist false\n}\nreturn $exist\n}\nproc isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc procCreateFilter {property operator value filter_list} {\nset isVar [isNotNull $value]\nif {$isVar} {\nset filter [java::new HashMap]\n$filter put \"property\" $property\n$filter put \"operator\" $operator\n$filter put \"value\" $value\n$filter_list add $filter\n}\n}\nproc procAddStringCriteria {search property filter_list} {\nset criteria [$search get $property]\nset criteriaNotNull [isNotNull $criteria]\nif {$criteriaNotNull} {\njava::try {\nset map [java::cast Map $criteria]\nset startsWith [$map get \"startsWith\"]\nset startsWithNotNull [isNotNull $startsWith]\nif {$startsWithNotNull} {\nprocCreateFilter $property \"startsWith\" $startsWith $filter_list\n}\nset endsWith [$map get \"endsWith\"]\nset endsWithNotNull [isNotNull $endsWith]\nif {$endsWithNotNull} {\nprocCreateFilter $property \"endsWith\" $endsWith $filter_list\n}\nset value [$map get \"value\"]\nset valueNotNull [isNotNull $value]\nif {$valueNotNull} {\nprocCreateFilter $property \"=\" $value $filter_list\n}\n} catch {Exception err} {\n}\n}\n}\nproc procAddNumberCriteria {search property filter_list} {\nset criteria [$search get $property]\nset criteriaNotNull [isNotNull $criteria]\nif {$criteriaNotNull} {\njava::try {\nset map [java::cast Map $criteria]\nset min [$map get \"min\"]\nset minNotNull [isNotNull $min]\nif {$minNotNull} {\nprocCreateFilter $property \">=\" $min $filter_list\n}\nset max [$map get \"max\"]\nset maxNotNull [isNotNull $max]\nif {$maxNotNull} {\nprocCreateFilter $property \"<=\" $max $filter_list\n}\nset value [$map get \"value\"]\nset valueNotNull [isNotNull $value]\nif {$valueNotNull} {\nprocCreateFilter $property \"=\" $value $filter_list\n}\n} catch {Exception err} {\n}\n}\n}\nproc procAddListCriteriaForField {search field property filter_list} {\nset criteria [$search get $field]\nset criteriaNotNull [isNotNull $criteria]\nif {$criteriaNotNull} {\njava::try {\nset list [java::cast List $criteria]\nset size [$list size]\nif {$size > 0} {\nprocCreateFilter $property \"in\" $list $filter_list\n}\n} catch {Exception err} {\n}\n}\n}\nproc procAddListCriteria {search property filter_list} {\nprocAddListCriteriaForField $search $property $property $filter_list\n}\nproc procAddCountCriteria {obj prefix filter_list} {\nset mapNotNull [isNotNull $obj]\nif {$mapNotNull} {\njava::try {\nset map [java::cast Map $obj]\nset key_list [$map keySet]\njava::for {String key} $key_list {\nset val [$map get $key]\nset propValue [java::new String \"count_\"]\nset propValue [java::new String [$propValue concat $prefix]]\nset keyval [java::new String $key]\nset keyval [java::new String [$keyval trim]]\nset keyval [$keyval replaceAll \"\\\\s+\" \"_\"]\nset propValue [$propValue concat $keyval]\nif {$val > 0} {\nprocCreateFilter $propValue \">=\" $val $filter_list\n}\n}\n} catch {Exception err} {\n}\n}\n}\nproc procCheckCountCriteria {search filter_list} {\nset criteria [$search get \"count\"]\nset criteriaNotNull [isNotNull $criteria]\nif {$criteriaNotNull} {\njava::try {\nset map [java::cast Map $criteria]\nset sourceTypes [$map get \"sourceTypes\"]\nset sources [$map get \"sources\"]\nset grades [$map get \"grades\"]\nset pos [$map get \"pos\"]\nprocAddCountCriteria $sourceTypes \"\" $filter_list\nprocAddCountCriteria $sources \"source_\" $filter_list\nprocAddCountCriteria $grades \"grade_\" $filter_list\nprocAddCountCriteria $pos \"pos_\" $filter_list\n} catch {Exception err} {\n}\n}\n}\nproc procGetOutRelations {graph_node} {\nset outRelations [java::prop $graph_node \"outRelations\"]\nreturn $outRelations\n}\nproc procGetInRelations {graph_node} {\nset inRelations [java::prop $graph_node \"inRelations\"]\nreturn $inRelations\n}\nproc procGetSynonyms {inRelations} {\nset wordMap [java::new HashMap]\nset synsetIdList [java::new ArrayList]\nset synsetList [java::new ArrayList]\njava::for {Relation relation} $inRelations {\nif {[java::prop $relation \"startNodeObjectType\"] == \"Synset\" && [java::prop $relation \"relationType\"] == \"synonym\"} {\nset synsetId [java::prop $relation \"startNodeId\"]\n$synsetIdList add $synsetId\nset synsetMetadata [java::prop $relation \"startNodeMetadata\"]\nset checkMetadata [isNotNull $synsetMetadata]\nif {$checkMetadata} {\nset syn_gloss [$synsetMetadata get \"gloss\"]\nset checkGloss [isNotNull $syn_gloss]\nif {$checkGloss} {\n$synsetList add $syn_gloss\n}\n}\n}\n}\n$wordMap put \"Synonyms\" $synsetList\n$wordMap put \"Synset Ids\" $synsetIdList\nreturn $wordMap\n}\nproc procGetAntonyms {outRelations} {\nset antonyms [java::new ArrayList]\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"endNodeObjectType\"] == \"Word\" && [java::prop $relation \"relationType\"] == \"hasAntonym\"} {\nset nodeMetadata [java::prop $relation \"endNodeMetadata\"]\nset checkMetadata [isNotNull $nodeMetadata]\nif {$checkMetadata} {\nset antonym_lemma [$nodeMetadata get \"lemma\"]\nset checkLemma [isNotNull $antonym_lemma]\nif {$checkLemma} {\n$antonyms add $antonym_lemma\n}\n}\n}\n}\nreturn $antonyms\n}\nproc procGetWordMetadata {node} {\nset wordMap [java::new HashMap]\nset isNodeNotNull [isNotNull $node]\nif {$isNodeNotNull} {\nset metadata [java::prop $node \"metadata\"]\nset checkMetadata [isNotNull $metadata]\nif {$checkMetadata} {\n$wordMap put \"Lemma\" [$metadata get \"lemma\"]\n$wordMap put \"Syllable Count\" [$metadata get \"syllableCount\"]\n$wordMap put \"Phonological Complexity\" [$metadata get \"phonologic_complexity\"]\n$wordMap put \"Orthographic Complexity\" [$metadata get \"orthographic_complexity\"]\n$wordMap put \"Sources\" [$metadata get \"sources\"]\n$wordMap put \"Grades\" [$metadata get \"grade\"]\n$wordMap put \"POS Categories\" [$metadata get \"pos_categories\"]\n$wordMap put \"POS Tags\" [$metadata get \"pos\"]\n$wordMap put \"Source Types\" [$metadata get \"sourceTypes\"]\n$wordMap put \"Frequency\" [$metadata get \"occurrenceCount\"]\n$wordMap put \"Pronunciations\" [$metadata get \"pronunciations\"]\n$wordMap put \"Pictures\" [$metadata get \"pictures\"]\n$wordMap put \"Sample Usages\" [$metadata get \"sampleUsages\"]\n$wordMap put \"Plurality\" [$metadata get \"plurality\"]\n$wordMap put \"Cases\" [$metadata get \"cases\"]\n$wordMap put \"Genders\" [$metadata get \"genders\"]\n$wordMap put \"Variants\" [$metadata get \"variants\"]\n$wordMap put \"Inflections\" [$metadata get \"inflections\"]\n$wordMap put \"Grade 1 Count\" [$metadata get \"count_grade_1\"]\n$wordMap put \"Grade 2 Count\" [$metadata get \"count_grade_2\"]\n$wordMap put \"Grade 3 Count\" [$metadata get \"count_grade_3\"]\n$wordMap put \"Default Meaning\" \"\"\n}\n$wordMap put \"identifier\" [java::prop $node \"identifier\"]\nset inRelations [procGetInRelations $node]\nset hasInRelations [isNotEmpty $inRelations]\nif {$hasInRelations} {\nset synsetMap [procGetSynonyms $inRelations]\n$wordMap putAll $synsetMap\n}\nset outRelations [procGetOutRelations $node]\nset hasOutRelations [isNotEmpty $outRelations]\nif {$hasOutRelations} {\nset antonyms [procGetAntonyms $outRelations]\n$wordMap put \"antonyms\" $antonyms\n} else {\n$wordMap put \"antonyms\" [java::new ArrayList]\n}\n}\nreturn $wordMap\n}\nset object_type \"Word\"\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $object_type\nset searchNotNull [isNotNull $filters]\nif {$searchNotNull} {\nset filter_list [java::new ArrayList]\nprocAddStringCriteria $filters \"lemma\" $filter_list\nprocAddNumberCriteria $filters \"syllableCount\" $filter_list\nprocAddNumberCriteria $filters \"orthographic_complexity\" $filter_list\nprocAddNumberCriteria $filters \"phonologic_complexity\" $filter_list\nprocAddListCriteria $filters \"identifier\" $filter_list\nprocAddListCriteria $filters \"sources\" $filter_list\nprocAddListCriteria $filters \"sourceTypes\" $filter_list\nprocAddListCriteria $filters \"pos\" $filter_list\nprocAddListCriteria $filters \"grade\" $filter_list\nprocAddListCriteriaForField $filters \"words\" \"lemma\" $filter_list\nprocCheckCountCriteria $filters $filter_list\n$map put \"filters\" $filter_list\n}\nset limitNotNull [isNotNull $limit]\nif {$limitNotNull} {\n$map put \"resultSize\" $limit\n}\nset sortNotNull [isNotNull $sort]\nif {$sortNotNull} {\n$map put \"sortBy\" $sort\n}\nset orderNotNull [isNotNull $order]\nif {$orderNotNull} {\n$map put \"order\" $order\n}\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset result_map [java::new HashMap]\njava::try {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset word_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nset wordMetadata [procGetWordMetadata $graph_node]\n$word_list add $wordMetadata\n}\n$result_map put \"words\" $word_list\n} catch {Exception err} {\n$result_map put \"error\" [$err getMessage]\n}\nset response_list [create_response $result_map]\nset response_csv [convert_response_to_csv $response_list \"words\"]\nreturn $response_csv\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "filters", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false }, { "name" : "sort", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false }, { "name" : "order", "datatype" : "java.lang.String", "index" : 3, "routing_param" : false }, { "name" : "limit", "datatype" : "java.lang.Integer", "index" : 4, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/lang_qe_getWordsBySource" } }
,{ "_id" : { "$oid" : "56af104ae4b090424241cfd5" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_qe_getWordMetadata", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nproc isNotNull {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 0} {\nset exist true\n}\n} catch {Exception err} {\nset exist false\n}\nreturn $exist\n}\nset wordMap [java::new HashMap]\nset isNodeNotNull [isNotNull $node]\nif {$isNodeNotNull} {\nset metadata [java::prop $node \"metadata\"]\nset checkMetadata [isNotNull $metadata]\nif {$checkMetadata} {\n$wordMap putAll $metadata\n}\n}\nreturn $wordMap", "type" : "SCRIPT", "parameters" : [ { "name" : "node", "datatype" : "com.ilimi.graph.dac.model.Node", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/lang_qe_getWordMetadata" } }
,{ "_id" : { "$oid" : "56af3825e4b090424241cfd6" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_qe_download_wordlist", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc proc_isEmpty {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 1} {\nset exist true\n} else {\nset strValue [$value toString]\nset newStrValue [java::new String $strValue]\nset strLength [$newStrValue length]\nif {$strLength == 0} {\nset exist true\n}\n}\n} catch {Exception err} {\nset exist true\n}\nreturn $exist\n}\nproc proc_isListNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc procGetPrimaryMeaningId {wordMetadata} {\nset primaryMeaningId [$wordMetadata get \"primaryMeaningId\"]\nset isEmpty [proc_isEmpty $primaryMeaningId]\nif {!$isEmpty} {\nreturn [java::new String [$primaryMeaningId toString]]\n} else {\nreturn [java::new String]\n}\n}\nproc procGetWordData {wordId wordMetadata} {\nset map [java::new HashMap]\n$map put \"identifier\" $wordId\n$map put \"lemma\" [$wordMetadata get \"lemma\"]\n$map put \"status\" [$wordMetadata get \"status\"]\n$map put \"grade\" [$wordMetadata get \"grade\"]\n$map put \"pronunciations\" [$wordMetadata get \"pronunciations\"]\n$map put \"hasConnotative\" [$wordMetadata get \"hasConnotative\"]\n$map put \"isPhrase\" [$wordMetadata get \"isPhrase\"]\n$map put \"isLoanWord\" [$wordMetadata get \"isLoanWord\"]\n$map put \"orthographic_complexity\" [$wordMetadata get \"orthographic_complexity\"]\n$map put \"phonologic_complexity\" [$wordMetadata get \"phonologic_complexity\"]\n$map put \"exampleSentences\" [$wordMetadata get \"exampleSentences\"]\nreturn $map\n}\nproc procGetSynsetNode {language_id wordMap synsetId} {\nset getDataNodeResp [getDataNode $language_id $synsetId]\nset get_node_response_error [check_response_error $getDataNodeResp]\nif {!$get_node_response_error} {\nset graph_node [get_resp_value $getDataNodeResp \"node\"]\n$wordMap put \"tags\" [java::prop $graph_node \"tags\"]\nset outRelations [java::prop $graph_node \"outRelations\"]\nset hasOutRelations [proc_isListNotEmpty $outRelations]\nif {$hasOutRelations} {\nset relMap [java::new HashMap]\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"endNodeObjectType\"] == \"Word\"} {\nset relType [java::prop $relation \"relationType\"]\nset endMetadata [java::prop $relation \"endNodeMetadata\"]\nset lemmas [$relMap get $relType]\nset isListNull [java::isnull $lemmas]\nif {$isListNull == 1} {\nset lemmas [java::new ArrayList]\n$lemmas add [$endMetadata get \"lemma\"]\n$relMap put $relType $lemmas\n} else {\nset isListInstance [java::instanceof $lemmas List]\nif {$isListInstance == 1} {\nset lemmaList [java::cast List $lemmas]\n$lemmaList add [$endMetadata get \"lemma\"]\n}\n}\n}\n}\n$wordMap putAll $relMap\n}\n}\n}\nproc procAddSynsetData {language_id synsetId synsetMetadata primaryMeaningId wordMap word_list} {\n$wordMap put \"synsetId\" $synsetId\n$wordMap put \"gloss\" [$synsetMetadata get \"gloss\"]\n$wordMap put \"pos\" [$synsetMetadata get \"pos\"]\n$wordMap put \"pictures\" [$synsetMetadata get \"pictures\"]\n$wordMap put \"category\" [$synsetMetadata get \"category\"]\n$wordMap put \"gender\" [$synsetMetadata get \"gender\"]\nif {[$primaryMeaningId equals $synsetId]} {\n$wordMap put \"primaryMeaning\" true\n} else {\n$wordMap put \"exampleSentences\" [$synsetMetadata get \"exampleSentences\"]\n}\nprocGetSynsetNode $language_id $wordMap $synsetId\n$word_list add $wordMap\n}\nproc procGetWordListMembers {language_id getDataNodesResp} {\nset nodes [get_resp_value $getDataNodesResp \"node_list\"]\nset word_list [java::new ArrayList]\njava::for {Node node} $nodes {\nset wordId [java::prop $node \"identifier\"]\nset wordMetadata [java::prop $node \"metadata\"]\nset primaryMeaningId [procGetPrimaryMeaningId $wordMetadata]\nset inRelations [java::prop $node \"inRelations\"]\nset hasInRelations [proc_isListNotEmpty $inRelations]\nif {$hasInRelations} {\njava::for {Relation relation} $inRelations {\nif {[java::prop $relation \"startNodeObjectType\"] == \"Synset\" && [java::prop $relation \"relationType\"] == \"synonym\"} {\nset wordMap [procGetWordData $wordId $wordMetadata]\nset synsetId [java::prop $relation \"startNodeId\"]\nset synsetMetadata [java::prop $relation \"startNodeMetadata\"]\nprocAddSynsetData $language_id $synsetId $synsetMetadata $primaryMeaningId $wordMap $word_list\n}\n}\n}\n}\nreturn $word_list\n}\nset object_type \"WordList\"\nset membersResp [getSetMembers $language_id $wordlist]\nset check_error [check_response_error $membersResp]\nset result_map [java::new HashMap]\nif {$check_error} {\nreturn $membersResp;\n} else {\nset member_ids [get_resp_value $membersResp \"members\"]\nset members_size [$member_ids size]\nset getDataNodesResp [getDataNodes $language_id $member_ids]\nset check_error [check_response_error $getDataNodesResp]\nif {$check_error} {\nreturn $getDataNodesResp;\n} else {\nset word_list [procGetWordListMembers $language_id $getDataNodesResp]\n$result_map put \"words\" $word_list\nset response_list [create_response $result_map]\nset response_csv [convert_response_to_csv $response_list \"words\"]\nreturn $response_csv\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "wordlist", "datatype" : "java.lang.String", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/lang_qe_download_wordlist" } }
,{ "_id" : { "$oid" : "56b0f809e4b02fb6b1248d5f" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_updateAssetMediaType", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset graph_id \"domain\"\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" \"Content\"\nset filter_list [java::new ArrayList]\nset filter1 [java::new HashMap]\n$filter1 put \"property\" \"contentType\"\n$filter1 put \"operator\" \"=\"\n$filter1 put \"value\" \"Asset\"\n$filter_list add $filter1\nset filter2 [java::new HashMap]\n$filter2 put \"property\" \"mimeType\"\n$filter2 put \"operator\" \"=\"\n$filter2 put \"value\" \"application/octet-stream\"\n$filter_list add $filter2\nset filter3 [java::new HashMap]\n$filter3 put \"property\" \"downloadUrl\"\n$filter3 put \"operator\" \"endsWith\"\n$filter3 put \"value\" $file_suffix\n$filter_list add $filter3\n$map put \"filters\" $filter_list\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset size [$graph_nodes size]\njava::for {Node graph_node} $graph_nodes {\nset object_id [java::prop $graph_node \"identifier\"]\nset metadata [java::prop $graph_node \"metadata\"]\nset isMetadataNull [java::isnull $metadata]\nif {$isMetadataNull == 1} {\nset metadata [java::new HashMap]\n}\n$metadata put \"mediaType\" $mediaType\njava::prop $graph_node \"metadata\" $metadata\nset update_response [updateDataNode $graph_id $object_id $graph_node]\nset check_error [check_response_error $update_response]\nif {$check_error} {\n}\n}\nset result_map [java::new HashMap]\n$result_map put \"status\" \"ok\"\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "file_suffix", "index" : 0, "routing_param" : true }, { "name" : "mediaType", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_updateAssetMediaType" } }
,{ "_id" : { "$oid" : "56b31c14e4b0fbaa87279e8b" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_getWordInformation", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "words", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false } ], "actor_path" : { "manager" : "INDEXES_ACTOR", "operation" : "rootWordInfo", "router" : "LANGUAGE_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "56b31c1fe4b0fbaa87279e8c" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_getWordsInformation", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "words", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false } ], "actor_path" : { "manager" : "INDEXES_ACTOR", "operation" : "wordInfo", "router" : "LANGUAGE_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "56b31c42e4b0fbaa87279e8d" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_qe_getWordInformation", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\nproc isNotNull {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 0} {\nset exist true\n}\n} catch {Exception err} {\nset exist false\n}\nreturn $exist\n}\nset resp_word_info [lang_getWordsInformation $language_id $words]\nset check_error [check_response_error $resp_word_info]\nif {$check_error} {\nreturn $resp_word_info\n} else {\nset word_info [get_resp_value $resp_word_info \"word_info\"]\nset word_info_list [java::new ArrayList]\nset word_info_not_null [isNotNull $word_info]\nif {$word_info_not_null} {\nset info_list [$word_info \"values\"]\n$word_info_list addAll $info_list\n}\nset result_map [java::new HashMap]\n$result_map put \"words\" $word_info_list\nset response_list [create_response $result_map]\nset response_csv [convert_response_to_csv $response_list \"words\"]\nreturn $response_csv\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "words", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/lang_qe_getWordInformation" } }
,{ "_id" : { "$oid" : "56b336bee4b0fbaa87279e8e" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getDomainGraph", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Filter\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.graph.dac.model Relation\nproc getNodesByObjectType {graphId type subject} {\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $type\n$map put \"subject\" $subject\n$map put \"status\" \"Live\"\nset search_criteria [create_search_criteria $map]\nset response [searchNodes $graphId $search_criteria]\nset check_error [check_response_error $response]\nif {$check_error} {\njava::throw [java::new Exception \"Error response from getDataNode\"]\n}\nset nodes [get_resp_value $response \"node_list\"]\nreturn $nodes\n}\nproc relationsExist {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getNodes {graphId type objectTypes domainId} {\nset nodeList [java::new ArrayList]\nset relationList [java::new ArrayList]\nset nodes [getNodesByObjectType $graphId $type $domainId]\njava::for {Node node} $nodes {\njava::prop $node \"tags\" [java::new ArrayList]\n$nodeList add $node\nset relations [java::prop $node \"outRelations\"]\nif {[relationsExist $relations]} {\njava::for {Relation relation} $relations {\nset nodeType [java::prop $relation \"endNodeObjectType\"]\nset nodeMetadata [java::prop $relation \"endNodeMetadata\"]\nset nodeStatus [java::cast {String} [$nodeMetadata get \"status\"]]\nif {[$objectTypes contains $nodeType]} {\nif {[$nodeStatus equals \"Live\"]} {\n$relationList add $relation\n}\n}\n}\n}\njava::prop $node \"outRelations\"\n}\nset result [java::new HashMap]\n$result put \"nodes\" $nodeList\n$result put \"relations\" $relationList\nreturn $result\n}\nset resultMap [java::new HashMap]\nset nodeList [java::new ArrayList]\nset relationList [java::new ArrayList]\nset objectTypes [java::new ArrayList]\njava::try {\n$objectTypes add \"Domain\"\n$objectTypes add \"Dimension\"\n$objectTypes add \"Concept\"\njava::for {String objectType} $objectTypes {\nset result [getNodes \"domain\" $objectType $objectTypes $domainId]\nset nodes [$result get \"nodes\"]\nset relations [$result get \"relations\"]\n$nodeList addAll [java::cast {List} $nodes]\n$relationList addAll [java::cast {List} $relations]\n}\n} catch {Exception err} {\nputs [$err getMessage]\n$resultMap put \"error\" [$err getMessage]\n}\n$resultMap put \"nodes\" $nodeList\n$resultMap put \"relations\" $relationList\nset responseList [create_response $resultMap]\nreturn $responseList", "type" : "SCRIPT", "parameters" : [ { "name" : "domainId", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/domain/graph/*", "path_params" : [ "domainId" ] } }
,{ "_id" : { "$oid" : "56c1fa25e4b0c68cbaa3db60" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_deleteInvalidContent", "body" : "package require java\njava::import -package java.util ArrayList List\nset graph_id \"domain\"\njava::for {String content_id} $content_ids {\nset delete_response [deleteDataNode $graph_id $content_id]\nset check_error [check_response_error $delete_response]\nif {$check_error} {\nputs \"Error deleting $content_id\"\n} else {\nputs \"Delete successful $content_id\"\n}\n}\nreturn \"OK\"", "type" : "SCRIPT", "parameters" : [ { "name" : "content_ids", "datatype" : "java.util.ArrayList", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_deleteInvalidContent" } }
,{ "_id" : { "$oid" : "56c34a03e4b0111a1b705dfa" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_qe_downloadSynsetAsCSV", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc isNotNull {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 0} {\nset exist true\n}\n} catch {Exception err} {\nset exist false\n}\nreturn $exist\n}\nproc isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc procGetOutRelations {graph_node} {\nset outRelations [java::prop $graph_node \"outRelations\"]\nreturn $outRelations\n}\nproc procUpdateRelatedSynsetList {relation wordMap type} {\nset relatedList [$wordMap get $type]\nset relatedListNotNull [isNotNull $relatedList]\nif {!$relatedListNotNull} {\nset relatedList [java::new ArrayList]\n}\nset list [java::cast List $relatedList]\n$list add [java::prop $relation \"endNodeId\"]\n$wordMap put $type $list\nreturn $wordMap\n}\nproc procGetRelatedSynSetId {relation wordMap} {\nif {[java::prop $relation \"endNodeObjectType\"] == \"Synset\"} {\nif {[java::prop $relation \"relationType\"] == \"hasHypernym\"} {\nset wordMap [procUpdateRelatedSynsetList $relation $wordMap \"Hypernyms\"]\n} elseif {[java::prop $relation \"relationType\"] == \"hasHyponym\"} {\nset wordMap [procUpdateRelatedSynsetList $relation $wordMap \"Hyponyms\"]\n} elseif {[java::prop $relation \"relationType\"] == \"hasHolonym\"} {\nset wordMap [procUpdateRelatedSynsetList $relation $wordMap \"Holonyms\"]\n} elseif {[java::prop $relation \"relationType\"] == \"hasMeronym\"} {\nset wordMap [procUpdateRelatedSynsetList $relation $wordMap \"Meronyms\"]\n} elseif {[java::prop $relation \"relationType\"] == \"hasAntonym\"} {\nset wordMap [procUpdateRelatedSynsetList $relation $wordMap \"Antonyms\"]\n}\n} elseif {[java::prop $relation \"endNodeObjectType\"] == \"Word\"} {\nif {[java::prop $relation \"relationType\"] == \"synonym\"} {\nset nodeMetadata [java::prop $relation \"endNodeMetadata\"]\nset checkMetadata [isNotNull $nodeMetadata]\nif {$checkMetadata} {\nset member_lemma [$nodeMetadata get \"lemma\"]\nset checkLemma [isNotNull $member_lemma]\nif {$checkLemma} {\nset relatedList [$wordMap get \"Words\"]\nset relatedListNotNull [isNotNull $relatedList]\nif {!$relatedListNotNull} {\nset relatedList [java::new ArrayList]\n}\nset list [java::cast List $relatedList]\n$list add $member_lemma\n$wordMap put \"Words\" $list\n}\n}\n}\n}\nreturn $wordMap\n}\nproc procGetSynsetMetadata {node} {\nset wordMap [java::new HashMap]\nset isNodeNotNull [isNotNull $node]\nif {$isNodeNotNull} {\nset metadata [java::prop $node \"metadata\"]\nset checkMetadata [isNotNull $metadata]\nif {$checkMetadata} {\n$metadata remove \"lastUpdatedOn\"\n$metadata remove \"createdOn\"\n$wordMap putAll $metadata\n}\n$wordMap put \"identifier\" [java::prop $node \"identifier\"]\nset outRelations [procGetOutRelations $node]\nset hasOutRelations [isNotEmpty $outRelations]\nif {$hasOutRelations} {\njava::for {Relation relation} $outRelations {\nset wordMap [procGetRelatedSynSetId $relation $wordMap]\n}\n}\n}\nreturn $wordMap\n}\nset result_map [java::new HashMap]\nset word_list [java::new ArrayList]\njava::for {String synsetId} $synset_ids {\njava::try {\nset get_node_response [getDataNode $language_id $synsetId]\nset check_error [check_response_error $get_node_response]\nif {!$check_error} {\nset graph_node [get_resp_value $get_node_response \"node\"]\nset wordMetadata [procGetSynsetMetadata $graph_node]\n$word_list add $wordMetadata\n}\n} catch {Exception err} {\nputs [$err getMessage]\n}\n}\n$result_map put \"synsets\" $word_list\nset response_list [create_response $result_map]\nset response_csv [convert_response_to_csv $response_list \"synsets\"]\nreturn $response_csv", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "synset_ids", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/lang_qe_downloadSynsetAsCSV" } }
,{ "_id" : { "$oid" : "56cbff6ce4b0111a1b705dff" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_getWordId", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "words", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false } ], "actor_path" : { "manager" : "INDEXES_ACTOR", "operation" : "getWordId", "router" : "LANGUAGE_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "56cc0530e4b0111a1b705e00" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_qe_getHypernyms", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc isNotNull {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 0} {\nset exist true\n}\n} catch {Exception err} {\nset exist false\n}\nreturn $exist\n}\nproc isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc procGetOutRelations {graph_node} {\nset outRelations [java::prop $graph_node \"outRelations\"]\nreturn $outRelations\n}\nproc procGetInRelations {graph_node} {\nset inRelations [java::prop $graph_node \"inRelations\"]\nreturn $inRelations\n}\nproc procGetSynonyms {inRelations} {\nset wordMap [java::new HashMap]\njava::for {Relation relation} $inRelations {\nif {[java::prop $relation \"startNodeObjectType\"] == \"Synset\" && [java::prop $relation \"relationType\"] == \"synonym\"} {\nset synsetId [java::prop $relation \"startNodeId\"]\nset synsetMap [java::new HashMap]\nset synsetMetadata [java::prop $relation \"startNodeMetadata\"]\nset checkMetadata [isNotNull $synsetMetadata]\nif {$checkMetadata} {\nset syn_gloss [$synsetMetadata get \"gloss\"]\nset checkGloss [isNotNull $syn_gloss]\nif {$checkGloss} {\n$synsetMap put \"gloss\" $syn_gloss\n}\nset syn_pos [$synsetMetadata get \"pos\"]\nset checkPos [isNotNull $syn_pos]\nif {$checkPos} {\n$synsetMap put \"pos\" $syn_pos\n}\n}\n$wordMap put $synsetId $synsetMap\n}\n}\nreturn $wordMap\n}\nproc procGetHypernyms {outRelations relationName} {\nset wordMap [java::new HashMap]\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"endNodeObjectType\"] == \"Synset\" && [java::prop $relation \"relationType\"] == $relationName} {\nset synsetId [java::prop $relation \"endNodeId\"]\nset synsetMap [java::new HashMap]\nset synsetMetadata [java::prop $relation \"endNodeMetadata\"]\nset checkMetadata [isNotNull $synsetMetadata]\nif {$checkMetadata} {\nset syn_gloss [$synsetMetadata get \"gloss\"]\nset checkGloss [isNotNull $syn_gloss]\nif {$checkGloss} {\n$synsetMap put \"gloss\" $syn_gloss\n}\nset syn_pos [$synsetMetadata get \"pos\"]\nset checkPos [isNotNull $syn_pos]\nif {$checkPos} {\n$synsetMap put \"pos\" $syn_pos\n}\n}\n$wordMap put $synsetId $synsetMap\n}\n}\nreturn $wordMap\n}\nproc procGetMembers {outRelations} {\nset memberList [java::new ArrayList]\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"endNodeObjectType\"] == \"Word\" && [java::prop $relation \"relationType\"] == \"synonym\"} {\nset wordId [java::prop $relation \"endNodeId\"]\nset wordMap [java::new HashMap]\nset metadata [java::prop $relation \"endNodeMetadata\"]\nset checkMetadata [isNotNull $metadata]\nif {$checkMetadata} {\n$wordMap put \"Lemma\" [$metadata get \"lemma\"]\n$wordMap put \"Syllable Count\" [$metadata get \"syllableCount\"]\n$wordMap put \"Phonological Complexity\" [$metadata get \"phonologic_complexity\"]\n$wordMap put \"Orthographic Complexity\" [$metadata get \"orthographic_complexity\"]\n$wordMap put \"Sources\" [$metadata get \"sources\"]\n$wordMap put \"Grades\" [$metadata get \"grade\"]\n$wordMap put \"POS Categories\" [$metadata get \"pos_categories\"]\n$wordMap put \"POS Tags\" [$metadata get \"pos\"]\n$wordMap put \"Source Types\" [$metadata get \"sourceTypes\"]\n$wordMap put \"Frequency\" [$metadata get \"occurrenceCount\"]\n$wordMap put \"Grade 1 Count\" [$metadata get \"count_grade_1\"]\n$wordMap put \"Grade 2 Count\" [$metadata get \"count_grade_2\"]\n$wordMap put \"Grade 3 Count\" [$metadata get \"count_grade_3\"]\n}\n$wordMap put \"identifier\" $wordId\n$memberList add $wordMap\n}\n}\nreturn $memberList\n}\nset words [java::new ArrayList]\n$words add $word\nset resp_word_info [lang_getWordId $language_id $words]\nset check_error [check_response_error $resp_word_info]\nif {$check_error} {\nreturn $resp_word_info\n} else {\nset word_ids [get_resp_value $resp_word_info \"word_ids\"]\nset word_ids_not_empty [isNotEmpty $word_ids]\nif {$word_ids_not_empty} {\nset word_id_map [$word_ids get $word]\nset map [java::cast Map $word_id_map]\nset word_id [$map get \"wordId\"]\nset get_node_response [getDataNode $language_id $word_id]\nset graph_node [get_resp_value $get_node_response \"node\"]\nset inRelations [procGetInRelations $graph_node]\nset hasInRelations [isNotEmpty $inRelations]\nset hypernym_list [java::new ArrayList]\nif {$hasInRelations} {\nset synsetMap [procGetSynonyms $inRelations]\nset synsetIds [$synsetMap keySet]\njava::for {String synsetId} $synsetIds {\nset synsetObj [$synsetMap get $synsetId]\nset synsetObjMap [java::cast Map $synsetObj]\nset get_synset_response [getDataNode $language_id $synsetId]\nset synset_node [get_resp_value $get_synset_response \"node\"]\nset outRelations [procGetOutRelations $synset_node]\nset hasOutRelations [isNotEmpty $outRelations]\nif {$hasOutRelations} {\nset hypernymMap [procGetHypernyms $outRelations \"hasHypernym\"]\nset hypernymIds [$hypernymMap keySet]\njava::for {String hypernymId} $hypernymIds {\nset hypernymObj [$hypernymMap get $hypernymId]\nset hypernymObjMap [java::cast Map $hypernymObj]\nset get_hypernym_response [getDataNode $language_id $hypernymId]\nset hypernym_node [get_resp_value $get_hypernym_response \"node\"]\nset outRelations [procGetOutRelations $hypernym_node]\nset hasOutRelations [isNotEmpty $outRelations]\nif {$hasOutRelations} {\nset memberList [procGetMembers $outRelations]\njava::for {Map memberMap} $memberList {\nset hypernym_word_map [java::new HashMap]\n$hypernym_word_map putAll $memberMap\n$hypernym_word_map put \"synsetId\" $synsetId\n$hypernym_word_map put \"synsetGloss\" [$synsetObjMap get \"gloss\"]\n$hypernym_word_map put \"synsetPos\" [$synsetObjMap get \"pos\"]\n$hypernym_word_map put \"hypernymId\" $hypernymId\n$hypernym_word_map put \"hypernymGloss\" [$hypernymObjMap get \"gloss\"]\n$hypernym_word_map put \"hypernymPos\" [$hypernymObjMap get \"pos\"]\n$hypernym_list add $hypernym_word_map\n}\n}\n}\n}\n}\n}\nset result_map [java::new HashMap]\n$result_map put \"hypernyms\" $hypernym_list\nset response_list [create_response $result_map]\nset response_csv [convert_response_to_csv $response_list \"hypernyms\"]\nreturn $response_csv\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_WORD_NOT_FOUND\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "word", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/lang_qe_getHypernyms" } }
,{ "_id" : { "$oid" : "56cc1028e4b0111a1b705e01" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_qe_getLinguisticRelations", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc isNotNull {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 0} {\nset exist true\n}\n} catch {Exception err} {\nset exist false\n}\nreturn $exist\n}\nproc isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc procGetOutRelations {graph_node} {\nset outRelations [java::prop $graph_node \"outRelations\"]\nreturn $outRelations\n}\nproc procGetInRelations {graph_node} {\nset inRelations [java::prop $graph_node \"inRelations\"]\nreturn $inRelations\n}\nproc procGetInRelationsByName {inRelations relationName} {\nset wordMap [java::new HashMap]\njava::for {Relation relation} $inRelations {\nif {[java::prop $relation \"startNodeObjectType\"] == \"Synset\" && [java::prop $relation \"relationType\"] == $relationName} {\nset synsetId [java::prop $relation \"startNodeId\"]\nset synsetMap [java::new HashMap]\nset synsetMetadata [java::prop $relation \"startNodeMetadata\"]\nset checkMetadata [isNotNull $synsetMetadata]\nif {$checkMetadata} {\nset syn_gloss [$synsetMetadata get \"gloss\"]\nset checkGloss [isNotNull $syn_gloss]\nif {$checkGloss} {\n$synsetMap put \"gloss\" $syn_gloss\n}\nset syn_pos [$synsetMetadata get \"pos\"]\nset checkPos [isNotNull $syn_pos]\nif {$checkPos} {\n$synsetMap put \"pos\" $syn_pos\n}\n}\n$wordMap put $synsetId $synsetMap\n}\n}\nreturn $wordMap\n}\nproc procGetOutRelationsByName {outRelations relationName} {\nset wordMap [java::new HashMap]\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"endNodeObjectType\"] == \"Synset\" && [java::prop $relation \"relationType\"] == $relationName} {\nset synsetId [java::prop $relation \"endNodeId\"]\nset synsetMap [java::new HashMap]\nset synsetMetadata [java::prop $relation \"endNodeMetadata\"]\nset checkMetadata [isNotNull $synsetMetadata]\nif {$checkMetadata} {\nset syn_gloss [$synsetMetadata get \"gloss\"]\nset checkGloss [isNotNull $syn_gloss]\nif {$checkGloss} {\n$synsetMap put \"gloss\" $syn_gloss\n}\nset syn_pos [$synsetMetadata get \"pos\"]\nset checkPos [isNotNull $syn_pos]\nif {$checkPos} {\n$synsetMap put \"pos\" $syn_pos\n}\n}\n$wordMap put $synsetId $synsetMap\n}\n}\nreturn $wordMap\n}\nproc procGetMembers {outRelations} {\nset memberList [java::new ArrayList]\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"endNodeObjectType\"] == \"Word\" && [java::prop $relation \"relationType\"] == \"synonym\"} {\nset wordId [java::prop $relation \"endNodeId\"]\nset wordMap [java::new HashMap]\nset metadata [java::prop $relation \"endNodeMetadata\"]\nset checkMetadata [isNotNull $metadata]\nif {$checkMetadata} {\n$wordMap put \"Lemma\" [$metadata get \"lemma\"]\n$wordMap put \"Syllable Count\" [$metadata get \"syllableCount\"]\n$wordMap put \"Phonological Complexity\" [$metadata get \"phonologic_complexity\"]\n$wordMap put \"Orthographic Complexity\" [$metadata get \"orthographic_complexity\"]\n$wordMap put \"Sources\" [$metadata get \"sources\"]\n$wordMap put \"Grades\" [$metadata get \"grade\"]\n$wordMap put \"POS Categories\" [$metadata get \"pos_categories\"]\n$wordMap put \"POS Tags\" [$metadata get \"pos\"]\n$wordMap put \"Source Types\" [$metadata get \"sourceTypes\"]\n$wordMap put \"Frequency\" [$metadata get \"occurrenceCount\"]\n$wordMap put \"Grade 1 Count\" [$metadata get \"count_grade_1\"]\n$wordMap put \"Grade 2 Count\" [$metadata get \"count_grade_2\"]\n$wordMap put \"Grade 3 Count\" [$metadata get \"count_grade_3\"]\n}\n$wordMap put \"identifier\" $wordId\n$memberList add $wordMap\n}\n}\nreturn $memberList\n}\nproc procGetHypernymMembers {language_id synsetId synsetObjMap hypernymId hypernymMap hypernym_list} {\nglobal prop_id\nglobal prop_gloss\nglobal prop_pos\nset hypernymObj [$hypernymMap get $hypernymId]\nset hypernymObjMap [java::cast Map $hypernymObj]\nset get_hypernym_response [getDataNode $language_id $hypernymId]\nset hypernym_node [get_resp_value $get_hypernym_response \"node\"]\nset outRelations [procGetOutRelations $hypernym_node]\nset hasOutRelations [isNotEmpty $outRelations]\nif {$hasOutRelations} {\nset memberList [procGetMembers $outRelations]\njava::for {Map memberMap} $memberList {\nset hypernym_word_map [java::new HashMap]\n$hypernym_word_map putAll $memberMap\n$hypernym_word_map put \"Synset Id\" $synsetId\n$hypernym_word_map put \"Synset Gloss\" [$synsetObjMap get \"gloss\"]\n$hypernym_word_map put \"Synset Pos\" [$synsetObjMap get \"pos\"]\n$hypernym_word_map put $prop_id $hypernymId\n$hypernym_word_map put $prop_gloss [$hypernymObjMap get \"gloss\"]\n$hypernym_word_map put $prop_pos [$hypernymObjMap get \"pos\"]\n$hypernym_list add $hypernym_word_map\n}\n}\nreturn $hypernym_list\n}\nglobal prop_id\nglobal prop_gloss\nglobal prop_pos\nset relation_name \"hasHypernym\"\nset inverse_relation_name \"hasHyponym\"\nset prop_id \"Hypernym Id\"\nset prop_gloss \"Hypernym Gloss\"\nset prop_pos \"Hypernym POS\"\nif {$relation == \"hyponyms\"} {\nset relation_name \"hasHyponym\"\nset inverse_relation_name \"hasHypernym\"\nset prop_id \"Hyponym Id\"\nset prop_gloss \"Hyponym Gloss\"\nset prop_pos \"Hyponym POS\"\n} elseif {$relation == \"meronyms\"} {\nset relation_name \"hasMeronym\"\nset inverse_relation_name \"hasHolonym\"\nset prop_id \"Meronym Id\"\nset prop_gloss \"Meronym Gloss\"\nset prop_pos \"Meronym POS\"\n} elseif {$relation == \"holonyms\"} {\nset relation_name \"hasHolonym\"\nset inverse_relation_name \"hasMeronym\"\nset prop_id \"Holonym Id\"\nset prop_gloss \"Holonym Gloss\"\nset prop_pos \"Holonym POS\"\n}\nset words [java::new ArrayList]\n$words add $word\nset resp_word_info [lang_getWordId $language_id $words]\nset check_error [check_response_error $resp_word_info]\nif {$check_error} {\nreturn $resp_word_info\n} else {\nset word_ids [get_resp_value $resp_word_info \"word_ids\"]\nset word_ids_not_empty [isNotEmpty $word_ids]\nif {$word_ids_not_empty} {\nset word_id_map [$word_ids get $word]\nset map [java::cast Map $word_id_map]\nset word_id [$map get \"wordId\"]\nset get_node_response [getDataNode $language_id $word_id]\nset graph_node [get_resp_value $get_node_response \"node\"]\nset inRelations [procGetInRelations $graph_node]\nset hasInRelations [isNotEmpty $inRelations]\nset member_id_list [java::new ArrayList]\nset hypernym_list [java::new ArrayList]\nif {$hasInRelations} {\nset synsetMap [procGetInRelationsByName $inRelations \"synonym\"]\nset synsetIds [$synsetMap keySet]\njava::for {String synsetId} $synsetIds {\nset synsetObj [$synsetMap get $synsetId]\nset synsetObjMap [java::cast Map $synsetObj]\nset get_synset_response [getDataNode $language_id $synsetId]\nset synset_node [get_resp_value $get_synset_response \"node\"]\nset outRelations [procGetOutRelations $synset_node]\nset hasOutRelations [isNotEmpty $outRelations]\nif {$hasOutRelations} {\nset hypernymMap [procGetOutRelationsByName $outRelations $relation_name]\nset hypernymIds [$hypernymMap keySet]\njava::for {String hypernymId} $hypernymIds {\n$member_id_list add $hypernymId\nset hypernym_list [procGetHypernymMembers $language_id $synsetId $synsetObjMap $hypernymId $hypernymMap $hypernym_list]\n}\n}\nset inRelations [procGetInRelations $synset_node]\nset hasInRelations [isNotEmpty $inRelations]\nif {$hasInRelations} {\nset hyponymMap [procGetInRelationsByName $inRelations $inverse_relation_name]\nset hyponymIds [$hyponymMap keySet]\njava::for {String hyponymId} $hyponymIds {\nset check_member [$member_id_list contains $hyponymId]\nif {!$check_member} {\n$member_id_list add $hyponymId\nset hypernym_list [procGetHypernymMembers $language_id $synsetId $synsetObjMap $hyponymId $hyponymMap $hypernym_list]\n}\n}\n}\n}\n}\nset result_map [java::new HashMap]\n$result_map put \"hypernyms\" $hypernym_list\nset response_list [create_response $result_map]\nset response_csv [convert_response_to_csv $response_list \"hypernyms\"]\nreturn $response_csv\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_WORD_NOT_FOUND\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "relation", "index" : 1, "routing_param" : false }, { "name" : "word", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/lang_qe_getLinguisticRelations" } }
,{ "_id" : { "$oid" : "56e26804e4b092f3ac4515ef" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createSynset", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset lemma_list [java::new ArrayList]\nset object_type \"Synset\"\nset error_status \"Failed\"\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$synset put \"objectType\" $object_type\nset synset_obj [convert_to_graph_node $synset $def_node]\nset create_response [createDataNode $language_id $synset_obj]\nreturn $create_response", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "synset", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/language/dictionary/Synset/*", "path_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "56e2680ee4b092f3ac4515f0" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateSynset", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset lemma_list [java::new ArrayList]\nset object_type \"Synset\"\nset error_status \"Failed\"\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$synset put \"objectType\" $object_type\n$synset put \"identifier\" $synset_id\nset synset_obj [convert_to_graph_node $synset $def_node]\nset create_response [updateDataNode $language_id $synset_id $synset_obj]\nreturn $create_response", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "synset_id", "index" : 1, "routing_param" : false }, { "name" : "synset", "datatype" : "java.util.HashMap", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/language/dictionary/Synset/*/*", "path_params" : [ "language_id", "synset_id" ] } }
,{ "_id" : { "$oid" : "56e26817e4b092f3ac4515f1" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "searchSynset", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_null [java::isnull $search]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_INVALID_SEARCH_REQUEST\"\n$result_map put \"message\" \"Invalid Search Request\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset invalidObjectType false\nset object_type_param [$search get \"objectType\"]\nset object_type_param_null [java::isnull $object_type_param]\nif {$object_type_param_null == 0} {\nset str_object_type_param [$object_type_param toString]\nif {$str_object_type_param != \"Synset\"} {\nset invalidObjectType true\n}\n}\nif {$invalidObjectType} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_SYNSET_NOT_FOUND\"\n$result_map put \"message\" \"No synset found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset object_type \"Synset\"\nset check_null [java::isnull $search]\nif {$search == 1} {\nset $search [java::new HashMap]\n}\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\nset sort [$search get \"sort\"]\nset limit [$search get \"limit\"]\n$search put \"sortBy\" $sort\n$search put \"resultSize\" $limit\n$search remove \"sort\"\n$search remove \"limit\"\nset returnFields false\nset fieldList [$search get \"fields\"]\nset is_fieldList_null [java::isnull $fieldList]\nif {$is_fieldList_null == 0} {\n$search remove \"fields\"\nset returnFields true\n}\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset obj_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nif {$returnFields} {\nset synset_obj [convert_graph_node $graph_node $def_node $fieldList]\n} else {\nset synset_obj [convert_graph_node $graph_node $def_node]\n}\n$obj_list add $synset_obj\n}\nset result_map [java::new HashMap]\n$result_map put \"content\" $obj_list\nset response_list [create_response $result_map]\nreturn $response_list\n}\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "search", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/synset/search/*", "path_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "56e268b0e4b092f3ac4515f3" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "containsLanguage", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\nset language_response [getLanguages]\nset check_error [check_response_error $language_response]\nif {$check_error} {\nreturn $language_response\n} else {\nset languages [get_resp_value $language_response \"languages\"]\nset lang_found false\njava::for {Map map} $languages {\nset lang_code [$map get \"code\"]\nset lang_eqs [$lang_code equals $language_id]\nif {$lang_eqs} {\nset lang_found true\n}\n}\nreturn $lang_found\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "GET", "url" : "/v1/language/contains/*", "path_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "56e2691de4b092f3ac4515f4" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getSynset", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset lemma_list [java::new ArrayList]\nset object_type \"Synset\"\nset error_status \"Failed\"\nset get_node_response [getDataNode $language_id $synset_id]\nreturn $get_node_response", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "synset_id", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v1/language/dictionary/Synset/*/*", "path_params" : [ "language_id", "synset_id" ] } }
,{ "_id" : { "$oid" : "56e7b4c8e4b039e15623a9a5" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getContent", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.graph.dac.model Filter\njava::import -package com.ilimi.graph.dac.model Relation\nproc getNode {graphId nodeId} {\nset response [getDataNode $graphId $nodeId]\nset check_error [check_response_error $response]\nif {$check_error} {\njava::throw [java::new Exception \"Error response from getDataNode\"]\n}\nset node [get_resp_value $response \"node\"]\nreturn $node\n}\nproc relationsExist {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nset resultMap [java::new HashMap]\njava::try {\nset node [getNode \"domain\" $contentId]\nset content [java::prop $node \"metadata\"]\n$content put \"tags\" [java::prop $node \"tags\"]\n$content put \"identifier\" [java::prop $node \"identifier\"]\n$content remove \"body\"\n$content remove \"editorState\"\nset concepts [java::new ArrayList]\nset relations [java::prop $node \"outRelations\"]\nif {[relationsExist $relations]} {\njava::for {Relation relation} $relations {\nif {[java::prop $relation \"endNodeObjectType\"] == \"Concept\"} {\n$concepts add [java::prop $relation \"endNodeId\"]\n}\n}\n}\n$content put \"concepts\" $concepts\n} catch {Exception err} {\nputs [$err getMessage]\n$resultMap put \"error\" [$err getMessage]\n}\n$resultMap put \"content\" $content\nset responseList [create_response $resultMap]\nreturn $responseList", "type" : "SCRIPT", "parameters" : [ { "name" : "contentId", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/analytics/getContent/*", "path_params" : [ "contentId" ] } }
,{ "_id" : { "$oid" : "56efbdfce4b07fd67591dbf3" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateWordCount", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nreturn \"success\"", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "wordCount", "datatype" : "java.lang.Integer", "index" : 1, "routing_param" : false }, { "name" : "liveWordCount", "datatype" : "java.lang.Integer", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/language/dictionary/updateWordCount/*", "path_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "56f01e6fe4b07fd67591dbf4" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_qe_updateWordMetadata", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Word\"\nset map [java::new HashMap]\n$map put \"objectType\" $object_type\n$map put \"nodeType\" \"DATA_NODE\"\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nputs \"Error response from searchNodes\"\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node node} $graph_nodes {\nset identifier [java::prop $node \"identifier\"]\nset metadata [java::prop $node \"metadata\"]\n$metadata put \"synsetCount\" [java::null]\nset create_response [updateDataNode $language_id $identifier $node]\nputs \"updated node: $identifier\"\n}\nreturn \"ok\"\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/lang_qe_updateWordMetadata" } }
,{ "_id" : { "$oid" : "56f23925e4b02feedd6c2dc2" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "retireConcept", "api_id" : "ekstep.domain.concept.retire", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset graph_id \"domain\"\nset object_type \"Concept\"\nset resp_get_node [getDataNode $graph_id $conceptId]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset node_object_type [java::prop $graph_node \"objectType\"]\nif {$node_object_type == $object_type} {\nset node_metadata [java::prop $graph_node \"metadata\"]\nset node_subject [$node_metadata get \"subject\"]\nset node_subject_str [$node_subject toString]\nif {$domainId == $node_subject_str} {\n$node_metadata put \"status\" \"Retired\"\nset create_response [updateDataNode $graph_id $conceptId $graph_node]\nreturn $create_response\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_NODE_NOT_FOUND\"\n$result_map put \"message\" \"$object_type $conceptId not found in $domainId\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_NODE_NOT_FOUND\"\n$result_map put \"message\" \"$object_type $conceptId not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "domainId", "index" : 0, "routing_param" : false }, { "name" : "conceptId", "index" : 1, "routing_param" : false }, { "name" : "newConceptId", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/domains/*/concepts/*/retire", "path_params" : [ "domainId", "conceptId" ], "request_params" : [ "newConceptId" ] } }
,{ "_id" : { "$oid" : "56fbc754e4b084f02da441ef" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_getPublishedContentIds", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\nset object_type \"Content\"\nset graph_id \"domain\"\nset search [java::new HashMap]\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\n$search put \"status\" \"Live\"\nset contentType [java::new ArrayList]\n$contentType add \"Story\"\n$contentType add \"Worksheet\"\n$search put \"contentType\" $contentType\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset identifiers [java::new ArrayList]\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset contentId [java::prop $graph_node \"identifier\"]\n$identifiers add $contentId\n}\nset result_map [java::new HashMap]\n$result_map put \"identifiers\" $identifiers\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_getPublishedContentIds" } }
,{ "_id" : { "$oid" : "56fccbb9e4b0dc9e1ad5ab99" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "retireContent", "api_id" : "ekstep.learning.content.retire", "version" : "2.0", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset graph_id \"domain\"\nset object_type \"Content\"\nset image_object_type \"ContentImage\"\nset resp_get_node [getDataNode $graph_id $contentId]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset node_object_type [java::prop $graph_node \"objectType\"]\nif {$node_object_type == $object_type} {\nset node_metadata [java::prop $graph_node \"metadata\"]\nset status_val [$node_metadata get \"status\"]\nset status_val_str [java::new String [$status_val toString]]\n$node_metadata put \"status\" \"Retired\"\nset create_response [updateDataNode $graph_id $contentId $graph_node]\nset content_image_id ${contentId}.img\nset resp_get_image_node [getDataNode $graph_id $content_image_id]\nset check_error [check_response_error $resp_get_image_node]\nif {$check_error} {\n} else {\nset graph_image_node [get_resp_value $resp_get_image_node \"node\"]\nset image_node_metadata [java::prop $graph_image_node \"metadata\"]\nset request [java::new HashMap]\n$request put \"versionKey\" [$image_node_metadata get \"versionKey\"]\n$request put \"status\" \"Retired\"\n$request put \"objectType\" $image_object_type\n$request put \"identifier\" $content_image_id\nset resp_def_node [getDefinition $graph_id $image_object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset domain_obj [convert_to_graph_node $request $def_node]\nset create_image_response [updateDataNode $graph_id $content_image_id $domain_obj]\n}\nreturn $create_response\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_NODE_NOT_FOUND\"\n$result_map put \"message\" \"$object_type $contentId not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "contentId", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "DELETE", "url" : "/v2/content/*", "path_params" : [ "contentId" ] } }
,{ "_id" : { "$oid" : "570b1437e4b0fe476dfdff8d" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_qe_getTranslations_for_lang", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package java.util HashSet Set\njava::import -package com.ilimi.graph.dac.model Node Relation\njava::import -package org.codehaus.jackson.map ObjectMapper\nproc proc_getTranslations {translations mapper} {\nset trans_map [java::new HashMap]\nset object_null [java::isnull $translations]\nif {$object_null == 1} {\nreturn $trans_map\n} else {\nset map_class [$trans_map getClass]\njava::try {\nset str_translations [$translations toString]\nset trans_object [$mapper readValue $str_translations $map_class]\nset trans_map [java::cast HashMap $trans_object]\n} catch {Exception err} {\n}\nreturn $trans_map\n}\n}\nset search [java::new HashMap]\n$search put \"objectType\" \"Synset\"\n$search put \"nodeType\" \"DATA_NODE\"\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset word_list [java::new HashSet]\nset mapper [java::new ObjectMapper]\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset metadata [java::prop $graph_node \"metadata\"]\nset translations [$metadata get \"translations\"]\nset trans_map [proc_getTranslations $translations $mapper]\nset trans_list_obj [$trans_map get $languageCode]\nset list_null [java::isnull $trans_list_obj]\nif {$list_null != 1} {\nset trans_list [java::cast ArrayList $trans_list_obj]\n$word_list addAll $trans_list\n}\n}\nset result_map [java::new HashMap]\n$result_map put \"words\" $word_list\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "languageCode", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/lang_qe_getTranslations_for_lang" } }
,{ "_id" : { "$oid" : "570f368ae4b05b4f3d7ddefe" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "create_search_property", "type" : "COMMAND", "command_class" : "com.ilimi.orchestrator.interpreter.command.CreateSearchProperty" }
,{ "_id" : { "$oid" : "570f3ed7e4b0b1cd9aa89c88" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getNodesByProperty", "type" : "COMMAND", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "metadata", "datatype" : "com.ilimi.common.dto.Property", "index" : 1, "routing_param" : false } ], "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.SearchManagerImpl", "operation" : "getNodesByProperty", "router" : "GRAPH_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "570f41b6e4b01b1221fe7c54" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "get_syllables_word", "type" : "COMMAND", "command_class" : "com.ilimi.orchestrator.interpreter.command.GetSyllables" }
,{ "_id" : { "$oid" : "570f41bae4b01b1221fe7c55" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "get_text_from_unicode", "type" : "COMMAND", "command_class" : "com.ilimi.orchestrator.interpreter.command.GetTextFromUnicode" }
,{ "_id" : { "$oid" : "570f41bee4b01b1221fe7c56" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "get_language_graph_id", "type" : "COMMAND", "command_class" : "com.ilimi.orchestrator.interpreter.command.GetLanguageGraphId" }
,{ "_id" : { "$oid" : "570f41c9e4b01b1221fe7c57" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createVarna", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Varna\"\nset error_status \"Failed\"\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$varna put \"objectType\" $object_type\nset identifer [$varna get \"varna\"]\n$varna put \"identifier\" $identifer\nset varna_obj [convert_to_graph_node $varna $def_node]\nset create_response [createDataNode $language_id $varna_obj]\nreturn $create_response", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "varna", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/language/dictionary/varna/*", "path_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "570f41d6e4b01b1221fe7c58" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateVarna", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Varna\"\nset error_status \"Failed\"\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$varna put \"objectType\" $object_type\n$varna put \"identifier\" $varna_id\nset varna_obj [convert_to_graph_node $varna $def_node]\nset create_response [updateDataNode $language_id $varna_id $varna_obj]\nreturn $create_response", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "varna_id", "index" : 1, "routing_param" : false }, { "name" : "varna", "datatype" : "java.util.HashMap", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/language/dictionary/varna/*/*", "path_params" : [ "language_id", "varna_id" ] } }
,{ "_id" : { "$oid" : "570f41d6e4b01b1221fe7c59" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getVarna", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Varna\"\nset error_status \"Failed\"\nset get_node_response [getDataNode $language_id $varna_id]\nset get_node_response_error [check_response_error $get_node_response]\nif {$get_node_response_error} {\nreturn $get_node_response\n}\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset varna_node [get_resp_value $get_node_response \"node\"]\nset varna_obj [convert_graph_node $varna_node $def_node]\nset result_map [java::new HashMap]\n$result_map put \"varna\" $varna_obj\nset api_response [create_response $result_map]\nreturn $api_response", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "varna_id", "datatype" : "java.lang.String", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v1/language/dictionary/varna/*/*", "path_params" : [ "language_id", "varna_id" ] } }
,{ "_id" : { "$oid" : "570f41d7e4b01b1221fe7c5a" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createVarnaIPA", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Varna_IPA\"\nset error_status \"Failed\"\nset language_id \"language\"\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$ipa put \"objectType\" $object_type\nset identifer [$ipa get \"ipaSymbol\"]\n$ipa put \"identifier\" $identifer\nset varnaIPA_obj [convert_to_graph_node $ipa $def_node]\nset create_response [createDataNode $language_id $varnaIPA_obj]\nreturn $create_response", "type" : "SCRIPT", "parameters" : [ { "name" : "ipa", "datatype" : "java.util.HashMap", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/language/dictionary/ipa" } }
,{ "_id" : { "$oid" : "570f41d7e4b01b1221fe7c5b" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateVarnaIPA", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Varna_IPA\"\nset error_status \"Failed\"\nset language_id \"language\"\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$ipa put \"objectType\" $object_type\n$ipa put \"identifier\" $varnaIPA_id\nset varna_obj [convert_to_graph_node $ipa $def_node]\nset create_response [updateDataNode $language_id $varnaIPA_id $varna_obj]\nreturn $create_response", "type" : "SCRIPT", "parameters" : [ { "name" : "varnaIPA_id", "index" : 1, "routing_param" : false }, { "name" : "ipa", "datatype" : "java.util.HashMap", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/language/dictionary/ipa/*", "path_params" : [ "varnaIPA_id" ] } }
,{ "_id" : { "$oid" : "570f41d8e4b01b1221fe7c5c" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getVarnaIPA", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Varna_IPA\"\nset error_status \"Failed\"\nset language_id \"language\"\nset get_node_response [getDataNode $language_id $ipa_id]\nset get_node_response_error [check_response_error $get_node_response]\nif {$get_node_response_error} {\nputs \"Error response from getDataNode\"\nreturn $get_node_response\n}\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset varnaIPA_node [get_resp_value $get_node_response \"node\"]\nset varnaIPA_obj [convert_graph_node $varnaIPA_node $def_node]\nset result_map [java::new HashMap]\n$result_map put \"varnaIPA\" $varnaIPA_obj\nset api_response [create_response $result_map]\nreturn $api_response", "type" : "SCRIPT", "parameters" : [ { "name" : "ipa_id", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v1/language/dictionary/ipa/*", "path_params" : [ "ipa_id" ] } }
,{ "_id" : { "$oid" : "570f41d9e4b01b1221fe7c5d" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getVarnaFromUnicode", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset varna_object_type \"Varna\"\nset varna_iso_object_type \"Varna_ISO\"\nset varna_iso_graph_id \"language\"\nset object_null [java::isnull $unicode]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_INVALID_REQUEST\"\n$result_map put \"message\" \"UNICODE IS MANDATORY\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\nset searchProperty [java::new HashMap]\n$searchProperty put \"varna\" $unicode\nset language_id [get_language_graph_id $unicode]\nset property [create_search_property $searchProperty]\nset search_response [getNodesByProperty $language_id $property]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n}\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset varna_node [$graph_nodes get 0]\nset resp_def_node [getDefinition $language_id $varna_object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset varna_obj [convert_graph_node $varna_node $def_node]\nset varnaIpaSymbol [$varna_obj get \"isoSymbol\"]\nset isoIsNull [java::isnull $varnaIpaSymbol]\nif {$isoIsNull == 0} {\nset searchProperty [java::new HashMap]\n$searchProperty put \"isoSymbol\" $varnaIpaSymbol\nset property [create_search_property $searchProperty]\nset search_response [getNodesByProperty $varna_iso_graph_id $property]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n}\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset varna_iso_node [$graph_nodes get 0]\nset resp_def_node [getDefinition $varna_iso_graph_id $varna_iso_object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset varna_iso_obj [convert_graph_node $varna_iso_node $def_node]\nset phonoAttribVector [$varna_iso_obj get \"phonoAttribVector\"]\nset audio [$varna_iso_obj get \"audio\"]\n$varna_obj put \"phonoAttribVector\" $phonoAttribVector\n$varna_obj put \"audio\" $audio\n}\nreturn $varna_obj", "type" : "SCRIPT", "parameters" : [ { "name" : "unicode", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v1/varna/unicode/*", "path_params" : [ "unicode" ] } }
,{ "_id" : { "$oid" : "570f41d9e4b01b1221fe7c5e" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getVarnaFromIpa", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset varna_object_type \"Varna\"\nset varna_iso_object_type \"Varna_ISO\"\nset varna_iso_graph_id \"language\"\nset object_null [java::isnull $iso]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_INVALID_REQUEST\"\n$result_map put \"message\" \"ISO Symbol IS MANDATORY\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\nset object_null [java::isnull $language_id]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_INVALID_REQUEST\"\n$result_map put \"message\" \"Language IS MANDATORY\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\nset searchProperty [java::new HashMap]\n$searchProperty put \"isoSymbol\" $iso\nset property [create_search_property $searchProperty]\nset search_response [getNodesByProperty $language_id $property]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n}\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset varna_node [$graph_nodes get 0]\nset resp_def_node [getDefinition $language_id $varna_object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset varna_obj [convert_graph_node $varna_node $def_node]\nset searchProperty [java::new HashMap]\n$searchProperty put \"isoSymbol\" $iso\nset property [create_search_property $searchProperty]\nset search_response [getNodesByProperty $varna_iso_graph_id $property]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n}\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset varna_iso_node [$graph_nodes get 0]\nset resp_def_node [getDefinition $varna_iso_graph_id $varna_iso_object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset varna_iso_obj [convert_graph_node $varna_iso_node $def_node]\nset phonoAttribVector [$varna_iso_obj get \"phonoAttribVector\"]\nset audio [$varna_iso_obj get \"audio\"]\n$varna_obj put \"phonoAttribVector\" $phonoAttribVector\n$varna_obj put \"audio\" $audio\nreturn $varna_obj", "type" : "SCRIPT", "parameters" : [ { "name" : "iso", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false }, { "name" : "language_id", "datatype" : "java.lang.String", "index" : 1, "routing_param" : true } ], "request_path" : { "type" : "GET", "url" : "/v1/varna/iso/*/*", "path_params" : [ "language_id", "iso" ] } }
,{ "_id" : { "$oid" : "570f41dae4b01b1221fe7c5f" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "isVowelFromUnicode", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset varna_object_type \"Varna\"\nset varna_iso_object_type \"Varna_ISO\"\nset varna_iso_graph_id \"language\"\nset vowelString [java::new String \"Vowel\"]\nset vowelSignString [java::new String \"VowelSign\"]\nset object_null [java::isnull $unicode]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_INVALID_REQUEST\"\n$result_map put \"message\" \"UNICODE IS MANDATORY\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\nset searchProperty [java::new HashMap]\n$searchProperty put \"varna\" $unicode\nset language_id [get_language_graph_id $unicode]\nset property [create_search_property $searchProperty]\nset search_response [getNodesByProperty $language_id $property]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n}\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset varna_node [$graph_nodes get 0]\nset resp_def_node [getDefinition $language_id $varna_object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset varna_obj [convert_graph_node $varna_node $def_node]\nset varnaType [$varna_obj get \"type\"]\nset varnaTypeTemp [$varnaType toString]\nset varnaTypeString [java::new String $varnaTypeTemp]\nset isVowel [$varnaTypeString equalsIgnoreCase $vowelString]\nset isVowelSign [$varnaTypeString equalsIgnoreCase $vowelSignString]\nif {$isVowel == 1 || $isVowelSign == 1} {\nreturn true\n}\nreturn false", "type" : "SCRIPT", "parameters" : [ { "name" : "unicode", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v1/varna/isvowel/*", "path_params" : [ "unicode" ] } }
,{ "_id" : { "$oid" : "570f41dae4b01b1221fe7c60" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getVowelsFromSyllable", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.common.dto NodeDTO\nset varna_object_type \"Varna\"\nset varna_iso_object_type \"Varna_ISO\"\nset varna_iso_graph_id \"language\"\nset vowelString [java::new String \"Vowel\"]\nset vowelSignString [java::new String \"VowelSign\"]\nset object_null [java::isnull $syllable]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_INVALID_REQUEST\"\n$result_map put \"message\" \"syllable IS MANDATORY\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\nset language_id [get_language_graph_id $syllable]\nset charArray [$syllable toCharArray]\nset unicode_list [java::new ArrayList]\njava::for {char ch} $charArray {\nset charInt [scan $ch %c]\nset charInteger [java::new Integer $charInt]\nset object [java::cast Object $charInteger]\nset object_list [java::new {Object[]} {1}]\n$object_list set 0 $object\nset charUnicode [java::call String format \"%04x\" $object_list]\nset charUnicodeString [java::new String $charUnicode]\nset charUnicodeUpper [$charUnicodeString toUpperCase]\n$unicode_list add $charUnicodeUpper\n}\nset vowel_list [java::new ArrayList]\njava::for {String unicode} $unicode_list {\nset searchProperty [java::new HashMap]\n$searchProperty put \"unicode\" $unicode\nset property [create_search_property $searchProperty]\nset search_response [getNodesByProperty $language_id $property]\nset check_error [check_response_error $search_response]\nif {$check_error} {\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset varna_node [$graph_nodes get 0]\nset resp_def_node [getDefinition $language_id $varna_object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset varna_obj [convert_graph_node $varna_node $def_node]\nset varnaType [$varna_obj get \"type\"]\nset varnaTypeTemp [$varnaType toString]\nset varnaTypeString [java::new String $varnaTypeTemp]\nset isVowel [$varnaTypeString equalsIgnoreCase $vowelString]\nif {$isVowel == 1} {\n$vowel_list add $varna_obj\n}\nset isVowelSign [$varnaTypeString equalsIgnoreCase $vowelSignString]\nif {$isVowelSign == 1} {\nset parentVowelList [$varna_obj get \"vowel\"]\nset parentVowelAList [java::cast List $parentVowelList]\nset parentVowel [$parentVowelAList get 0]\nset parentVowelNodeDTO [java::cast NodeDTO $parentVowel]\nset parentVowelId [$parentVowelNodeDTO getIdentifier]\nset get_node_response [getDataNode $language_id $parentVowelId]\nset get_node_response_error [check_response_error $get_node_response]\nif {$get_node_response_error} {\nreturn $get_node_response\n}\nset parent_vowel_node [get_resp_value $get_node_response \"node\"]\nset parent_vowel_obj [convert_graph_node $parent_vowel_node $def_node]\n$vowel_list add $parent_vowel_obj\n}\n}\n}\nreturn $vowel_list", "type" : "SCRIPT", "parameters" : [ { "name" : "syllable", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v1/varna/syllable/vowel/*", "path_params" : [ "syllable" ] } }
,{ "_id" : { "$oid" : "570f41dbe4b01b1221fe7c61" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getConsonantsFromSyllable", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.common.dto NodeDTO\nset varna_object_type \"Varna\"\nset varna_iso_object_type \"Varna_ISO\"\nset varna_iso_graph_id \"language\"\nset consonantString [java::new String \"Consonant\"]\nset object_null [java::isnull $syllable]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_INVALID_REQUEST\"\n$result_map put \"message\" \"syllable IS MANDATORY\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\nset language_id [get_language_graph_id $syllable]\nset charArray [$syllable toCharArray]\nset unicode_list [java::new ArrayList]\njava::for {char ch} $charArray {\nset charInt [scan $ch %c]\nset charInteger [java::new Integer $charInt]\nset object [java::cast Object $charInteger]\nset object_list [java::new {Object[]} {1}]\n$object_list set 0 $object\nset charUnicode [java::call String format \"%04x\" $object_list]\nset charUnicodeString [java::new String $charUnicode]\nset charUnicodeUpper [$charUnicodeString toUpperCase]\n$unicode_list add $charUnicodeUpper\n}\nset consonant_list [java::new ArrayList]\njava::for {String unicode} $unicode_list {\nset searchProperty [java::new HashMap]\n$searchProperty put \"unicode\" $unicode\nset property [create_search_property $searchProperty]\nset search_response [getNodesByProperty $language_id $property]\nset check_error [check_response_error $search_response]\nif {$check_error} {\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset varna_node [$graph_nodes get 0]\nset resp_def_node [getDefinition $language_id $varna_object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset varna_obj [convert_graph_node $varna_node $def_node]\nset varnaType [$varna_obj get \"type\"]\nset varnaTypeTemp [$varnaType toString]\nset varnaTypeString [java::new String $varnaTypeTemp]\nset isConsonant [$varnaTypeString equalsIgnoreCase $consonantString]\nif {$isConsonant == 1} {\n$consonant_list add $varna_obj\n}\n}\n}\nreturn $consonant_list", "type" : "SCRIPT", "parameters" : [ { "name" : "syllable", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v1/varna/syllable/consonant/*", "path_params" : [ "syllable" ] } }
,{ "_id" : { "$oid" : "570f41dbe4b01b1221fe7c62" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getSyllables", "api_id" : "ekstep.language.varnas.syllables.list", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset varna_object_type \"Varna\"\nset varna_iso_object_type \"Varna_ISO\"\nset varna_iso_graph_id \"language\"\nset object_null [java::isnull $word]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_INVALID_REQUEST\"\n$result_map put \"message\" \"Word IS MANDATORY\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\nset language_id [get_language_graph_id $word]\nset syllables [get_syllables_word $language_id $word]\nreturn $syllables", "type" : "SCRIPT", "parameters" : [ { "name" : "word", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/varnas/syllables/list", "path_params" : [ "word" ] } }
,{ "_id" : { "$oid" : "570f41dce4b01b1221fe7c63" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getGunimta", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset varna_object_type \"Varna\"\nset varna_iso_object_type \"Varna_ISO\"\nset varna_iso_graph_id \"language\"\nset object_null [java::isnull $unicode]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_INVALID_REQUEST\"\n$result_map put \"message\" \"UNICODE IS MANDATORY\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\nset searchProperty [java::new HashMap]\n$searchProperty put \"varna\" $unicode\nset language_id [get_language_graph_id $unicode]\nset property [create_search_property $searchProperty]\nset search_response [getNodesByProperty $language_id $property]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n}\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset varna_node [$graph_nodes get 0]\nset resp_def_node [getDefinition $language_id $varna_object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset varna_obj [convert_graph_node $varna_node $def_node]\nset vowel_response [getAllVarnas $language_id \"VowelSign\"]\nset check_error_vowel [check_response_error $vowel_response]\nif {$check_error_vowel} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_INVALID_REQUEST\"\n$result_map put \"message\" \"VOWEL DATA NOT FOUND\"\n$result_map put \"responseCode\" [java::new Integer 500]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\nset vowel_list [get_resp_value $vowel_response \"result\"]\nset gunimta_list [java::new ArrayList]\njava::for {Map vowelMap} $vowel_list {\nset gunimta_unicode_list [java::new ArrayList]\nset consonant_unicode [$varna_obj get \"unicode\"]\n$gunimta_unicode_list add $consonant_unicode\nset vowel_unicode [$vowelMap get \"unicode\"]\n$gunimta_unicode_list add $vowel_unicode\nset gunimta [get_text_from_unicode $language_id $gunimta_unicode_list]\n$gunimta_list add $gunimta\n}\nreturn $gunimta_list", "type" : "SCRIPT", "parameters" : [ { "name" : "unicode", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v1/varna/gunimta/*", "path_params" : [ "unicode" ] } }
,{ "_id" : { "$oid" : "570f41e2e4b01b1221fe7c64" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getAllVarnas", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset varna_object_type \"Varna\"\nset varna_iso_object_type \"Varna_ISO\"\nset varna_iso_graph_id \"language\"\nset searchProperty [java::new HashMap]\n$searchProperty put \"type\" $varna_type\nset property [create_search_property $searchProperty]\nset search_response [getNodesByProperty $language_id $property]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n}\nset resp_def_node [getDefinition $language_id $varna_object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset varna_iso_resp_def_node [getDefinition $varna_iso_graph_id $varna_iso_object_type]\nset varna_iso_def_node [get_resp_value $varna_iso_resp_def_node \"definition_node\"]\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset varnas_list [java::new ArrayList]\njava::for {Node varna_node} $graph_nodes {\nset varna_obj [convert_graph_node $varna_node $def_node]\nset varnaIpaSymbol [$varna_obj get \"isoSymbol\"]\nset isoIsNull [java::isnull $varnaIpaSymbol]\nif {$isoIsNull == 0} {\nset searchProperty [java::new HashMap]\n$searchProperty put \"isoSymbol\" $varnaIpaSymbol\nset property [create_search_property $searchProperty]\nset search_response [getNodesByProperty $varna_iso_graph_id $property]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $varnaIpaSymbol;\n}\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset varna_iso_node [$graph_nodes get 0]\nset varna_iso_obj [convert_graph_node $varna_iso_node $varna_iso_def_node]\nset phonoAttribVector [$varna_iso_obj get \"phonoAttribVector\"]\nset audio [$varna_iso_obj get \"audio\"]\n$varna_obj put \"phonoAttribVector\" $phonoAttribVector\n$varna_obj put \"audio\" $audio\n}\n$varnas_list add $varna_obj\n}\nreturn $varnas_list", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "varna_type", "index" : 1, "routing_param" : true } ], "request_path" : { "type" : "GET", "url" : "/v1/language/dictionary/varna/*/list/*", "path_params" : [ "varna_type", "language_id" ] } }
,{ "_id" : { "$oid" : "57177939e4b0c5ffb1eedf91" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "removeMembers", "type" : "COMMAND", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "collection_id", "index" : 1, "routing_param" : false }, { "name" : "collection_type", "index" : 2, "routing_param" : false }, { "name" : "members", "datatype" : "java.util.ArrayList", "index" : 3, "routing_param" : false } ], "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.CollectionManagerImpl", "operation" : "removeMembers", "router" : "GRAPH_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "57177944e4b0c5ffb1eedf92" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "addMembers", "type" : "COMMAND", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "collection_id", "index" : 1, "routing_param" : false }, { "name" : "collection_type", "index" : 2, "routing_param" : false }, { "name" : "members", "datatype" : "java.util.ArrayList", "index" : 3, "routing_param" : false } ], "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.CollectionManagerImpl", "operation" : "addMembers", "router" : "GRAPH_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "57278220e4b056e7c47e4138" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateWordListMembership", "api_id" : "ekstep.wordlist.update.membership", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc proc_isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nset object_type \"Word\"\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $object_type\n$map put \"identifier\" $wordIds\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset wordId [java::prop $graph_node \"identifier\"]\nset wordLists [java::new ArrayList]\nset wordListIds [java::new ArrayList]\nset inRelations [java::prop $graph_node \"inRelations\"]\nset hasRelations [proc_isNotEmpty $inRelations]\nif {$hasRelations} {\njava::for {Relation relation} $inRelations {\nif {[java::prop $relation \"startNodeObjectType\"] == \"WordList\" && [java::prop $relation \"relationType\"] == \"hasMember\"} {\nset wordListId [java::prop $relation \"startNodeId\"]\n$wordListIds add $wordListId\nset start_node_metadata [java::prop $relation \"startNodeMetadata\"]\nset hasMetadata [proc_isNotEmpty $start_node_metadata]\nif {$hasMetadata} {\nset word_list_name [$start_node_metadata get \"name\"]\nset hasWordListName [java::isnull $word_list_name]\nif {$hasWordListName == 0} {\n$wordLists add $word_list_name\n}\n}\n}\n}\n}\nset metadata [java::prop $graph_node \"metadata\"]\n$metadata put \"wordLists\" $wordLists\n$metadata put \"wordListIds\" $wordListIds\njava::prop $graph_node \"metadata\" $metadata\nupdateDataNode $language_id $wordId $graph_node\n}\nset result_map [java::new HashMap]\n$result_map put \"status\" \"OK\"\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "wordIds", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/updateWordListMembership" } }
,{ "_id" : { "$oid" : "5728a133e4b016aa3c1a72fd" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "loadGraphCache", "type" : "COMMAND", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true } ], "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.GraphMgrImpl", "operation" : "loadGraph", "router" : "GRAPH_REQUEST_ROUTER" }, "request_path" : { "type" : "GET", "url" : "/v1/graph/*/loadCache", "path_params" : [ "graph_id" ] } }
,{ "_id" : { "$oid" : "572c2c65e4b0488713eba8df" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_dataMigration", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Content\"\nset graph_id \"domain\"\nset resp_obj_list [java::new ArrayList]\nset resp_content_nodes [getNodesByObjectType $graph_id $object_type]\nset isRespContentNodesNull [java::isnull $resp_content_nodes]\nif {$isRespContentNodesNull == 0} {\nset content_nodes [get_resp_value $resp_content_nodes \"node_list\"]\njava::for {Node content_node} $content_nodes {\nset update 0\nset content_id [java::prop $content_node \"identifier\"]\nset metadata [java::prop $content_node \"metadata\"]\nset status [[$metadata get \"status\"] toString]\nset contentType [[$metadata get \"contentType\"] toString]\nif {$status == \"Live\"} {\n$metadata put \"lastPublishedOn\" [$metadata get \"lastUpdatedOn\"]\nset update 1\n}\nset size [$metadata get \"size\"]\nset isSizeNull [java::isnull $size]\nif {$isSizeNull == 0} {\nset size_instance [java::instanceof $size String]\nif {$size_instance == 1} {\njava::try {\nset string_size [$size toString]\nset numeric_size [java::new Double $string_size]\n$metadata put \"size\" $numeric_size\nset update 1\n} catch {Exception err} {\n}\n}\n}\nif {$update == 1} {\njava::prop $content_node \"metadata\" $metadata\nset update_response [updateDataNode $graph_id $content_id $content_node]\nset check_error [check_response_error $update_response]\nif {$check_error} {\nset messages [get_resp_value $update_response \"messages\"]\njava::for {String msg} $messages {\nputs \"$msg\"\n}\n}\n}\n}\n}\nreturn \"Migration Complete\"", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_dataMigration" } }
,{ "_id" : { "$oid" : "5730bb08e4b0ea3a31836e5b" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_qe_deleteAllSynsets", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Synset\"\nset search [java::new HashMap]\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nputs \"Error response from searchNodes\"\nreturn $search_response;\n} else {\nputs \"fetched all synsets...\"\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset synsetId [java::prop $graph_node \"identifier\"]\ndeleteDataNode $language_id $synsetId\n}\nset result_map [java::new HashMap]\n$result_map put \"status\" \"ok\"\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/lang_qe_deleteAllSynsets" } }
,{ "_id" : { "$oid" : "57337234e4b01b5bde8a0d25" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_qe_cleanup_wordnet_data", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc isNotNull {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 0} {\nset exist true\n}\n} catch {Exception err} {\nset exist false\n}\nreturn $exist\n}\nproc isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc procCheckIndoWordNet {graph_node} {\nset inRelations [java::prop $graph_node \"inRelations\"]\nset hasInRelations [isNotEmpty $inRelations]\nif {$hasInRelations} {\njava::for {Relation relation} $inRelations {\nif {[java::prop $relation \"startNodeObjectType\"] == \"Synset\"\n&& [java::prop $relation \"relationType\"] == \"synonym\"} {\nset synsetMetadata [java::prop $relation \"startNodeMetadata\"]\nset checkMetadata [isNotNull $synsetMetadata]\nif {$checkMetadata} {\nset indowordnetId [$synsetMetadata get \"indowordnetId\"]\nset checkIwnId [isNotNull $indowordnetId]\nif {$checkIwnId} {\nreturn true\n}\n}\n}\n}\n}\nreturn false\n}\nproc procIsIndoWordNetWord {graph_node} {\nset wordMetadata [java::prop $graph_node \"metadata\"]\nset sourcesList [$wordMetadata get \"sources\"]\nset checkMetadata [isNotNull $sourcesList]\nif {$checkMetadata} {\nset arr_instance [java::instanceof $sourcesList {String[]}]\nif {$arr_instance == 1} {\nset array [java::cast {String[]} $sourcesList]\njava::for {String src} $array {\nif {$src == \"IndoWordnet\"} {\nreturn true\n}\n}\n}\n}\nreturn false\n}\nset object_type \"Word\"\nset search [java::new HashMap]\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\n$search put \"sortBy\" \"lastUpdatedOn\"\n$search put \"order\" \"asc\"\n$search put \"resultSize\" [java::new Integer 5000]\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nputs \"Error response from searchNodes\"\nreturn $search_response;\n} else {\nputs \"fetched all words\"\nset sourcesList [java::new ArrayList]\n$sourcesList add \"IndoWordnet\"\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset wordId [java::prop $graph_node \"identifier\"]\nset isIWNWord [procIsIndoWordNetWord $graph_node]\nif {!$isIWNWord} {\nset wordNode [java::new Node $wordId \"DATA_NODE\" \"Word\"]\njava::prop $wordNode \"graphId\" $language_id\nset wordMetadata [java::new HashMap]\n$wordMetadata put \"sources\" $sourcesList\njava::prop $wordNode \"metadata\" $wordMetadata\nputs \"Updating word $wordId\"\nupdateDataNode $language_id $wordId $wordNode\n} else {\nputs \"IWN word $wordId\"\n}\n}\nreturn \"Migration Complete\"\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/lang_qe_cleanup_wordnet_data" } }
,{ "_id" : { "$oid" : "57338476e4b0ad96e170b890" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_deleteAssessmentItems", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\njava::import -package com.ilimi.graph.dac.model Node\nset graph_id \"domain\"\nset object_type \"AssessmentItem\"\nset search [java::new HashMap]\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\nset filter_list [java::new ArrayList]\nset filter1 [java::new HashMap]\n$filter1 put \"property\" $dateProperty\n$filter1 put \"operator\" \">\"\n$filter1 put \"value\" $dateValue\n$filter_list add $filter1\n$search put \"filters\" $filter_list\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset item_list [java::new ArrayList]\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset itemId [java::prop $graph_node \"identifier\"]\n$item_list add $itemId\ndeleteDataNode $graph_id $itemId\n}\nreturn $item_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "dateProperty", "index" : 0, "routing_param" : false }, { "name" : "dateValue", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_deleteAssessmentItems" } }
,{ "_id" : { "$oid" : "57338610e4b0ad96e170b891" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_getAssessmentItemsByDate", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\njava::import -package com.ilimi.graph.dac.model Node\nset graph_id \"domain\"\nset object_type \"AssessmentItem\"\nset search [java::new HashMap]\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\nset filter_list [java::new ArrayList]\nset filter1 [java::new HashMap]\n$filter1 put \"property\" $dateProperty\n$filter1 put \"operator\" \">\"\n$filter1 put \"value\" $dateValue\n$filter_list add $filter1\n$search put \"filters\" $filter_list\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset item_list [java::new ArrayList]\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset itemId [java::prop $graph_node \"identifier\"]\n$item_list add $itemId\n}\nreturn $item_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "dateProperty", "index" : 0, "routing_param" : false }, { "name" : "dateValue", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_getAssessmentItemsByDate" } }
,{ "_id" : { "$oid" : "57340009e4b0bf2bb29bbecf" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_qe_setPrimaryMeaning", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc isNotNull {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 0} {\nset exist true\n}\n} catch {Exception err} {\nset exist false\n}\nreturn $exist\n}\nproc isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc procGetPrimaryMeaningId {graph_node} {\nset inRelations [java::prop $graph_node \"inRelations\"]\nset hasInRelations [isNotEmpty $inRelations]\nif {$hasInRelations} {\njava::for {Relation relation} $inRelations {\nif {[java::prop $relation \"startNodeObjectType\"] == \"Synset\"\n&& [java::prop $relation \"relationType\"] == \"synonym\"} {\nset synsetId [java::prop $relation \"startNodeId\"]\nreturn $synsetId\n}\n}\n}\nreturn [java::null]\n}\nset object_type \"Word\"\nset search [java::new HashMap]\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\n$search put \"sortBy\" \"lastUpdatedOn\"\n$search put \"order\" \"asc\"\n$search put \"resultSize\" [java::new Integer 5000]\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nputs \"Error response from searchNodes\"\nreturn $search_response;\n} else {\nputs \"fetched all words\"\nset sourcesList [java::new ArrayList]\n$sourcesList add \"IndoWordnet\"\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset wordId [java::prop $graph_node \"identifier\"]\nset wordMetadata [java::prop $graph_node \"metadata\"]\nset primaryMeaningId [$wordMetadata get \"primaryMeaningId\"]\nset checkMetadata [isNotNull $primaryMeaningId]\nif {!$checkMetadata} {\nset synsetId [procGetPrimaryMeaningId $graph_node]\nset wordNode [java::new Node $wordId \"DATA_NODE\" \"Word\"]\njava::prop $wordNode \"graphId\" $language_id\nset newMetadata [java::new HashMap]\n$newMetadata put \"primaryMeaningId\" $synsetId\njava::prop $wordNode \"metadata\" $newMetadata\nputs \"Updating word $wordId\"\nupdateDataNodeAsync $language_id $wordId $wordNode\n}\n}\nreturn \"Migration Complete\"\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/lang_qe_setPrimaryMeaning" } }
,{ "_id" : { "$oid" : "573405cce4b0bf2bb29bbed0" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateDataNodeAsync", "type" : "COMMAND", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "node_id", "index" : 1, "routing_param" : false }, { "name" : "node", "datatype" : "com.ilimi.graph.dac.model.Node", "index" : 2, "routing_param" : false } ], "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.NodeManagerImpl", "operation" : "updateDataNode", "router" : "GRAPH_REQUEST_ROUTER" }, "request_path" : { "type" : "PATCH", "url" : "/v1/graph/*/datanodeasync/*", "path_params" : [ "graph_id", "node_id" ] }, "async" : true }
,{ "_id" : { "$oid" : "57353fcbe4b0ace7238d626a" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_getContentAfterDate", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\njava::import -package com.ilimi.graph.dac.model Node\nset graph_id \"domain\"\nset object_type \"Content\"\nset search [java::new HashMap]\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\nset filter_list [java::new ArrayList]\nset filter1 [java::new HashMap]\n$filter1 put \"property\" $dateProperty\n$filter1 put \"operator\" \">\"\n$filter1 put \"value\" $dateValue\n$filter_list add $filter1\n$search put \"filters\" $filter_list\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset item_list [java::new ArrayList]\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset itemId [java::prop $graph_node \"identifier\"]\n$item_list add $itemId\n}\nreturn $item_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "dateProperty", "index" : 0, "routing_param" : false }, { "name" : "dateValue", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_getContentAfterDate" } }
,{ "_id" : { "$oid" : "57357272e4b076c2547c6abc" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_fixLastPublishedDate", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Content\"\nset graph_id \"domain\"\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" \"Content\"\nset contentTypes [java::new ArrayList]\n$contentTypes add \"Story\"\n$contentTypes add \"Worksheet\"\n$contentTypes add \"Collection\"\n$contentTypes add \"Template\"\n$map put \"contentType\" $contentTypes\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset content_id [java::prop $graph_node \"identifier\"]\nset metadata [java::prop $graph_node \"metadata\"]\nset domain_val [$metadata get \"domain\"]\nset domain_val_null [java::isnull $domain_val]\nif {$domain_val_null == 0} {\nset domain_val_instance [java::instanceof $domain_val {String[]}]\nif {$domain_val_instance == 0} {\nset domain_list [java::new ArrayList]\n$domain_list add $domain_val\n$metadata put \"domain\" $domain_list\nset update_response [updateDataNode $graph_id $content_id $graph_node]\nset check_error [check_response_error $update_response]\nif {$check_error} {\nset messages [get_resp_value $update_response \"messages\"]\njava::for {String msg} $messages {\nputs \"$msg\"\n}\n}\n}\n}\n}\n}\nreturn \"Updation Complete\"", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_fixLastPublishedDate" } }
,{ "_id" : { "$oid" : "573c0570e4b06eb558750e0a" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_updateSizeMetadata", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.taxonomy.util AWSUploader\nset object_type \"Content\"\nset graph_id \"domain\"\nset search [java::new HashMap]\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\n$search put \"status\" \"Live\"\nset contentType [java::new ArrayList]\n$contentType add \"Story\"\n$contentType add \"Worksheet\"\n$contentType add \"Collection\"\n$search put \"contentType\" $contentType\nproc proc_getS3Key {metadata} {\nset s3key [java::null]\nset downloadUrl [$metadata get \"downloadUrl\"]\nset isURLNull [java::isnull $downloadUrl]\nif {$isURLNull == 0} {\nset urlStr [java::new String [$downloadUrl toString]]\nset index [$urlStr indexOf \"amazonaws.com/\"]\nset index [expr {$index+14}]\nset s3key [java::new String [$urlStr substring $index]]\nset checkKey [$s3key startsWith \"ekstep-public/\"]\nif {$checkKey} {\nset s3key [java::new String [$s3key substring [java::new Integer 14]]]\n}\n}\nreturn $s3key\n}\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset contentId [java::prop $graph_node \"identifier\"]\nset metadata [java::prop $graph_node \"metadata\"]\nset s3key [$metadata get \"s3Key\"]\nset isS3KeyNull [java::isnull $s3key]\nif {$isS3KeyNull == 1} {\nset s3key [proc_getS3Key $metadata]\nset isS3KeyNull [java::isnull $s3key]\n}\nif {$isS3KeyNull == 0} {\nset s3keyStr [$s3key toString]\njava::try {\nset size [java::call AWSUploader \"getObjectSize\" \"ekstep-public\" $s3keyStr]\n$metadata put \"size\" [java::new Double $size]\nset update_response [updateDataNode $graph_id $contentId $graph_node]\nset check_error [check_response_error $update_response]\nif {$check_error} {\nset messages [get_resp_value $update_response \"messages\"]\njava::for {String msg} $messages {\nputs \"$msg\"\n}\n} else {\n}\n} catch {Exception err} {\nputs \"error getting $contentId size: $err\"\n}\n}\n}\n}\nreturn \"OK\"", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_updateSizeMetadata" } }
,{ "_id" : { "$oid" : "573ec72ee4b02c2cc8706396" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getDomainMetrics", "api_id" : "ekstep.domain.metrics", "body" : "package require java\njava::import -package java.util HashMap Map\nproc getCount {graph_id object_type domain_id} {\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $object_type\n$map put \"subject\" $domain_id\nset search_criteria [create_search_criteria $map]\nset search_response [getNodesCount $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn 0\n} else {\nset count [get_resp_value $search_response \"count\"]\nreturn $count\n}\n}\nset object_type \"Domain\"\nset graph_id \"domain\"\nset resp_get_node [getDataNode $graph_id $domain_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset result_map [java::new HashMap]\njava::try {\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset resp_object [java::new HashMap]\nset dimension_count [getCount $graph_id \"Dimension\" $domain_id]\nset concept_count [getCount $graph_id \"Concept\" $domain_id]\nset misconception_count [getCount $graph_id \"Misconception\" $domain_id]\nset method_count [getCount $graph_id \"Method\" $domain_id]\nset content_count [getCount $graph_id \"Content\" $domain_id]\n$resp_object put \"dimensions\" $dimension_count\n$resp_object put \"concepts\" $concept_count\n$resp_object put \"misconceptions\" $misconception_count\n$resp_object put \"methods\" $method_count\n$result_map put \"domain\" $resp_object\n} catch {Exception err} {\n$result_map put \"error\" [$err getMessage]\n}\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "domain_id", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/metrics/domains/*", "path_params" : [ "domain_id" ] } }
,{ "_id" : { "$oid" : "573ecb66e4b02c2cc8706397" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getConceptMetrics", "api_id" : "ekstep.concept.metrics", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nset object_type \"Concept\"\nset graph_id \"domain\"\nset resp_get_node [getDataNode $graph_id $concept_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset result_map [java::new HashMap]\njava::try {\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset resp_object [java::new HashMap]\nset methods 0\nset misconceptions 0\nset inRelations [java::prop $graph_node \"inRelations\"]\nset hasInRelations [isNotEmpty $inRelations]\nif {$hasInRelations} {\njava::for {Relation relation} $inRelations {\nif {[java::prop $relation \"relationType\"] == \"associatedTo\"} {\nif {[java::prop $relation \"startNodeObjectType\"] == \"Method\"} {\nset methods [expr {$methods+1}]\n}\nif {[java::prop $relation \"startNodeObjectType\"] == \"Misconception\"} {\nset misconceptions [expr {$misconceptions+1}]\n}\n}\n}\n}\n$resp_object put \"misconceptions\" $misconceptions\n$resp_object put \"methods\" $methods\n$result_map put \"concept\" $resp_object\n} catch {Exception err} {\n$result_map put \"error\" [$err getMessage]\n}\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "concept_id", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/metrics/concepts/*", "path_params" : [ "concept_id" ] } }
,{ "_id" : { "$oid" : "57440f93e4b0d4262f8a4ee3" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getConceptById", "api_id" : "ekstep.concept.info", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nset object_type \"Concept\"\nset graph_id \"domain\"\nset resp_get_node [getDataNode $graph_id $concept_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset returnFields false\nset is_fieldList_null [java::isnull $fields]\nif {$is_fieldList_null == 0} {\nset returnFields true\n}\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset node_object_type [java::prop $graph_node \"objectType\"]\nif {$node_object_type == \"Concept\"} {\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nif {$returnFields} {\nset resp_object [convert_graph_node $graph_node $def_node $fields]\n} else {\nset resp_object [convert_graph_node $graph_node $def_node]\n}\nset result_map [java::new HashMap]\n$result_map put $object_type $resp_object\nset response_list [create_response $result_map]\nreturn $response_list\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_NODE_NOT_FOUND\"\n$result_map put \"message\" \"Concept $concept_id not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "concept_id", "index" : 0, "routing_param" : false }, { "name" : "fields", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/concepts/*", "path_params" : [ "concept_id" ], "request_params" : [ "fields" ] } }
,{ "_id" : { "$oid" : "5757f94de4b0cda7fbb1c66b" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_getAllItemSetsNotAssociatedToAnyContentCount", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nset graph_id \"domain\"\nset object_type \"ItemSet\"\nset search [java::new HashMap]\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"SET\"\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset item_count 0\nset assessment_item_count 0\nset result_map [java::new HashMap]\nset item_list [java::new ArrayList]\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset itemId [java::prop $graph_node \"identifier\"]\nset associatedContents 0\nset inRelations [java::prop $graph_node \"inRelations\"]\nset hasInRelations [isNotEmpty $inRelations]\nif {$hasInRelations} {\njava::for {Relation relation} $inRelations {\nif {[java::prop $relation \"relationType\"] == \"associatedTo\"} {\nif {[java::prop $relation \"startNodeObjectType\"] == \"Content\"} {\nset associatedContents [expr {$associatedContents+1}]\n}\n}\n}\n}\nif {$associatedContents == 0} {\nset item_count [expr {$item_count+1}]\nset outRelations [java::prop $graph_node \"outRelations\"]\nset hasOutRelations [isNotEmpty $outRelations]\nif {$hasOutRelations} {\nset assessment_item_list [java::new ArrayList]\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"relationType\"] == \"hasMember\"} {\nif {[java::prop $relation \"endNodeObjectType\"] == \"AssessmentItem\"} {\nset assessmentItemId [java::prop $relation \"endNodeId\"]\n$assessment_item_list add $assessmentItemId\nset assessment_item_count [expr {$assessment_item_count+1}]\n}\n}\n}\n}\n$item_list add $itemId\n}\n}\n$result_map put \"item_set_count\" $item_count\n$result_map put \"assessment_item_count\" $assessment_item_count\nreturn $result_map\n}", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_getAllItemSetsNotAssociatedToAnyContentCount" } }
,{ "_id" : { "$oid" : "5757fafde4b0cda7fbb1c66c" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_getRetiredContentCount", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\njava::import -package com.ilimi.graph.dac.model Node\nset graph_id \"domain\"\nset object_type \"Content\"\nset search [java::new HashMap]\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\n$search put \"status\" \"Retired\"\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset item_info [java::new HashMap]\nset item_list [java::new ArrayList]\nset retired_content_count 0\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset itemId [java::prop $graph_node \"identifier\"]\n$item_list add $itemId\nset retired_content_count [expr {$retired_content_count+1}]\n}\n$item_info put \"retired_content_ids\" $item_list\n$item_info put \"retired_content_count\" $retired_content_count\nreturn $item_info\n}", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_getRetiredContentCount" } }
,{ "_id" : { "$oid" : "5758fd9ae4b022ea06e0339c" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_getContentIdBySearchStringInField", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\njava::import -package com.ilimi.graph.dac.model Node\nset graph_id \"domain\"\nset object_type \"Content\"\nset search [java::new HashMap]\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\nset filter_list [java::new ArrayList]\nset filter1 [java::new HashMap]\n$filter1 put \"property\" $searchProperty\n$filter1 put \"operator\" $searchOperator\n$filter1 put \"value\" $searchString\n$filter_list add $filter1\n$search put \"filters\" $filter_list\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset item_list [java::new ArrayList]\nset result_map [java::new HashMap]\nset count 0\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset itemId [java::prop $graph_node \"identifier\"]\n$item_list add $itemId\nset count [expr {$count+1}]\n}\n$result_map put \"content_count\" $count\n$result_map put \"content_ids\" $item_list\nreturn $result_map\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "searchProperty", "index" : 0, "routing_param" : false }, { "name" : "searchOperator", "index" : 1, "routing_param" : false }, { "name" : "searchString", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_getContentIdBySearchStringInField" } }
,{ "_id" : { "$oid" : "57592413e4b022ea06e0339d" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_getAllItemSetBySearchStringInField", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nset graph_id \"domain\"\nset object_type \"ItemSet\"\nset search [java::new HashMap]\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"SET\"\nset filter_list [java::new ArrayList]\nset filter1 [java::new HashMap]\n$filter1 put \"property\" $searchProperty\n$filter1 put \"operator\" $searchOperator\n$filter1 put \"value\" $searchString\n$filter_list add $filter1\n$search put \"filters\" $filter_list\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset item_count 0\nset assessment_item_count 0\nset result_map [java::new HashMap]\nset item_list [java::new ArrayList]\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset itemId [java::prop $graph_node \"identifier\"]\nset associatedContents 0\nset inRelations [java::prop $graph_node \"inRelations\"]\nset hasInRelations [isNotEmpty $inRelations]\nif {$hasInRelations} {\njava::for {Relation relation} $inRelations {\nif {[java::prop $relation \"relationType\"] == \"associatedTo\"} {\nif {[java::prop $relation \"startNodeObjectType\"] == \"Content\"} {\nset associatedContents [expr {$associatedContents+1}]\n}\n}\n}\n}\nif {$associatedContents == 0} {\nset item_count [expr {$item_count+1}]\nset outRelations [java::prop $graph_node \"outRelations\"]\nset hasOutRelations [isNotEmpty $outRelations]\nif {$hasOutRelations} {\nset assessment_item_list [java::new ArrayList]\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"relationType\"] == \"hasMember\"} {\nif {[java::prop $relation \"endNodeObjectType\"] == \"AssessmentItem\"} {\nset assessmentItemId [java::prop $relation \"endNodeId\"]\n$assessment_item_list add $assessmentItemId\nset assessment_item_count [expr {$assessment_item_count+1}]\n}\n}\n}\n}\n$item_list add $itemId\n}\n}\n$result_map put \"item_set_count\" $item_count\n$result_map put \"assessment_item_count\" $assessment_item_count\n$result_map put \"item_set_ids\" $item_list\nreturn $result_map\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "searchProperty", "index" : 0, "routing_param" : false }, { "name" : "searchOperator", "index" : 1, "routing_param" : false }, { "name" : "searchString", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_getAllItemSetBySearchStringInField" } }
,{ "_id" : { "$oid" : "57592557e4b022ea06e0339e" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_getAssessmentItemBySearchStringInField", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\njava::import -package com.ilimi.graph.dac.model Node\nset graph_id \"domain\"\nset object_type \"AssessmentItem\"\nset search [java::new HashMap]\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\nset filter_list [java::new ArrayList]\nset filter1 [java::new HashMap]\n$filter1 put \"property\" $searchProperty\n$filter1 put \"operator\" $searchOperator\n$filter1 put \"value\" $searchString\n$filter_list add $filter1\n$search put \"filters\" $filter_list\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset item_list [java::new ArrayList]\nset result_map [java::new HashMap]\nset count 0\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset itemId [java::prop $graph_node \"identifier\"]\n$item_list add $itemId\nset count [expr {$count+1}]\n}\n$result_map put \"assessment_item_count\" $count\n$result_map put \"assessment_item_ids\" $item_list\nreturn $result_map\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "searchProperty", "index" : 0, "routing_param" : false }, { "name" : "searchOperator", "index" : 1, "routing_param" : false }, { "name" : "searchString", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_getAssessmentItemBySearchStringInField" } }
,{ "_id" : { "$oid" : "57595179e4b0a51f67bd9309" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_getCitationsCount", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "words", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false }, { "name" : "groupBy", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false } ], "actor_path" : { "manager" : "INDEXES_ACTOR", "operation" : "citationsCount", "router" : "LANGUAGE_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "57595179e4b0a51f67bd930a" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_getRootWords", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "words", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false }, { "name" : "limit", "datatype" : "java.lang.Integer", "index" : 2, "routing_param" : false } ], "actor_path" : { "manager" : "INDEXES_ACTOR", "operation" : "getRootWords", "router" : "LANGUAGE_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "57595179e4b0a51f67bd930b" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_getRootWordInfo", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "words", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false }, { "name" : "limit", "datatype" : "java.lang.Integer", "index" : 2, "routing_param" : false } ], "actor_path" : { "manager" : "INDEXES_ACTOR", "operation" : "rootWordInfo", "router" : "LANGUAGE_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "5759517ae4b0a51f67bd930d" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_getIndexInfo", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "words", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false }, { "name" : "groupBy", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false }, { "name" : "limit", "datatype" : "java.lang.Integer", "index" : 3, "routing_param" : false } ], "actor_path" : { "manager" : "INDEXES_ACTOR", "operation" : "getIndexInfo", "router" : "LANGUAGE_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "5759517be4b0a51f67bd930e" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_addWordIndex", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "words", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false } ], "actor_path" : { "manager" : "INDEXES_ACTOR", "operation" : "addWordIndex", "router" : "LANGUAGE_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "5759517ee4b0a51f67bd930f" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_getWordMetrics", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "actor_path" : { "manager" : "INDEXES_ACTOR", "operation" : "getWordMetrics", "router" : "LANGUAGE_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "5759518ae4b0a51f67bd9310" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_addCitationIndex", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "citations", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false } ], "actor_path" : { "manager" : "INDEXES_ACTOR", "operation" : "addCitationIndex", "router" : "LANGUAGE_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "5759518be4b0a51f67bd9311" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_wordWildCard", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "word", "index" : 1, "routing_param" : false }, { "name" : "limit", "datatype" : "java.lang.Integer", "index" : 2, "routing_param" : false } ], "actor_path" : { "manager" : "INDEXES_ACTOR", "operation" : "wordWildCard", "router" : "LANGUAGE_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "5759518be4b0a51f67bd9312" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_getMorphologicalVariants", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "words", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false }, { "name" : "limit", "datatype" : "java.lang.Integer", "index" : 2, "routing_param" : false } ], "actor_path" : { "manager" : "INDEXES_ACTOR", "operation" : "morphologicalVariants", "router" : "LANGUAGE_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "5759518ce4b0a51f67bd9313" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_getCitations", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "source_type", "index" : 1, "routing_param" : false }, { "name" : "source", "index" : 2, "routing_param" : false }, { "name" : "grade", "index" : 3, "routing_param" : false }, { "name" : "pos", "index" : 4, "routing_param" : false }, { "name" : "file_name", "index" : 5, "routing_param" : false }, { "name" : "limit", "datatype" : "java.lang.Integer", "index" : 6, "routing_param" : false } ], "actor_path" : { "manager" : "INDEXES_ACTOR", "operation" : "citations", "router" : "LANGUAGE_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "5759518ce4b0a51f67bd9314" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_loadCitations", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "source_type", "index" : 1, "routing_param" : false }, { "name" : "source", "index" : 2, "routing_param" : false }, { "name" : "grade", "index" : 3, "routing_param" : false }, { "name" : "file_path", "index" : 4, "routing_param" : false }, { "name" : "skipCitations", "index" : 5, "routing_param" : false } ], "actor_path" : { "manager" : "INDEXES_ACTOR", "operation" : "loadCitations", "router" : "LANGUAGE_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "5759518de4b0a51f67bd9315" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_loadLanguageVectors", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "actor_path" : { "manager" : "LEXILE_MEASURES_ACTOR", "operation" : "loadLanguageVectors", "router" : "LANGUAGE_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "5759518de4b0a51f67bd9316" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_getWordFeatures", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "words", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false }, { "name" : "word", "index" : 2, "routing_param" : false } ], "actor_path" : { "manager" : "LEXILE_MEASURES_ACTOR", "operation" : "getWordFeatures", "router" : "LANGUAGE_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "57635bcbe4b011799a567204" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_updateOwnerMetadata", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nproc proc_isNumeric {value} {\nset exist false\nset is_null [java::isnull $value]\nif {$is_null == 1} {\nreturn $exist\n} else {\njava::try {\nset string [java::call Double parseDouble [$value toString]]\nset exist true\n} catch {Exception err} {\nset exist false\n}\nreturn $exist\n}\n}\nproc proc_searchNodes {startPosition resultSize} {\nset object_type \"Content\"\nset graph_id \"domain\"\nset map [java::new HashMap]\n$map put \"objectType\" $object_type\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"startPosition\" [java::new Integer $startPosition]\n$map put \"resultSize\" [java::new Integer $resultSize]\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nset graph_nodes [java::null]\nreturn $graph_nodes\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nreturn $graph_nodes\n}\n}\nset graph_id \"domain\"\nset count 1\nset startPosistion 0\nset resultSize 5000\nwhile {$count > 0} {\nset nodeList [proc_searchNodes $startPosistion $resultSize]\nset hasValue [java::isnull $nodeList]\nif {$hasValue == 1} {\nset count 0\nbreak\n} else {\nset size [$nodeList size]\nif {$size > 0} {\njava::for {Node graph_node} $nodeList {\nset contentId [java::prop $graph_node \"identifier\"]\nset metadata [java::prop $graph_node \"metadata\"]\nset owner [$metadata get \"owner\"]\nset portalOwner [$metadata get \"portalOwner\"]\nset isNumeric [proc_isNumeric $owner]\nif {$isNumeric} {\nset isPortalOwnerNumeric [proc_isNumeric $portalOwner]\nif {!$isPortalOwnerNumeric} {\n$metadata put \"portalOwner\" $owner\nset update_response [updateDataNode $graph_id $contentId $graph_node]\n}\n}\n}\n} else {\nset count 0\nbreak\n}\n}\nset startPosistion [expr {$startPosistion+5000}]\n}\nreturn \"OK\"", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_updateOwnerMetadata" } }
,{ "_id" : { "$oid" : "57639d0be4b00356cae74185" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateIPAtoISO", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset resp_nodes [getNodesByObjectType $graph_id $object_type]\nset check_error [check_response_error $resp_nodes]\nset null_value [java::null]\nif {$check_error} {\nreturn $resp_nodes;\n} else {\nset graph_nodes [get_resp_value $resp_nodes \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset varna_id [java::prop $graph_node \"identifier\"]\nset metadataMap [java::prop $graph_node \"metadata\"]\nset obj_type [java::prop $graph_node \"objectType\"]\nset ipa_value [$metadataMap get \"ipaSymbol\"]\nif {[java::isnull $ipa_value] == 0} {\n$metadataMap put \"isoSymbol\" $ipa_value\n$metadataMap put \"ipaSymbol\" $null_value\nset update_response [updateDataNode $graph_id $varna_id $graph_node]\nset check_update_error [check_response_error $update_response]\nif {$check_update_error} {\nreturn $update_response;\n} else {\nputs \"Successful response for updating status from Live to Draft for the varna $varna_id\"\n}\n}\n}\nreturn \"Completed\"\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "object_type", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v1/language/varna/updateToISO/*/*", "path_params" : [ "graph_id", "object_type" ] } }
,{ "_id" : { "$oid" : "57639d3de4b00356cae74186" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "deleteVarnaIPA", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset varna_ipa_Obj_type \"Varna_IPA\"\nset resp_nodes [getNodesByObjectType $graph_id $varna_ipa_Obj_type]\nset check_error [check_response_error $resp_nodes]\nif {$check_error} {\nreturn $resp_nodes;\n} else {\nset graph_nodes [get_resp_value $resp_nodes \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset varna_id [java::prop $graph_node \"identifier\"]\nset delete_response [deleteDataNode $graph_id $varna_id]\nset check_delete_error [check_response_error $delete_response]\nif {$check_delete_error} {\nreturn $delete_response;\n}\n}\nreturn \"Completed\"\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "DELETE", "url" : "/v1/language/varnaIPA/*", "path_params" : [ "graph_id" ] } }
,{ "_id" : { "$oid" : "577176fbe4b0ab9357833200" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_deleteAllItemSetBySearchStringInField", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nset graph_id \"domain\"\nset object_type \"ItemSet\"\nset search [java::new HashMap]\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"SET\"\nset filter_list [java::new ArrayList]\nset filter1 [java::new HashMap]\n$filter1 put \"property\" $searchProperty\n$filter1 put \"operator\" $searchOperator\n$filter1 put \"value\" $searchString\n$filter_list add $filter1\n$search put \"filters\" $filter_list\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset item_list [java::new ArrayList]\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset itemId [java::prop $graph_node \"identifier\"]\nset associatedContents 0\nset inRelations [java::prop $graph_node \"inRelations\"]\nset hasInRelations [isNotEmpty $inRelations]\nif {$hasInRelations} {\njava::for {Relation relation} $inRelations {\nif {[java::prop $relation \"relationType\"] == \"associatedTo\"} {\nif {[java::prop $relation \"startNodeObjectType\"] == \"Content\"} {\nset associatedContents [expr {$associatedContents+1}]\n}\n}\n}\n}\nif {$associatedContents == 0} {\nset outRelations [java::prop $graph_node \"outRelations\"]\nset hasOutRelations [isNotEmpty $outRelations]\nif {$hasOutRelations} {\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"relationType\"] == \"hasMember\"} {\nif {[java::prop $relation \"endNodeObjectType\"] == \"AssessmentItem\"} {\nset assessmentItemId [java::prop $relation \"endNodeId\"]\ndeleteDataNode $graph_id $assessmentItemId\n}\n}\n}\n}\n$item_list add $itemId\nset delete_response [deleteDataNode $graph_id $itemId]\nset check_error [check_response_error $delete_response]\nif {$check_error} {\nset messages [get_resp_value $delete_response \"messages\"]\njava::for {String msg} $messages {\nputs \"$msg\"\n}\n}\n}\n}\nreturn $item_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "searchProperty", "index" : 0, "routing_param" : false }, { "name" : "searchOperator", "index" : 1, "routing_param" : false }, { "name" : "searchString", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_deleteAllItemSetBySearchStringInField" } }
,{ "_id" : { "$oid" : "577176fde4b0ab9357833201" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_deleteAllItemSetsNotAssociatedToAnyContent", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nset graph_id \"domain\"\nset object_type \"ItemSet\"\nset search [java::new HashMap]\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"SET\"\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset item_list [java::new ArrayList]\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset itemId [java::prop $graph_node \"identifier\"]\nset associatedContents 0\nset inRelations [java::prop $graph_node \"inRelations\"]\nset hasInRelations [isNotEmpty $inRelations]\nif {$hasInRelations} {\njava::for {Relation relation} $inRelations {\nif {[java::prop $relation \"relationType\"] == \"associatedTo\"} {\nif {[java::prop $relation \"startNodeObjectType\"] == \"Content\"} {\nset associatedContents [expr {$associatedContents+1}]\n}\n}\n}\n}\nif {$associatedContents == 0} {\nset outRelations [java::prop $graph_node \"outRelations\"]\nset hasOutRelations [isNotEmpty $outRelations]\nif {$hasOutRelations} {\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"relationType\"] == \"hasMember\"} {\nif {[java::prop $relation \"endNodeObjectType\"] == \"AssessmentItem\"} {\nset assessmentItemId [java::prop $relation \"endNodeId\"]\ndeleteDataNode $graph_id $assessmentItemId\n}\n}\n}\n}\n$item_list add $itemId\nset delete_response [deleteDataNode $graph_id $itemId]\nset check_error [check_response_error $delete_response]\nif {$check_error} {\nset messages [get_resp_value $delete_response \"messages\"]\njava::for {String msg} $messages {\nputs \"$msg\"\n}\n}\n}\n}\nreturn $item_list\n}", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_deleteAllItemSetsNotAssociatedToAnyContent" } }
,{ "_id" : { "$oid" : "57717706e4b0ab9357833202" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_deleteAssessmentItemBySearchStringInField", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\njava::import -package com.ilimi.graph.dac.model Node\nset graph_id \"domain\"\nset object_type \"AssessmentItem\"\nset search [java::new HashMap]\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\nset filter_list [java::new ArrayList]\nset filter1 [java::new HashMap]\n$filter1 put \"property\" $searchProperty\n$filter1 put \"operator\" $searchOperator\n$filter1 put \"value\" $searchString\n$filter_list add $filter1\n$search put \"filters\" $filter_list\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset item_list [java::new ArrayList]\nset result_map [java::new HashMap]\nset count 0\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset itemId [java::prop $graph_node \"identifier\"]\n$item_list add $itemId\nset count [expr {$count+1}]\nset delete_response [deleteDataNode $graph_id $itemId]\nset check_error [check_response_error $delete_response]\nif {$check_error} {\nset messages [get_resp_value $delete_response \"messages\"]\njava::for {String msg} $messages {\nputs \"$msg\"\n}\n}\n}\n$result_map put \"assessment_item_count\" $count\n$result_map put \"assessment_item_ids\" $item_list\nreturn $result_map\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "searchProperty", "index" : 0, "routing_param" : false }, { "name" : "searchOperator", "index" : 1, "routing_param" : false }, { "name" : "searchString", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_deleteAssessmentItemBySearchStringInField" } }
,{ "_id" : { "$oid" : "57717707e4b0ab9357833203" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_deleteContentBySearchStringInField", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\njava::import -package com.ilimi.graph.dac.model Node\nset graph_id \"domain\"\nset object_type \"Content\"\nset search [java::new HashMap]\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\nset filter_list [java::new ArrayList]\nset filter1 [java::new HashMap]\n$filter1 put \"property\" $searchProperty\n$filter1 put \"operator\" $searchOperator\n$filter1 put \"value\" $searchString\n$filter_list add $filter1\n$search put \"filters\" $filter_list\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset item_list [java::new ArrayList]\nset result_map [java::new HashMap]\nset count 0\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset itemId [java::prop $graph_node \"identifier\"]\n$item_list add $itemId\nset count [expr {$count+1}]\nset delete_response [deleteDataNode $graph_id $itemId]\nset check_error [check_response_error $delete_response]\nif {$check_error} {\nset messages [get_resp_value $delete_response \"messages\"]\njava::for {String msg} $messages {\nputs \"$msg\"\n}\n}\n}\n$result_map put \"content_count\" $count\n$result_map put \"content_ids\" $item_list\nreturn $result_map\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "searchProperty", "index" : 0, "routing_param" : false }, { "name" : "searchOperator", "index" : 1, "routing_param" : false }, { "name" : "searchString", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_deleteContentBySearchStringInField" } }
,{ "_id" : { "$oid" : "57717709e4b0ab9357833204" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_deleteRetiredContents", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\njava::import -package com.ilimi.graph.dac.model Node\nset graph_id \"domain\"\nset object_type \"Content\"\nset search [java::new HashMap]\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\n$search put \"status\" \"Retired\"\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset item_list [java::new ArrayList]\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset itemId [java::prop $graph_node \"identifier\"]\n$item_list add $itemId\ndeleteDataNode $graph_id $itemId\n}\nreturn $item_list\n}", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_deleteRetiredContents" } }
,{ "_id" : { "$oid" : "57717852e4b0ab9357833206" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createVarnaISO", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Varna_ISO\"\nset error_status \"Failed\"\nset language_id \"language\"\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$iso put \"objectType\" $object_type\nset identifer [$iso get \"isoSymbol\"]\n$iso put \"identifier\" $identifer\nset varnaISO_obj [convert_to_graph_node $iso $def_node]\nset create_response [createDataNode $language_id $varnaISO_obj]\nreturn $create_response", "type" : "SCRIPT", "parameters" : [ { "name" : "iso", "datatype" : "java.util.HashMap", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/language/dictionary/iso" } }
,{ "_id" : { "$oid" : "57717853e4b0ab9357833207" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateVarnaISO", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Varna_ISO\"\nset error_status \"Failed\"\nset language_id \"language\"\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$iso put \"objectType\" $object_type\n$iso put \"identifier\" $varnaISO_id\nset varna_obj [convert_to_graph_node $iso $def_node]\nset create_response [updateDataNode $language_id $varnaISO_id $varna_obj]\nreturn $create_response", "type" : "SCRIPT", "parameters" : [ { "name" : "varnaISO_id", "index" : 1, "routing_param" : false }, { "name" : "iso", "datatype" : "java.util.HashMap", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/language/dictionary/iso/*", "path_params" : [ "varnaISO_id" ] } }
,{ "_id" : { "$oid" : "57717854e4b0ab9357833208" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getVarnaISO", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Varna_ISO\"\nset error_status \"Failed\"\nset language_id \"language\"\nset get_node_response [getDataNode $language_id $iso_id]\nset get_node_response_error [check_response_error $get_node_response]\nif {$get_node_response_error} {\nreturn $get_node_response\n}\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset varnaISO_node [get_resp_value $get_node_response \"node\"]\nset varnaISO_obj [convert_graph_node $varnaISO_node $def_node]\nset result_map [java::new HashMap]\n$result_map put \"varnaISO\" $varnaISO_obj\nset api_response [create_response $result_map]\nreturn $api_response", "type" : "SCRIPT", "parameters" : [ { "name" : "iso_id", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v1/language/dictionary/iso/*", "path_params" : [ "iso_id" ] } }
,{ "_id" : { "$oid" : "5786540ce4b06edd62428ca5" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createTraversalRule", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"TraversalRule\"\nset error_status \"Failed\"\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$rule put \"objectType\" $object_type\nset identifer [$rule get \"ruleId\"]\n$rule put \"identifier\" $identifer\nset rule_obj [convert_to_graph_node $rule $def_node]\nset create_response [createDataNode $language_id $rule_obj]\nreturn $create_response", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "rule", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/language/traversals/*", "path_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "5786540de4b06edd62428ca6" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateTraversalRule", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"TraversalRule\"\nset error_status \"Failed\"\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$rule put \"objectType\" $object_type\n$rule put \"identifier\" $rule_id\nset rule_obj [convert_to_graph_node $rule $def_node]\nset create_response [updateDataNode $language_id $rule_id $rule_obj]\nreturn $create_response", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "rule_id", "index" : 1, "routing_param" : false }, { "name" : "rule", "datatype" : "java.util.HashMap", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/language/traversals/*/*", "path_params" : [ "language_id", "rule_id" ] } }
,{ "_id" : { "$oid" : "5786540de4b06edd62428ca7" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getTraversalRule", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"TraversalRule\"\nset error_status \"Failed\"\nset get_node_response [getDataNode $language_id $rule_id]\nset get_node_response_error [check_response_error $get_node_response]\nif {$get_node_response_error} {\nreturn $get_node_response\n}\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset rule_node [get_resp_value $get_node_response \"node\"]\nset rule_obj [convert_graph_node $rule_node $def_node]\nset result_map [java::new HashMap]\n$result_map put \"rule\" $rule_obj\nset api_response [create_response $result_map]\nreturn $api_response", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "rule_id", "datatype" : "java.lang.String", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/language/traversals/*/*", "path_params" : [ "language_id", "rule_id" ] } }
,{ "_id" : { "$oid" : "5786540fe4b06edd62428ca8" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getTraversalRules", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"TraversalRule\"\nset map [java::new HashMap]\n$map put \"objectType\" $object_type\n$map put \"nodeType\" \"DATA_NODE\"\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset obj_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nset domain_obj [convert_graph_node $graph_node $def_node]\n$obj_list add $domain_obj\n}\nset result_map [java::new HashMap]\n$result_map put \"rules\" $obj_list\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "GET", "url" : "/v2/language/traversals/*", "path_params" : [ "graph_id" ] } }
,{ "_id" : { "$oid" : "57866809e4b0a89f35be99b6" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "log_content_lifecycle_event", "type" : "COMMAND", "command_class" : "com.ilimi.orchestrator.interpreter.command.LogContentLifecycleEvent" }
,{ "_id" : { "$oid" : "578f856ee4b06646d0ac2d15" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_updateAssessmentItemMixedOptions", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.graph.common JSONUtils\nproc proc_getOptionValue {valueMap index} {\nset text [$valueMap get \"text\"]\nset count [$valueMap get \"count\"]\nset textNull [java::isnull $text]\nset countNull [java::isnull $count]\nif {$textNull == 0 && [$text toString] != \"\"} {\nreturn [$text toString]\n} elseif {$countNull == 0 && [$count toString] != \"\"} {\nreturn [$count toString]\n} else {\nreturn $index\n}\n}\nproc proc_checkOptions {options} {\nset returnList [java::null]\nset isOptionsNull [java::isnull $options]\nif {$isOptionsNull == 0} {\nset optionsStr [$options toString]\nset update 0\nset jsonObj [java::call JSONUtils convertJSONString $optionsStr]\nset listInstance [java::instanceof $jsonObj List]\nif {$listInstance == 1} {\nset index 0\nset list [java::cast List $jsonObj]\njava::for {Object option} $list {\nset map [java::cast Map $option]\nset valueMap [java::cast Map [$map get \"value\"]]\nset type [[$valueMap get \"type\"] toString]\nif {$type == \"mixed\"} {\nset asset [$valueMap get \"asset\"]\nset assetVal [proc_getOptionValue $valueMap $index]\nset isAssetNull [java::isnull $asset]\nif {$isAssetNull == 1 || [$asset toString] != $assetVal} {\n$valueMap put \"asset\" $assetVal\nset update 1\n}\n}\nset index [expr {$index+1}]\n}\nif {$update == 1} {\nset returnList [java::new ArrayList]\n$returnList addAll $list\n}\n}\n}\nreturn $returnList\n}\nset graph_id \"domain\"\nset object_type \"AssessmentItem\"\nset search [java::new HashMap]\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\nset types [java::new ArrayList]\n$types add \"mcq\"\n$types add \"mtf\"\n$search put \"type\" $types\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset itemId [java::prop $graph_node \"identifier\"]\nset metadata [java::prop $graph_node \"metadata\"]\nset itemType [[$metadata get \"type\"] toString]\nif {$itemType == \"mcq\"} {\nset options [$metadata get \"options\"]\nset list [proc_checkOptions $options]\nset isListNull [java::isnull $list]\nif {$isListNull == 0} {\nset node [java::new Node $itemId \"DATA_NODE\" \"AssessmentItem\"]\nset node_metadata [java::new HashMap]\n$node_metadata put \"options\" $list\njava::prop $node \"metadata\" $node_metadata\nset update_response [updateDataNode $graph_id $itemId $node]\nputs \"$itemId - mcq item updated\"\n}\n} elseif {$itemType == \"mtf\"} {\nset mtf_update 0\nset lhs_options [$metadata get \"lhs_options\"]\nset rhs_options [$metadata get \"rhs_options\"]\nset node [java::new Node $itemId \"DATA_NODE\" \"AssessmentItem\"]\nset node_metadata [java::new HashMap]\njava::prop $node \"metadata\" $node_metadata\nset lhs_list [proc_checkOptions $lhs_options]\nset isLHSNull [java::isnull $lhs_list]\nif {$isLHSNull == 0} {\n$node_metadata put \"lhs_options\" $lhs_list\nset mtf_update 1\n}\nset rhs_list [proc_checkOptions $rhs_options]\nset isRHSNull [java::isnull $rhs_list]\nif {$isRHSNull == 0} {\n$node_metadata put \"rhs_options\" $rhs_list\nset mtf_update 1\n}\nif {$mtf_update == 1} {\nset update_response [updateDataNode $graph_id $itemId $node]\nputs \"$itemId - mtf item updated\"\n}\n}\n}\nreturn \"ok\"\n}", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_updateAssessmentItemMixedOptions" } }
,{ "_id" : { "$oid" : "57988f9ce4b0d8dc0c0081a5" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "exportGraph", "type" : "COMMAND", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "format", "index" : 1, "routing_param" : false }, { "name" : "search_criteria", "datatype" : "com.ilimi.graph.dac.model.SearchCriteria", "index" : 2, "routing_param" : false } ], "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.GraphMgrImpl", "operation" : "exportGraph", "router" : "GRAPH_REQUEST_ROUTER" }, "request_path" : { "type" : "POST", "url" : "/v1/graph/*/export", "path_params" : [ "graph_id" ] } }
,{ "_id" : { "$oid" : "5798aae9e4b0d8dc0c0081a6" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "exportLanguageGraph", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.graph.importer OutputStreamValue\njava::import -package java.io ByteArrayOutputStream\nset search_criteria $search_criteria\nset format \"CSV\"\nset export_response [exportGraph $language_id $format $search_criteria]\nset check_error [check_response_error $export_response]\nif {$check_error} {\nreturn $export_response;\n} else {\nset osValue [get_resp_value $export_response \"output_stream\"]\nset output_stream [$osValue \"getOutputStream\"]\nset baos [java::cast ByteArrayOutputStream $output_stream]\nset res_string [$baos toString]\n# set result_map [java::new HashMap]\n# $result_map put \"data\" $res_string\n# set response_list [create_response $result_map]\n# set response_csv [convert_response_to_csv $response_list \"data\"]\nreturn $res_string\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "search_criteria", "datatype" : "com.ilimi.graph.dac.model.SearchCriteria", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/*/export", "path_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "57a4ae4be4b0f7f097918551" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createObject", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_null [java::isnull $object]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_INVALID_OBJECT\"\n$result_map put \"message\" \"Invalid Request\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset create_obj_error_response [create_error_response $result_map]\nreturn $create_obj_error_response\n} else {\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$object put \"objectType\" $object_type\nset node_obj [convert_to_graph_node $object $def_node]\nset create_response [createDataNode $graph_id $node_obj]\nreturn $create_response\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "object", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false }, { "name" : "object_type", "datatype" : "java.lang.String", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/object/*/*", "path_params" : [ "graph_id", "object_type" ] } }
,{ "_id" : { "$oid" : "57a4ae54e4b0f7f097918552" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateObject", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_null [java::isnull $object]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_INVALID_OBJECT\"\n$result_map put \"message\" \"Invalid Request\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset update_obj_error_response [create_error_response $result_map]\nreturn $update_obj_error_response\n} else {\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$object put \"objectType\" $object_type\nset node_obj [convert_to_graph_node $object $def_node]\nset update_response [updateDataNode $graph_id $obj_id $node_obj]\nreturn $update_response\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "object", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false }, { "name" : "object_type", "datatype" : "java.lang.String", "index" : 2, "routing_param" : false }, { "name" : "obj_id", "datatype" : "java.lang.String", "index" : 3, "routing_param" : false } ], "request_path" : { "type" : "PATCH", "url" : "/v2/object/*/*/*", "path_params" : [ "graph_id", "object_type", "obj_id" ] } }
,{ "_id" : { "$oid" : "57a4ae5ee4b0f7f097918553" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getObject", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset get_node_response [getDataNode $graph_id $obj_id]\nset get_node_response_error [check_response_error $get_node_response]\nif {$get_node_response_error} {\nreturn $get_node_response\n}\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset obj_node [get_resp_value $get_node_response \"node\"]\nset object [convert_graph_node $obj_node $def_node]\nset result_map [java::new HashMap]\n$result_map put \"object\" $object\nset api_response [create_response $result_map]\nreturn $api_response", "type" : "SCRIPT", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "object_type", "datatype" : "java.lang.String", "index" : 1, "routing_param" : false }, { "name" : "obj_id", "datatype" : "java.lang.String", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/object/*/*/*", "path_params" : [ "graph_id", "object_type", "obj_id" ] } }
,{ "_id" : { "$oid" : "57a4ae68e4b0f7f097918554" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getAllObjects", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset map [java::new HashMap]\n$map put \"objectType\" $object_type\n$map put \"nodeType\" \"DATA_NODE\"\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset obj_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nset domain_obj [convert_graph_node $graph_node $def_node]\n$obj_list add $domain_obj\n}\nset result_map [java::new HashMap]\n$result_map put \"object_list\" $obj_list\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "object_type", "index" : 1, "routing_param" : true } ], "request_path" : { "type" : "GET", "url" : "/v2/object/*/*", "path_params" : [ "graph_id", "object_type" ] } }
,{ "_id" : { "$oid" : "57a4ae77e4b0f7f097918555" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "searchObjects", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_null [java::isnull $search]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_INVALID_SEARCH_REQUEST\"\n$result_map put \"message\" \"Invalid Search Request\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset check_null [java::isnull $search]\nif {$search == 1} {\nset $search [java::new HashMap]\n}\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\nset sort [$search get \"sort\"]\nset limit [$search get \"limit\"]\n$search put \"sortBy\" $sort\n$search put \"resultSize\" $limit\n$search remove \"sort\"\n$search remove \"limit\"\nset returnFields false\nset fieldList [$search get \"fields\"]\nset is_fieldList_null [java::isnull $fieldList]\nif {$is_fieldList_null == 0} {\n$search remove \"fields\"\nset returnFields true\n}\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset obj_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nif {$returnFields} {\nset obj [convert_graph_node $graph_node $def_node $fieldList]\n} else {\nset obj [convert_graph_node $graph_node $def_node]\n}\n$obj_list add $obj\n}\nset result_map [java::new HashMap]\n$result_map put \"object_list\" $obj_list\nset response_list [create_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "search", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false }, { "name" : "object_type", "index" : 2, "routing_param" : true } ], "request_path" : { "type" : "POST", "url" : "/v2/object/search/*/*", "path_params" : [ "graph_id", "object_type" ] } }
,{ "_id" : { "$oid" : "57a4af22e4b0f7f097918556" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createReference", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Reference\"\nset graph_id \"domain\"\nset create_response [createObject $graph_id $reference $object_type]\nreturn $create_response", "type" : "SCRIPT", "parameters" : [ { "name" : "reference", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/reference" } }
,{ "_id" : { "$oid" : "57a4af26e4b0f7f097918557" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateReference", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Reference\"\nset graph_id \"domain\"\nset update_response [updateObject $graph_id $reference $object_type $reference_id]\nreturn $update_response", "type" : "SCRIPT", "parameters" : [ { "name" : "reference", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false }, { "name" : "reference_id", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "PATCH", "url" : "/v2/reference/*", "path_params" : [ "reference_id" ] } }
,{ "_id" : { "$oid" : "57a4af33e4b0f7f097918558" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getReference", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Reference\"\nset graph_id \"domain\"\nset get_node_response [getObject $graph_id $object_type $reference_id]\nset reference_object [get_resp_value $get_node_response \"object\"]\nset result_map [java::new HashMap]\n$result_map put \"reference\" $reference_object\nset api_response [create_response $result_map]\nreturn $api_response", "type" : "SCRIPT", "parameters" : [ { "name" : "reference_id", "datatype" : "java.lang.String", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/reference/*", "path_params" : [ "reference_id" ] } }
,{ "_id" : { "$oid" : "57a4af3ae4b0f7f097918559" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getAllReferences", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Reference\"\nset graph_id \"domain\"\nset get_node_response [getAllObjects $graph_id $object_type]\nset reference_object [get_resp_value $get_node_response \"object_list\"]\nset result_map [java::new HashMap]\n$result_map put \"references\" $reference_object\nset api_response [create_response $result_map]\nreturn $api_response", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "GET", "url" : "/v2/reference" } }
,{ "_id" : { "$oid" : "57a4af40e4b0f7f09791855a" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "searchReferences", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Reference\"\nset graph_id \"domain\"\nset get_node_response [searchObjects $graph_id $search $object_type]\nset reference_object [get_resp_value $get_node_response \"object_list\"]\nset result_map [java::new HashMap]\n$result_map put \"references\" $reference_object\nset api_response [create_response $result_map]\nreturn $api_response", "type" : "SCRIPT", "parameters" : [ { "name" : "search", "datatype" : "java.util.HashMap", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/reference/search" } }
,{ "_id" : { "$oid" : "57c96e06e4b0a05aa28e4add" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_qe_retireRelatedWords", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nset graph_id \"hi\"\nset object_type \"Synset\"\nset synsetId \"hi:S:00007522\"\nset resp_get_node [getDataNode $graph_id $synsetId]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset outRelations [java::prop $graph_node \"outRelations\"]\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"endNodeObjectType\"] == \"Word\"} {\nset wordId [java::prop $relation \"endNodeId\"]\nputs \"retiring word : $wordId\"\nset wordNode [java::new Node $wordId \"DATA_NODE\" \"Word\"]\njava::prop $wordNode \"graphId\" $graph_id\nset wordMetadata [java::new HashMap]\n$wordMetadata put \"status\" \"Retired\"\njava::prop $wordNode \"metadata\" $wordMetadata\nset update_response [updateDataNode $graph_id $wordId $wordNode]\nset check_error [check_response_error $update_response]\nif {$check_error} {\nset messages [get_resp_value $update_response \"messages\"]\njava::for {String msg} $messages {\nputs \"$item_id - $msg\"\n}\n}\n}\n}\nreturn \"Updation Complete\"\n}", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/lang_qe_retireRelatedWords" } }
,{ "_id" : { "$oid" : "57d181f3eb12976da8718533" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_changeItemOwner", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nproc proc_isNumeric {value} {\nset exist false\nset is_null [java::isnull $value]\nif {$is_null == 1} {\nreturn $exist\n} else {\njava::try {\nset string [java::call Double parseDouble [$value toString]]\nset exist true\n} catch {Exception err} {\nset exist false\n}\nreturn $exist\n}\n}\nset object_type \"AssessmentItem\"\nset graph_id \"domain\"\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $object_type\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset item_id [java::prop $graph_node \"identifier\"]\nset metadata [java::prop $graph_node \"metadata\"]\nset owner [$metadata get \"owner\"]\nset portalOwner [$metadata get \"portalOwner\"]\nset owner_null [java::isnull $owner]\nset portalOwner_null [java::isnull $portalOwner]\nif {$owner_null == 0 && $portalOwner_null == 1} {\nset isNumeric [proc_isNumeric $owner]\nif {$isNumeric} {\nset str_owner [$owner toString]\nputs \"updating item: $item_id | owner - $str_owner\"\n$metadata put \"portalOwner\" $owner\nset update_response [updateDataNode $graph_id $item_id $graph_node]\nset check_error [check_response_error $update_response]\nif {$check_error} {\nset messages [get_resp_value $update_response \"messages\"]\njava::for {String msg} $messages {\nputs \"$item_id - $msg\"\n}\n}\n}\n}\n}\n}\nreturn \"Updation Complete\"", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_changeItemOwner" } }
,{ "_id" : { "$oid" : "57d18257eb12976da890ddac" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "execute_commands_concurrently", "type" : "COMMAND", "command_class" : "com.ilimi.orchestrator.interpreter.command.ExecuteConcurrentCommands" }
,{ "_id" : { "$oid" : "57d182c6eb12976da890ddc7" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "convert_jsonstring_to_map", "type" : "COMMAND", "command_class" : "com.ilimi.orchestrator.interpreter.command.convertJSONStringToMap" }
,{ "_id" : { "$oid" : "57d182c6eb12976da890ddc8" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "sort_maps", "type" : "COMMAND", "command_class" : "com.ilimi.orchestrator.interpreter.command.SortMaps" }
,{ "_id" : { "$oid" : "57d182c7eb12976da890ddc9" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "indexSearch", "type" : "COMMAND", "parameters" : [ { "name" : "traversals", "datatype" : "java.util.ArrayList", "index" : 0, "routing_param" : false }, { "name" : "query", "datatype" : "java.lang.String", "index" : 1, "routing_param" : false }, { "name" : "filters", "datatype" : "java.util.HashMap", "index" : 2, "routing_param" : false }, { "name" : "exists", "datatype" : "java.util.ArrayList", "index" : 3, "routing_param" : false }, { "name" : "not_exists", "datatype" : "java.util.ArrayList", "index" : 4, "routing_param" : false }, { "name" : "sort_by", "datatype" : "java.util.HashMap", "index" : 5, "routing_param" : false }, { "name" : "facets", "datatype" : "java.util.ArrayList", "index" : 6, "routing_param" : false }, { "name" : "fuzzy", "datatype" : "java.lang.Boolean", "index" : 7, "routing_param" : false }, { "name" : "limit", "datatype" : "java.lang.Integer", "index" : 8, "routing_param" : false } ], "actor_path" : { "manager" : "SEARCH_MANAGER", "operation" : "INDEX_SEARCH", "router" : "SEARCH_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "57d182c9eb12976da890ddca" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "groupSearchResultByObjectType", "type" : "COMMAND", "parameters" : [ { "name" : "searchResult", "datatype" : "java.util.HashMap", "index" : 0, "routing_param" : false } ], "actor_path" : { "manager" : "SEARCH_MANAGER", "operation" : "GROUP_SEARCH_RESULT_BY_OBJECTTYPE", "router" : "SEARCH_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "57d182d2eb12976da890ddcb" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "get_weightages_map", "type" : "COMMAND", "command_class" : "com.ilimi.orchestrator.interpreter.command.GetWeightagesMap" }
,{ "_id" : { "$oid" : "57d182d3eb12976da890ddcc" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "traversePaths", "type" : "COMMAND", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "traversal_description", "datatype" : "com.ilimi.graph.dac.model.Traverser", "index" : 1, "routing_param" : false } ], "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.SearchManagerImpl", "operation" : "traverse", "router" : "GRAPH_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "57d182d5eb12976da890ddcd" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "get_traverser", "type" : "COMMAND", "command_class" : "com.ilimi.orchestrator.interpreter.command.GetTraverser" }
,{ "_id" : { "$oid" : "57d18315eb12976da890ddd3" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getWordChains", "body" : "#Invokes the rule script and forms the final word chains response\n#Input\n# 1. Graph Id - language\n# 2. Rule object - Map<String, Object>\n# 3. Search Result - (List<Map<String, Object>>) (List of words)\n# 4. Word Chains Limit\n#\n#Output\n# 1. Words - List<Map<String, Object>> - List of word objects\n# 2. Relations - List<Map<String, Object>> - List of word chains\npackage require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package java.util HashSet Set\njava::import -package com.ilimi.graph.dac.model Node\n#get ruleScript name from the rule Object\nset ruleScript [$ruleObject get \"ruleScript\"]\nset ruleScriptString [$ruleScript toString]\n#invoke ruleScript\n#ex: getAksharaRuleWordChains tcl script\n#Input:\n#1. Graph Id (language)\n#2. Rule Object (Map<String, Object>)\n#3. Search Result (List<Map<String, Object>>) (List of words)\n#4. Word Chains Limit\n#\n#Output\n# 1. Word Chains - List<Map<String, Object>>\n# ex: [\n#       {\n#\t\t\t\"title\": \"A T\",\n#\t\t\t\"list\": [\"en_1\", \"en_2\"],\n#\t\t\t\"score\": 2.0,\n#\t\t\t\"relation\": \"Akshara\"\n#\t\t}\n#     ]\nset wordChainsResponse [$ruleScriptString $graphId $ruleObject $searchResult $wordChainsLimit]\nset relations [$wordChainsResponse get \"relations\"]\nset words [$wordChainsResponse get \"words\"]\nset isRelationsNull [java::isnull $relations]\nset isWordsNull [java::isnull $words]\nif {$isRelationsNull == 0 || $isWordsNull == 0} {\nreturn $wordChainsResponse\n} else {\nset finalWordChains [$wordChainsResponse get \"result\"]\n#collect unique words from the result\nset finalWordIds [java::new HashSet]\njava::for {Map wordChain} $finalWordChains {\nset wordIdsObject [$wordChain get \"list\"]\nset wordIds [java::cast ArrayList $wordIdsObject]\n$finalWordIds addAll $wordIds\n}\nset wordChainWords [java::new ArrayList]\nset wordIdMap [java::new HashMap]\n#form WordId to Word Object Map\njava::for {Map word} $searchResult {\nset id [$word get \"identifier\"]\n$wordIdMap put $id $word\n}\n# form word objects list from list of unique words\njava::for {String wordId} $finalWordIds {\nset wordFromMap [$wordIdMap get $wordId]\n$wordChainWords add $wordFromMap\n}\n# create word chains response\nset resp_object [java::new HashMap]\n$resp_object put \"words\" $wordChainWords\n$resp_object put \"relations\" $finalWordChains\nset response [create_response $resp_object]\nreturn $response\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "graphId", "index" : 0, "routing_param" : false }, { "name" : "ruleObject", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false }, { "name" : "searchResult", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false }, { "name" : "wordChainsLimit", "datatype" : "java.lang.Integer", "index" : 3, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/language/wordChains" } }
,{ "_id" : { "$oid" : "57d18317eb12976da890ddd4" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "langugeSearch", "body" : "#This script acts as the entry point for langugae search\n#Input: Query, Filters, exists, not_exits, facets, sort_by and limit\n#Output: Search results, if its not a word chain request; Word chains (words and relations) if its a word chain request\npackage require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset objectType [java::null]\nset graphId \"domain\"\nset wordChains_limit 0\nset ruleNode [java::null]\nset weightagesMap [java::new HashMap]\nset baseConditions [java::new HashMap]\nset fuzzySearch \"false\"\nset wordChainsQuery \"false\"\nset languageIdSize 0\nset request_map [java::new HashMap]\nset wordChainsLimit 10\nset traversalRuleDefinition \"TraversalRule\"\nset weightagesMap [java::new HashMap]\n# check if its a fuzzy search\nset isFuzzyNull [java::isnull $fuzzy]\nif {$isFuzzyNull == 0} {\nset fuzzyString [$fuzzy toString]\nset fuzzySearch $fuzzyString\n}\n# check if its a traversal based search\nset isTraversalIdNull [java::isnull $traversals]\nif {$isTraversalIdNull == 0} {\n# set fuzzySearch \"true\"\nset wordChainsQuery \"true\"\nset traversalsSize [$traversals size]\nif {$traversalsSize > 0} {\nset traversalId [$traversals get 0]\n}\n}\nset isLimitNull [java::isnull $limit]\nif {$isLimitNull == 0} {\nset wordChainsLimit $limit\n}\nset isFiltersNull [java::isnull $filters]\nif {$isFiltersNull == 1} {\nset filters [java::new HashMap]\n}\nset languageIdObj [$filters get \"language_id\"]\nset languageId [java::cast ArrayList $languageIdObj]\n# Set Graph Id from filter\nset isLanguageIdNull [java::isnull $languageId]\nif {$isLanguageIdNull == 0} {\nset languageIdSize [$languageId size]\nif {$languageIdSize > 0} {\nset language [$languageId get 0]\nset graphId $language\n}\n$filters remove \"language_id\"\n$filters put \"graph_id\" $languageIdObj\n}\nif {$isLanguageIdNull == 1 || $languageIdSize == 0} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_INVALID_REQUEST\"\n$result_map put \"message\" \"At least one language Id is mandatory\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n#copy request parameters for Search request\n$request_map put \"query\" $query\n$request_map put \"exists\" $exists\n$request_map put \"not_exists\" $not_exists\n$request_map put \"sort_by\" $sort_by\n$request_map put \"facets\" $facets\n$request_map put \"limit\" $limit\n$request_map put \"fuzzy\" $fuzzy\n# enhance request object for traversal\nif {$wordChainsQuery == \"true\"} {\n$request_map put \"traversal\" [java::new Boolean \"true\"]\n#get rule node for traversal\nset get_rule_response [getDataNode $graphId $traversalId]\nset get_rule_response_error [check_response_error $get_rule_response]\nif {$get_rule_response_error} {\nreturn $get_rule_response\n}\nset ruleNode [get_resp_value $get_rule_response \"node\"]\nset rule_def_node [getDefinition $graphId $traversalRuleDefinition]\nset def_node [get_resp_value $rule_def_node \"definition_node\"]\nset ruleObject [convert_graph_node $ruleNode $def_node]\nset ruleMetadata [$ruleNode getMetadata]\n#get objectType from rule node\nset objectType [$ruleObject get \"ruleObjectType\"]\nset isObjectTypeNull [java::isnull $objectType]\nif {$isObjectTypeNull == 0} {\n$filters put \"objectType\" $objectType\n}\nset searchResultsLimit [$ruleObject get \"maxWords\"]\nset limit $searchResultsLimit\n}\n#add the updated filters back to the request\n$request_map put \"filters\" $filters\n#do the search on elasticsearch\nset searchResponse [indexSearch $traversals $query $filters $exists $not_exists $sort_by $facets $fuzzy $limit]\nset searchResultsMap [$searchResponse getResult]\n#if its not a traversal search, group results by object type and return\nif {$wordChainsQuery == \"false\"} {\nset compositeSearchResponse [groupSearchResultByObjectType $searchResultsMap]\nreturn $compositeSearchResponse\n}\n#if its a traversal search, retreive results and form word chains\nset words [$searchResultsMap get \"results\"]\nset wordChainResponse [getWordChains $graphId $ruleObject $words $wordChainsLimit]\nreturn $wordChainResponse", "type" : "SCRIPT", "parameters" : [ { "name" : "traversals", "datatype" : "java.util.ArrayList", "index" : 0, "routing_param" : false }, { "name" : "query", "datatype" : "java.lang.String", "index" : 1, "routing_param" : false }, { "name" : "filters", "datatype" : "java.util.HashMap", "index" : 2, "routing_param" : false }, { "name" : "exists", "datatype" : "java.util.ArrayList", "index" : 3, "routing_param" : false }, { "name" : "not_exists", "datatype" : "java.util.ArrayList", "index" : 4, "routing_param" : false }, { "name" : "sort_by", "datatype" : "java.util.HashMap", "index" : 5, "routing_param" : false }, { "name" : "facets", "datatype" : "java.util.ArrayList", "index" : 6, "routing_param" : false }, { "name" : "fuzzy", "datatype" : "java.lang.Boolean", "index" : 7, "routing_param" : false }, { "name" : "limit", "datatype" : "java.lang.Integer", "index" : 8, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/language/search" } }
,{ "_id" : { "$oid" : "57d18320eb12976da890ddd5" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getAksharaRuleWordChains", "body" : "#This script does the following\n# 1. Create traversal description using relations\n# 2. Traverses the graph and returns paths\n# 3. Scores the paths\n# 4. Creates word chain response\n# 5. Sorts results based on score in desc order\n# 6. returns results\n#\n#Input:\n#1. Graph Id (language)\n#2. Rule Object (Map<String, Object>)\n#3. Search Result (List<Map<String, Object>>) (List of words)\n#4. Word Chains Limit\n#\n#Output\n# 1. Word Chains - List<Map<String, Object>>\n# ex: [\n#       {\n#\t\t\t\"title\": \"A T\",\n#\t\t\t\"list\": [\"en_1\", \"en_2\"],\n#\t\t\t\"score\": 2.0,\n#\t\t\t\"relation\": \"Akshara\"\n#\t\t}\n#     ]\npackage require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package java.util HashSet Set\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.graph.dac.model Path\njava::import -package org.ekstep.language.wordchain.evaluators WordIdEvaluator\n#given a path, word scores and relation, scores the word chain\n#and forms the word chain data structure\nproc processPath {finalPath wordScore relation wordChainSet} {\nset wordChain [java::new ArrayList]\nset totalScore 0\nset averageScore 0.0\nset chainLength 0\nset wordChainRecord [java::new HashMap]\nset title \"\"\nset pathNodes [$finalPath getNodes]\nset wordObjectType \"Word\"\njava::for {Node node} $pathNodes {\nset nodeMetadata [$node getMetadata]\nset nodeObjectType [$node getObjectType]\nset pb \"No\"\nset objectTypeEqualsWordString \"false\"\nif {$nodeObjectType == \"Word\"} {\nset objectTypeEqualsWordString \"true\"\n} else {\nset pb \"Yes\"\n}\n#set objectTypeEqualsWord [$nodeObjectType equalsIgnoreCase $wordObjectType]\n#set objectTypeEqualsPB [$nodeObjectType equalsIgnoreCase \"Phonetic_Boundary\"]\n#set objectTypeEqualsWordString [$objectTypeEqualsWord toString]\nif {$objectTypeEqualsWordString == \"true\"} {\nset nodeIdentifier [$node getIdentifier]\nset wordChainContains [$wordChain contains $nodeIdentifier]\nif {$wordChainContains == 1} {\nreturn;\n}\n$wordChain add $nodeIdentifier\nset score [$wordScore get $nodeIdentifier]\nset scoreString [$score toString]\nset totalScore [expr $totalScore + $scoreString]\nset chainLength [expr $chainLength + 1]\n}\n}\nset wordChainSize [$wordChain size]\nif {$wordChainSize == 0} {\nreturn [java::null]\n}\nset wordChainString [$wordChain toString]\nset wordChainSetContains [$wordChainSet contains $wordChainString]\nif {$wordChainSetContains == 1} {\nreturn [java::null]\n} else {\n$wordChainSet add $wordChainString\n}\n#form word chain structure\nset averageScore [expr $totalScore/$chainLength]\n#$wordChainRecord put \"title\" $title\n$wordChainRecord put \"list\" $wordChain\n$wordChainRecord put \"score\" $averageScore\n$wordChainRecord put \"relation\" $relation\nreturn $wordChainRecord\n}\nset wordChainSet [java::new HashSet]\nset maxDefinedDepthObj [$ruleObject get \"maxChainLength\"]\nset maxDefinedDepth [$maxDefinedDepthObj toString]\nset minDefinedDepthObj [$ruleObject get \"minChainLength\"]\nset minDefinedDepth [$minDefinedDepthObj toString]\nset startWordsSize [$ruleObject get \"startWordsSize\"]\nset ruleType [$ruleObject get \"identifier\"]\nset ruleScript [$ruleObject get \"ruleScript\"]\nset wordsSize [$searchResult size]\nset startWordsSizeString [$startWordsSize toString]\n#get the top words\nif {$wordsSize > $startWordsSizeString} {\nset topWords [$searchResult subList 0 $startWordsSize]\n} else {\nset topWords $searchResult\n}\nset ids [java::new ArrayList]\nset wordScore [java::new HashMap]\nset wordIdMap [java::new HashMap]\n# form wordId to Word Object Map\n# form wordId to Score Map\njava::for {Map word} $searchResult {\nset id [$word get \"identifier\"]\n$ids add $id\nset score [$word get \"score\"]\nset isScoreNull [java::isnull $score]\nif {$isScoreNull == 1} {\nset score 1.0\n}\n$wordScore put $id $score\n$wordIdMap put $id $word\n}\nset wordChains [java::new ArrayList]\n# the no of nodes after start node that forms a chain of two words is 3 for Phonetic boundary\n# increase the min and max length to include the internal nodes\nset maxDepth [expr {3 * ($maxDefinedDepth-1)}]\nset minDepth [expr {3 * ($minDefinedDepth-1)}]\n#create a list of relations in the required traversal order\nset relationTypes [java::new ArrayList]\n$relationTypes add \"hasMember\"\n$relationTypes add \"follows\"\n$relationTypes add \"hasMember\"\n#create a list of dierctions in the required traversal order\nset directions [java::new ArrayList]\n$directions add \"INCOMING\"\n$directions add \"OUTGOING\"\n$directions add \"OUTGOING\"\nset nodeCount 3\n#create path expander using relations and directions list\nset pathExpander [java::new HashMap]\n$pathExpander put \"relationTypes\" $relationTypes\n$pathExpander put \"directions\" $directions\n$pathExpander put \"nodeCount\" $nodeCount\n# Unique constraints for traversal\nset traversalUniqueness [java::new ArrayList]\n$traversalUniqueness add \"NODE_GLOBAL\"\n$traversalUniqueness add \"RELATIONSHIP_GLOBAL\"\nset wordIdEval [java::new WordIdEvaluator $ids]\nset evaluators [java::new ArrayList]\n$evaluators add $wordIdEval\n#create traversal request\nset traversalRequest [java::new HashMap]\n$traversalRequest put \"pathExpander\" $pathExpander\n$traversalRequest put \"uniqueness\" $traversalUniqueness\n$traversalRequest put \"minLength\" $minDepth\n$traversalRequest put \"maxLength\" $maxDepth\n$traversalRequest put \"evaluators\" $evaluators\njava::for {Map topWord} $topWords {\nset topWordIdObject [$topWord get \"identifier\"]\nset topWordId [$topWordIdObject toString]\nset get_node_response [getDataNode $graphId $topWordId]\nset get_node_response_error [check_response_error $get_node_response]\nif {!$get_node_response_error} {\n$traversalRequest put \"startNodeId\" $topWordId\nset traverser [get_traverser $graphId $traversalRequest]\nset resp_traverse [traversePaths $graphId $traverser]\nset check_error [check_response_error $resp_traverse]\nif {$check_error} {\nset respstr [$resp_traverse toString]\nputs \"response - $respstr\"\nset params [java::prop $resp_traverse \"params\"]\nset err [java::prop $params \"errmsg\"]\nputs \"errmsg - $err\"\nreturn [java::new ArrayList];\n}\n#get paths from traversals\nset subGraph [get_resp_value $resp_traverse \"sub_graph\"]\nset paths [$subGraph getPaths]\njava::for {Path finalPath} $paths {\nset wordChain [processPath $finalPath $wordScore $ruleType $wordChainSet]\nif {$wordChain != \"\"} {\nset isWordChainNull [java::isnull $wordChain]\nif {$isWordChainNull == 0} {\n$wordChains add $wordChain\n}\n}\n}\n}\n}\n#sort the chains in desc by score\nset sortedWordChains [sort_maps $wordChains \"score\" \"DESC\"]\nset finalWordChains [java::new ArrayList]\nset wordChainsSize [$sortedWordChains size]\nset wordChainsLimitString [$wordChainsLimit toString]\nif { $wordChainsSize > $wordChainsLimitString} {\nset finalWordChains [$sortedWordChains subList 0 $wordChainsLimit]\n} else {\nset finalWordChains $sortedWordChains\n}\nreturn $finalWordChains", "type" : "SCRIPT", "parameters" : [ { "name" : "graphId", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false }, { "name" : "ruleObject", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false }, { "name" : "searchResult", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false }, { "name" : "wordChainsLimit", "datatype" : "java.lang.Integer", "index" : 3, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/language/wordChains/aksharaRule" } }
,{ "_id" : { "$oid" : "57d18322eb12976da890ddd6" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getRhymingRuleWordChains", "body" : "#This script does the following\n# 1. Create word chain list based on minimum and maximum word chain length with average score\n# 2. Sorts results based on score in desc order\n# 3. returns results\n#\n#Input:\n#1. Graph Id (language)\n#2. Rule Object (Map<String, Object>)\n#3. Search Result (List<Map<String, Object>>) (List of words)\n#4. Word Chains Limit\n#\n#Output\n# 1. Word Chains - List<Map<String, Object>>\n# ex: [\n#       {\n#\t\t\t\"list\": [\"en_1\", \"en_2\"],\n#\t\t\t\"score\": 2.0,\n#\t\t\t\"relation\": \"rhyming_boundary_rule\"\n#\t\t }\n#    ]\npackage require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package java.util HashSet Set\njava::import -package com.ilimi.graph.dac.model Node Relation\n#function to check whether list is empty or not\nproc isNotEmpty {list} {\nset exist false\nset isListNull [java::isnull $list]\nif {$isListNull == 0} {\nset listSize [$list size]\nif {$listSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\n#function to get wordChains based on RhymingSound set and min/max chainLength\nproc getRhymingsoundWordChains {rhymingSoundSetId graphId validWordIds wordScore minChainLength maxChainLength ruleName} {\nset totalScore 0\nset averageScore 0.0\n# chainLength holds current word chain length\nset chainLength 0\n# wordChains is list\nset wordChains [java::new ArrayList]\n# getSetMembers of given RhymingSound set\nset setResponse [getSetMembers $graphId [$rhymingSoundSetId toString]]\n# check whether getSetMembers response is success or error\nset check_error [check_response_error $setResponse]\nif {$check_error} {\n# return null as the response is error\nreturn [java::null]\n} else {\n# get members from getSetMembers response\nset rhymingSoundMembers [get_resp_value $setResponse \"members\"]\nset wordChain [java::new ArrayList]\n# loop through for each member of RhymingSound set\njava::for {String memberID} $rhymingSoundMembers {\n# check whether the member of rhymingSound set is exist in search result(validWordIds)\nset validMember [$validWordIds contains $memberID]\nif {$validMember == 1} {\n# add rhymingSound member into wordChain list\n$wordChain add $memberID\n# compute totalScore by adding the new member score\nset score [$wordScore get $memberID]\nset scoreString [$score toString]\nset totalScore [expr $totalScore + $scoreString]\n# increment chainLength by 1\nset chainLength [expr $chainLength + 1]\n}\n# freeze wordChain and add it into list(wordChains) if its length crossed max_chain_length\nif {$chainLength >= $maxChainLength} {\n# compute average score\nset averageScore [expr $totalScore/$chainLength]\nset wordChainRecord [java::new HashMap]\n$wordChainRecord put \"list\" $wordChain\n$wordChainRecord put \"score\" $averageScore\n$wordChainRecord put \"relation\" $ruleName\n# add current wordChain into wordChains list\n$wordChains add $wordChainRecord\n# remove the member from ValidWordIDS as to avoid processing them again in main function\nset removed [$validWordIds removeAll $wordChain]\n# reset wordChain, length and score variables\nset wordChain [java::new ArrayList]\nset chainLength 0\nset totalScore 0\n}\n# end of the loop\n}\n# current chain length is less than min_chain_length ignore them, return existing wordChains\nif {$chainLength < $minChainLength} {\nreturn $wordChains\n}\n# add wordchain into existing wordChains and return wordChains\nset averageScore [expr $totalScore/$chainLength]\nset wordChainRecord [java::new HashMap]\n$wordChainRecord put \"list\" $wordChain\n$wordChainRecord put \"score\" $averageScore\n$wordChainRecord put \"relation\" $ruleName\n$wordChains add $wordChainRecord\n# remove the member from ValidWordIDS as to avoid processing them again in main function\nset removed [$validWordIds removeAll $wordChain]\nreturn $wordChains\n}\n}\n# function to get RhymingSoundSet of given word\nproc getRhymingSoundSet {word} {\n# get inRelations of given word\nset inRelations [java::prop $word \"inRelations\"]\nset hasRelations [isNotEmpty $inRelations]\nif {$hasRelations} {\njava::for {Relation relation} $inRelations {\n# if relation is of type 'hasMember' and startNode is of ObjectType 'WordSet'  and of type 'RhymingSound'\n# return that start_node_id as rhymingSoundId\nset relationType [java::prop $relation \"relationType\"]\nset startNodeMetadata [java::prop $relation \"startNodeMetadata\"]\nset startNodeFuncObjectType [$startNodeMetadata get \"IL_FUNC_OBJECT_TYPE\"]\nset startNodeWordSetType [$startNodeMetadata get \"type\"]\nset isStartNodeWordSetTypeNull [java::isnull $startNodeWordSetType]\nif {($relationType == \"hasMember\") && ([$startNodeFuncObjectType toString] == \"WordSet\") &&\n($isStartNodeWordSetTypeNull == 0) && ([$startNodeWordSetType toString] == \"RhymingSound\")} {\nset rhymingSoundSetId [java::prop -noconvert $relation \"startNodeId\"]\nreturn [java::cast String $rhymingSoundSetId]\n}\n}\n}\nreturn [java::null]\n}\n# get maxChainLength from rule object and set it as maxChainLength\nset maxChainLengthObj [$ruleObject get \"maxChainLength\"]\nset maxChainLength [$maxChainLengthObj toString]\n# get minChainLength from rule object and set it as minChainLength\nset minChainLengthObj [$ruleObject get \"minChainLength\"]\nset minChainLength [$minChainLengthObj toString]\n# get startWordsSize from rule object and set it as startWordsSize(No of words to start from search result)\nset startWordsSize [$ruleObject get \"startWordsSize\"]\nset startWordsSizeString [$startWordsSize toString]\n# get searchResult size and set it as wordsSize\nset wordsSize [$searchResult size]\n# set topWordCount as minimum of startWordSize or wordsSize\nif {$wordsSize > $startWordsSizeString} {\nset topWordCount $startWordsSizeString\n} else {\nset topWordCount $wordsSize\n}\nset validWordIds [java::new ArrayList]\nset wordScore [java::new HashMap]\nset wordIdMap [java::new HashMap]\n# loop through searchResult and prepare ValidWordIDS list, WordScore Map and WordIDMap\n# ValidWordIDS has all search result words IDs\n# WordScore map contains key value pair as wordId and Score\n# WordIDMap map contains key value pair as wordId and Word Object\njava::for {Map word} $searchResult {\nset id [$word get \"identifier\"]\n# add Id into validWordIds list\n$validWordIds add $id\n# add score against id in wordScore map\nset score [$word get \"score\"]\nset isScoreNull [java::isnull $score]\nif {$isScoreNull == 1} {\nset score 1.0\n}\n$wordScore put $id $score\n# get WordNode based on its id\nset nodeRespone [getDataNode $graphId $id]\nset check_error [check_response_error $nodeRespone]\nif {$check_error} {\n#remove wordId from validWordIds if word is not found\n$validWordIds remove $id\n} else {\nset wordNode [get_resp_value $nodeRespone \"node\"]\n# add wordNode against id in wordIDMap\n$wordIdMap put $id $wordNode\n}\n}\n# set listSize as search result words count\nset listSize [$validWordIds size]\nset wordChainCollection [java::new ArrayList]\n# set ruleName from Rule Object indetifier for setting it word chain result\nset ruleName [$ruleObject get \"identifier\"]\n# count holds values of current iteration\nset count 0\n# loop until count not reached to topWordCount and listSize is not reduced to count\nwhile { ($topWordCount > $count) && ($listSize > $count) } {\n# get id from master search result(ValidWordIds)\nset id [$validWordIds get $count]\n# get word Object from wordIdMap and cast it to Node type\nset wordObj [$wordIdMap get $id]\nset wordNode [java::cast Node $wordObj]\n# call getRhymingSoundSet procedure to get rhymingSound setId\nset rhymingSoundSetId [getRhymingSoundSet $wordNode]\n# check rhymingSoundSetId is not null\nset isRhymingSoundSetIdNull [java::isnull $rhymingSoundSetId]\n# 0 is false and 1 is true in the above statement\nif {$isRhymingSoundSetIdNull == 0} {\n# get wordChains of rhymingSound\nset wordChains [getRhymingsoundWordChains $rhymingSoundSetId $graphId $validWordIds $wordScore $minChainLength $maxChainLength $ruleName]\nset hasWordChain [isNotEmpty $wordChains]\nif { $hasWordChain } {\n# add all wordChains into wordChainCollection\n$wordChainCollection addAll $wordChains\n}\n}\n#increment count by 1\nset count [expr $count + 1 ]\n#get current size of validWordIds and set it as listSize\nset listSize [$validWordIds size]\n}\n# sort the wordChains based on score(average)\nset sortedWordChains [sort_maps $wordChainCollection \"score\" \"DESC\"]\nset finalWordChains [java::new ArrayList]\nset wordChainsSize [$sortedWordChains size]\nset wordChainsLimitString [$wordChainsLimit toString]\nif { $wordChainsSize > $wordChainsLimitString} {\n# sublist sortedWordChains based on given wordChainsLimit\nset finalWordChains [$sortedWordChains subList 0 $wordChainsLimit]\n} else {\nset finalWordChains $sortedWordChains\n}\nreturn $finalWordChains", "type" : "SCRIPT", "parameters" : [ { "name" : "graphId", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false }, { "name" : "ruleObject", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false }, { "name" : "searchResult", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false }, { "name" : "wordChainsLimit", "datatype" : "java.lang.Integer", "index" : 3, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/language/wordChains/rhymingSound" } }
,{ "_id" : { "$oid" : "57d651eceb12976da890ddd7" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_qe_update_varna_cache", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package org.ekstep.language.cache VarnaCache\nset cache [java::call VarnaCache getInstance]\n$cache loadVarnas $language_id", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/lang_qe_update_varna_cache" } }
,{ "_id" : { "$oid" : "57d6c048eb12976da890ddd8" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_qe_get_live_words", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Word\"\nset map [java::new HashMap]\n$map put \"objectType\" $object_type\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"status\" \"Live\"\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset list [java::new ArrayList]\njava::for {Node node} $graph_nodes {\nset identifier [java::prop $node \"identifier\"]\nset metadata [java::prop $node \"metadata\"]\nset map [java::new HashMap]\n$map put \"identifier\" $identifier\n$map put \"lemma\" [$metadata get \"lemma\"]\n$map put \"primaryMeaningId\" [$metadata get \"primaryMeaningId\"]\n$list add $map\n}\nreturn $list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/lang_qe_get_live_words" } }
,{ "_id" : { "$oid" : "57d8ee80eb12976da890ddd9" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createUniqueConstraint", "type" : "COMMAND", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "property_keys", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false } ], "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.GraphMgrImpl", "operation" : "createUniqueConstraint", "router" : "GRAPH_REQUEST_ROUTER" }, "request_path" : { "type" : "POST", "url" : "/v1/graph/*/createUniqueConstraint", "path_params" : [ "graph_id" ] } }
,{ "_id" : { "$oid" : "57d8ee84eb12976da890ddda" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createIndex", "type" : "COMMAND", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "property_keys", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false } ], "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.GraphMgrImpl", "operation" : "createIndex", "router" : "GRAPH_REQUEST_ROUTER" }, "request_path" : { "type" : "POST", "url" : "/v1/graph/*/createIndex", "path_params" : [ "graph_id" ] } }
,{ "_id" : { "$oid" : "57d9775feb12971d5cd625ff" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_resetAssetAttributions", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Content\"\nset graph_id \"domain\"\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $object_type\nset contentTypes [java::new ArrayList]\n$contentTypes add \"Asset\"\n$map put \"contentType\" $contentTypes\n$map put \"owner\" \"ekstep\"\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset asset_id [java::prop $graph_node \"identifier\"]\nset metadata [java::prop $graph_node \"metadata\"]\nset owner [$metadata get \"owner\"]\nset owner_null [java::isnull $owner]\nif {$owner_null == 0} {\n$metadata put \"owner\" [java::null]\nputs \"updating asset: $asset_id\"\nset update_response [updateDataNode $graph_id $asset_id $graph_node]\nset check_error [check_response_error $update_response]\nif {$check_error} {\nset messages [get_resp_value $update_response \"messages\"]\njava::for {String msg} $messages {\nputs \"$asset_id - $msg\"\n}\n}\n}\n}\n}\nreturn \"Updation Complete\"", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_resetAssetAttributions" } }
,{ "_id" : { "$oid" : "57dff617eb12971d5cb1f50a" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getWordChainsByIndex", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package java.util HashSet Set\njava::import -package java.util Collection\njava::import -package com.ilimi.graph.dac.model Node Relation\n# java::import -package org.apache.commons.lang3.StringUtils\n# function to get character/unicode at any given index position\nproc characterAt {word index graphId} {\nif {[$graphId toString] == \"en\"} {\nset metadata [java::prop $word \"metadata\"]\nset wordText [$metadata get \"lemma\"]\nset wordText [java::cast String $wordText]\nset wordlength [$wordText length]\nif {$index == 999} {\nset index [expr $wordlength - 1 ]\n}\nif {$index >= $wordlength} {\nreturn \"\"\n}\nset character [java::call String valueOf [$wordText charAt $index]]\nreturn $character\n} else {\nset metadata [java::prop $word \"metadata\"]\nset unicodeNotation [$metadata get \"unicodeNotation\"]\nset unicodeNotation [java::cast String $unicodeNotation]\nset syllables [$unicodeNotation split \"\\\\s+\"]\nset arr_instance [java::instanceof $syllables {String[]}]\nif {$arr_instance == 1} {\nset syllables [java::cast {String[]} $syllables]\nset syllablesLength [$syllables length]\nif {$index == 999} {\nset index [expr $syllablesLength - 1 ]\n}\nif {$index >= $syllablesLength} {\nreturn \"\"\n}\nset syllable [$syllables get $index]\nset syllable [java::new String $syllable]\nset syllableUnicodes [$syllable split \"\\\\\\\\\" ]\nset arr_instance [java::instanceof $syllableUnicodes {String[]}]\nset firstUnicode \"\"\nif {$arr_instance == 1} {\nset syllableUnicodes [java::cast {String[]} $syllableUnicodes]\nif { [$syllableUnicodes length] > 1} {\nset firstUnicode [$syllableUnicodes get 1]\n}\n}\nreturn $firstUnicode\n} else {\nreturn \"\"\n}\n}\n}\n# get index from rule object and set it as index_posistion\nset indexObj [$ruleObject get \"index\"]\nset indexStr [java::cast String $indexObj]\nset indexStr [$indexStr toUpperCase]\nset index 0\nset isLast [string equal $indexStr \"LAST\"]\nif {$isLast == 1} {\nset index 999\n} else {\nset index [expr $index + $indexStr ]\n}\n# get maxChainLength from rule object and set it as maxChainLength\nset maxChainLengthObj [$ruleObject get \"maxChainLength\"]\nset maxChainLength [$maxChainLengthObj toString]\n# get minChainLength from rule object and set it as minChainLength\nset minChainLengthObj [$ruleObject get \"minChainLength\"]\nset minChainLength [$minChainLengthObj toString]\n# Key-Character/unicode of given index at word , value - list of words\nset wordChainMap [java::new HashMap]\nset wordsSize [$searchResult size]\nset ruleName [$ruleObject get \"identifier\"]\n# loop through searchResult and prepare WordMap based on its character at given index position\njava::for {Map word} $searchResult {\nset id [$word get \"identifier\"]\n# add score against id in wordScore map\nset score [$word get \"score\"]\nset isScoreNull [java::isnull $score]\nif {$isScoreNull == 1} {\nset score 1.0\n}\n# get WordNode based on its id\nset nodeRespone [getDataNode $graphId $id]\nset check_error [check_response_error $nodeRespone]\nif {$check_error} {\n#remove wordId from validWordIds if word is not found\n#skip\n} else {\nset wordResponse [get_resp_value $nodeRespone \"node\"]\nset wordNode [java::cast Node $wordResponse]\nset character [characterAt $wordNode $index $graphId]\n# check character is not null\n#set isCharacterNull [java::isnull $character]\n# 0 is false and 1 is true in the above statement\nset emptyString \"\"\nset isEmpty [string equal $character $emptyString]\nif {$isEmpty == 0} {\nset wordChain [$wordChainMap get $character]\nif {[java::isnull $wordChain]} {\nset wordChain [java::new HashMap]\nset wordList [java::new ArrayList]\nset totalScore 0\n} else {\nset wordChain [java::cast Map $wordChain]\nset wordList [$wordChain get \"list\"]\nset wordList [java::cast List $wordList]\nset totalScore [$wordChain get \"score\"]\nset totalScore [$totalScore toString]\n}\nset wordListLength [$wordList size]\nif {$wordListLength < $maxChainLength} {\n$wordList add $id\nset totalScore [expr $totalScore + $score]\n$wordChain put \"list\" $wordList\n$wordChain put \"score\" $totalScore\n$wordChain put \"relation\" $ruleName\n$wordChainMap put $character $wordChain\n}\n}\n}\n}\nset wordChainCollection [$wordChainMap values]\nset wordChainCollection [java::cast Collection $wordChainCollection]\nset wordChainList [java::new ArrayList $wordChainCollection]\nset wordChains [java::new ArrayList]\n# filter wordChain that meets minimum word chain length\njava::for {Map wordChain} $wordChainList {\nset wordList [$wordChain get \"list\"]\nset wordList [java::cast List $wordList]\nset wordChainLength [$wordList size]\nif {$wordChainLength >= $minChainLength} {\n$wordChains add $wordChain\n}\n}\n# sort the wordChains based on score(average)\nset sortedWordChains [sort_maps $wordChains \"score\" \"DESC\"]\nset finalWordChains [java::new ArrayList]\nset wordChainsSize [$sortedWordChains size]\nset wordChainsLimitString [$wordChainsLimit toString]\nif { $wordChainsSize > $wordChainsLimitString} {\n# sublist sortedWordChains based on given wordChainsLimit\nset finalWordChains [$sortedWordChains subList 0 $wordChainsLimit]\n} else {\nset finalWordChains $sortedWordChains\n}\nreturn $finalWordChains", "type" : "SCRIPT", "parameters" : [ { "name" : "graphId", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false }, { "name" : "ruleObject", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false }, { "name" : "searchResult", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false }, { "name" : "wordChainsLimit", "datatype" : "java.lang.Integer", "index" : 3, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/language/wordChains/groupBy" } }
,{ "_id" : { "$oid" : "5809b297eb129754961ead2d" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "loadGradeLevelComplexityCache", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "actor_path" : { "manager" : "LANGUAGE_CACHE_ACTOR", "operation" : "loadGradeLevelComplexityCache", "router" : "LANGUAGE_REQUEST_ROUTER" }, "request_path" : { "type" : "POST", "url" : "/v1/language/*/loadGradeLevelComplexityCache", "path_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "5809b2abeb129754961ead2e" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "loadGradeLevelComplexity", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "node_id", "index" : 1, "routing_param" : false } ], "actor_path" : { "manager" : "LANGUAGE_CACHE_ACTOR", "operation" : "loadGradeLevelComplexity", "router" : "LANGUAGE_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "5809b2b6eb129754961ead2f" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "validateComplexityRange", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "grade_level_complexity", "datatype" : "com.ilimi.graph.dac.model.Node", "index" : 1, "routing_param" : false } ], "actor_path" : { "manager" : "LANGUAGE_CACHE_ACTOR", "operation" : "validateComplexityRange", "router" : "LANGUAGE_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "5809b2bceb129754961ead30" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getGradeLevelComplexity", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "actor_path" : { "manager" : "LANGUAGE_CACHE_ACTOR", "operation" : "getGradeLevelComplexities", "router" : "LANGUAGE_REQUEST_ROUTER" }, "request_path" : { "type" : "GET", "url" : "/v1/language/*/gradeLevelComplexity", "path_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "5809b2dfeb129754961ead31" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateGradeLevelComplexity", "body" : "package require java\njava::import -package java.util Arrays\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package java.util HashSet Set\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.graph.model.node DefinitionDTO\njava::import -package com.ilimi.graph.model.node MetadataDefinition\nproc isNotEmpty {list} {\nset exist false\nset hasData [java::isnull $list]\nif {$hasData == 0} {\nset listSize [$list size]\nif {$listSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nset graph_id \"language\"\nset object_type \"GradeLevelComplexity\"\nset resp_def_node [getDefinition $graph_id $object_type]\nset check_error [check_response_error $resp_def_node]\nif {$check_error} {\nreturn $resp_def_node\n}\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset properties [java::prop $def_node \"properties\"]\njava::for {MetadataDefinition property} $properties {\nset propertyName [java::prop $property \"propertyName\"]\nif {$propertyName==\"languageId\"} {\nset validLanguages [java::prop $property \"range\"]\nif {[$validLanguages contains $language_id]} {\nbreak\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_INVALID_REQUEST\"\n$result_map put \"message\" \"Invalid language Id\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}\n}\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $object_type\n$map put \"gradeLevel\" $gradeLevel\n$map put \"languageLevel\" $languageLevel\n$map put \"languageId\" $language_id\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $graph_id $search_criteria]\nset nodeExist false\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset hasNode [isNotEmpty $graph_nodes]\nif {$hasNode} {\nset gradelevel_complexity_node [$graph_nodes get 0]\nset nodeExist true\n} else {\nset nodeExist false\n}\n}\nset text_complexity_response [computeTextComplexity $language_id $text]\nset check_error [check_response_error $text_complexity_response]\nif {$check_error} {\nreturn $text_complexity_response\n}\nset text_complexity [get_resp_value $text_complexity_response \"text_complexity\"]\nset text_mean_complexity [$text_complexity get \"meanComplexity\"]\nset gradelevel_complexity [java::new HashMap]\n$gradelevel_complexity put \"objectType\" $object_type\n$gradelevel_complexity put \"gradeLevel\" $gradeLevel\n$gradelevel_complexity put \"languageLevel\" $languageLevel\n$gradelevel_complexity put \"languageId\" $language_id\nset source_list [java::new ArrayList]\n$source_list add $source\nset node_id \"\"\nif {$nodeExist} {\nset gradelevel_complexity_node [java::cast Node $gradelevel_complexity_node]\nset metadata [java::prop $gradelevel_complexity_node \"metadata\"]\nset node_id [java::prop $gradelevel_complexity_node \"identifier\"]\nset sources [$metadata get \"sources\"]\nset arr_instance [java::instanceof $sources {String[]}]\nif {$arr_instance == 1} {\nset sources [java::cast {String[]} $sources]\nset sources [java::call Arrays asList $sources]\n}\nset sources [java::cast List $sources]\nset sourcesSet [java::new HashSet $sources]\n$sourcesSet add $source\nset source_list [java::new ArrayList $sourcesSet]\nset averageComplexity [$metadata get \"averageComplexity\"]\nset averageComplexity [$averageComplexity toString]\nset text_mean_complexity [$text_mean_complexity toString]\nset totalComplexity [expr {$text_mean_complexity + $averageComplexity}]\nset totalComplexity [expr {$totalComplexity / 2}]\nset text_mean_complexity $totalComplexity\n}\nset text_mean_complexity [java::new Double $text_mean_complexity]\n$gradelevel_complexity put \"averageComplexity\" $text_mean_complexity\n$gradelevel_complexity put \"sources\" $source_list\nset gradelevel_complexity_node [convert_to_graph_node $gradelevel_complexity $def_node]\n#call validating Complexity range\nset resp_validate [validateComplexityRange $language_id $gradelevel_complexity_node ]\nset check_error [check_response_error $resp_validate]\nif {$check_error} {\nreturn $resp_validate;\n}\nif {$nodeExist} {\nset response [updateDataNode $graph_id $node_id $gradelevel_complexity_node]\n} else {\nset response [createDataNode $graph_id $gradelevel_complexity_node]\n}\nset check_error [check_response_error $response]\nif {$check_error} {\nreturn $response;\n}\nset node_id [get_resp_value $response \"node_id\"]\nset load_response [loadGradeLevelComplexity $language_id $node_id]\nreturn $load_response;", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "datatype" : "java.lang.String", "index" : 0, "routing_param" : true }, { "name" : "gradeLevel", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false }, { "name" : "languageLevel", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false }, { "name" : "source", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false }, { "name" : "text", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "PATCH", "url" : "/v1/language/*/GradeLevelComplexity", "path_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "5821642feb129763d90cec32" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getEnglishWordsDetails", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\nproc isNotEmpty {list} {\nset exist false\nset isListNull [java::isnull $list]\nif {$isListNull == 0} {\nset listSize [$list size]\nif {$listSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getThresholdLevel {word language_id} {\nset filters [java::new HashMap]\n$filters put \"objectType\" \"Word\"\n$filters put \"graph_id\" $language_id\n$filters put \"lemma\" $word\n$filters put \"status\" [java::new ArrayList]\nset limit [java::new Integer 1]\nset null_var [java::null]\nset empty_list [java::new ArrayList]\nset empty_map [java::new HashMap]\nset searchResponse [indexSearch $null_var $null_var $filters $empty_list $empty_list $empty_map $empty_list $null_var $limit]\nset searchResultsMap [$searchResponse getResult]\nset wordsList [java::cast List [$searchResultsMap get \"results\"]]\nset wordsListNull [java::isnull $wordsList]\nif {$wordsListNull == 1 || [$wordsList size] == 0} {\nreturn null_var\n}\nset wordObject [java::cast Map [$wordsList get 0]]\nset thresholdLevel [$wordObject get \"identifier\"]\nputs \"thresholdLevel $thresholdLevel\"\nreturn thresholdLevel\n}\nset wordsDetailsResponse [java::new HashMap]\njava::for {String word} $words {\nputs \"word $word\"\nset wordDetails [java::new HashMap]\n$wordDetails put \"thresholdLevel\" [getThresholdLevel $word]\nset transliteratedWordResponse [getPhoneticSpelling \"hi\" true]\nset check_error [check_response_error $transliteratedWordResponse]\nif {$check_error} {\nreturn $transliteratedWordResponse\n}\nset transliteratedWord [get_resp_value $transliteratedWordResponse \"phonetic_spelling\"]\nputs \"transliteratedWord $transliteratedWord\"\n$wordDetails put \"transliteration\" $transliteratedWord\nset wordCompleixtyResponse [getWordFeatures \"hi\" $transliteratedWord]\nset check_error [check_response_error $wordCompleixtyResponse]\nif {$check_error} {\nreturn $wordCompleixtyResponse\n}\nset word_features [get_resp_value $wordCompleixtyResponse \"word_features\"]\nset wordFeatures [java::cast Map $word_features]\nset wordFeature [$wordFeatures get $transliteratedWord]\nset wordFeature [java::cast Map $wordFeature]\nset pc [$wordFeature get \"phonicComplexity\"]\nset sc [$wordFeature get \"count\"]\nputs \"pc %pc sc %sc \"\n$wordDetails put \"phonicComplexity\" [$wordFeature get \"phonicComplexity\"]\n$wordDetails put \"syllablesCount\" [$wordFeature get \"count\"]\n$wordsDetailsResponse put $word $wordDetails\n}\n# create word chains response\nset resp_object [java::new HashMap]\n$resp_object put \"words\" $wordsDetailsResponse\nset response [create_response $resp_object]\nreturn $response", "type" : "SCRIPT", "parameters" : [ { "name" : "words", "datatype" : "java.util.ArrayList", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/language/en/words/details" } }
,{ "_id" : { "$oid" : "58216a10eb129763d90cec33" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getWordsEndingWithAkshara", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package java.util HashSet Set\njava::import -package java.util Collection\njava::import -package com.ilimi.graph.dac.model Node Relation\n# get list of aksharas from rule object\nset aksharaList [$ruleObject get \"aksharas\"]\n# get rule name from rule object\nset ruleName [$ruleObject get \"identifier\"]\n# get maxChainLength from rule object and set it as maxChainLength\nset maxChainLengthObj [$ruleObject get \"maxChainLength\"]\nset maxChainLength [$maxChainLengthObj toString]\n# get minChainLength from rule object and set it as minChainLength\nset minChainLengthObj [$ruleObject get \"minChainLength\"]\nset minChainLength [$minChainLengthObj toString]\n# get syllableCount from rule object and use it for syllableCount filter\nset syllableCount [$ruleObject get \"syllableCount\"]\nset statusList [java::new ArrayList]\n$statusList add \"Live\"\n$statusList add \"Draft\"\nset null_var [java::null]\nset empty_list [java::new ArrayList]\nset empty_map [java::new HashMap]\nset words [java::new ArrayList]\nset wordIdList [java::new ArrayList]\nset relations [java::new ArrayList]\njava::for {Object aksharaObj} $aksharaList {\nset akshara [$aksharaObj toString]\nset filters [java::new HashMap]\n$filters put \"objectType\" \"Word\"\n$filters put \"graph_id\" $graphId\nset lemmaMap [java::new HashMap]\n$lemmaMap put \"endsWith\" $akshara\n$filters put \"lemma\" $lemmaMap\n$filters put \"status\" $statusList\n$filters put \"syllableCount\" $syllableCount\nset limit [java::new Integer $maxChainLength]\nset searchResponse [indexSearch $null_var $null_var $filters $empty_list $empty_list $empty_map $empty_list $null_var $limit]\nset searchResultsMap [$searchResponse getResult]\nset wordList [$searchResultsMap get \"results\"]\nset relation [java::new HashMap]\n$relation put \"relation\" $ruleName\nset totalScore 0\nset list [java::new ArrayList]\njava::for {Map word} $wordList {\nset id [$word get \"identifier\"]\nset wordAdded [$wordIdList contains $id]\nif {$wordAdded == 0} {\n$words add $word\n$wordIdList add $id\n}\n$list add $id\nset score [$word get \"score\"]\nset isScoreNull [java::isnull $score]\nif {$isScoreNull == 1} {\nset score 1.0\n}\nset totalScore [expr $totalScore + $score]\n}\n$relation put \"list\" $list\n$relation put \"score\" $totalScore\n$relations add $relation\n}\nset wordChains [java::new ArrayList]\n# filter wordChain that meets minimum word chain length\njava::for {Map wordChain} $relations {\nset wordList [$wordChain get \"list\"]\nset wordList [java::cast List $wordList]\nset wordChainLength [$wordList size]\nif {$wordChainLength >= $minChainLength} {\n$wordChains add $wordChain\n}\n}\n# sort the wordChains based on score(average)\nset sortedWordChains [sort_maps $wordChains \"score\" \"DESC\"]\nset finalWordChains [java::new ArrayList]\nset wordChainsSize [$sortedWordChains size]\nset wordChainsLimitString [$wordChainsLimit toString]\nif { $wordChainsSize > $wordChainsLimitString} {\n# sublist sortedWordChains based on given wordChainsLimit\nset finalWordChains [$sortedWordChains subList 0 $wordChainsLimit]\n} else {\nset finalWordChains $sortedWordChains\n}\nset result_map [java::new HashMap]\n$result_map put \"words\" $words\n$result_map put \"relations\" $finalWordChains\nset response_list [create_response $result_map]\nreturn $response_list", "type" : "SCRIPT", "parameters" : [ { "name" : "graphId", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false }, { "name" : "ruleObject", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false }, { "name" : "searchResult", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false }, { "name" : "wordChainsLimit", "datatype" : "java.lang.Integer", "index" : 3, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/language/wordChains/endsWithAkshara" } }
,{ "_id" : { "$oid" : "58216e1ceb129763d90cec34" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getWordsContainingAkshara", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package java.util HashSet Set\njava::import -package java.util Collection\njava::import -package com.ilimi.graph.dac.model Node Relation\n# get list of aksharas from rule object\nset aksharaList [$ruleObject get \"aksharas\"]\n# get rule name from rule object\nset ruleName [$ruleObject get \"identifier\"]\n# get maxChainLength from rule object and set it as maxChainLength\nset maxChainLengthObj [$ruleObject get \"maxChainLength\"]\nset maxChainLength [$maxChainLengthObj toString]\n# get minChainLength from rule object and set it as minChainLength\nset minChainLengthObj [$ruleObject get \"minChainLength\"]\nset minChainLength [$minChainLengthObj toString]\n# get syllableCount from rule object and use it for syllableCount filter\nset syllableCountMax [$ruleObject get \"syllableCount\"]\nset syllableCountMaxNull [java::isnull $syllableCountMax]\nif {$syllableCountMaxNull == 1} {\nset syllableCountMax [java::new Integer 3]\n}\nset syllableCountMap [java::new HashMap]\n$syllableCountMap put \"min\" [java::new Integer 3]\n$syllableCountMap put \"max\" $syllableCountMax\nset statusList [java::new ArrayList]\n$statusList add \"Live\"\n$statusList add \"Draft\"\nset null_var [java::null]\nset empty_list [java::new ArrayList]\nset empty_map [java::new HashMap]\nset words [java::new ArrayList]\nset wordIdList [java::new ArrayList]\nset relations [java::new ArrayList]\njava::for {Object aksharaObj} $aksharaList {\nset akshara [$aksharaObj toString]\nset filters [java::new HashMap]\n$filters put \"objectType\" \"Word\"\n$filters put \"graph_id\" $graphId\nset lemmaMap [java::new HashMap]\n$lemmaMap put \"value\" $akshara\n$filters put \"lemma\" $lemmaMap\n$filters put \"status\" $statusList\n$filters put \"syllableCount\" $syllableCountMap\nset limit [java::new Integer $maxChainLength]\nset searchResponse [indexSearch $null_var $null_var $filters $empty_list $empty_list $empty_map $empty_list $null_var $limit]\nset searchResultsMap [$searchResponse getResult]\nset wordList [$searchResultsMap get \"results\"]\nset relation [java::new HashMap]\n$relation put \"relation\" $ruleName\nset totalScore 0\nset list [java::new ArrayList]\njava::for {Map word} $wordList {\nset id [$word get \"identifier\"]\nset wordAdded [$wordIdList contains $id]\nif {$wordAdded == 0} {\n$words add $word\n$wordIdList add $id\n}\n$list add $id\nset score [$word get \"score\"]\nset isScoreNull [java::isnull $score]\nif {$isScoreNull == 1} {\nset score 1.0\n}\nset totalScore [expr $totalScore + $score]\n}\n$relation put \"list\" $list\n$relation put \"score\" $totalScore\n$relations add $relation\n}\nset wordChains [java::new ArrayList]\n# filter wordChain that meets minimum word chain length\njava::for {Map wordChain} $relations {\nset wordList [$wordChain get \"list\"]\nset wordList [java::cast List $wordList]\nset wordChainLength [$wordList size]\nif {$wordChainLength >= $minChainLength} {\n$wordChains add $wordChain\n}\n}\n# sort the wordChains based on score(average)\nset sortedWordChains [sort_maps $wordChains \"score\" \"DESC\"]\nset finalWordChains [java::new ArrayList]\nset wordChainsSize [$sortedWordChains size]\nset wordChainsLimitString [$wordChainsLimit toString]\nif { $wordChainsSize > $wordChainsLimitString} {\n# sublist sortedWordChains based on given wordChainsLimit\nset finalWordChains [$sortedWordChains subList 0 $wordChainsLimit]\n} else {\nset finalWordChains $sortedWordChains\n}\nset result_map [java::new HashMap]\n$result_map put \"words\" $words\n$result_map put \"relations\" $finalWordChains\nset response_list [create_response $result_map]\nreturn $response_list", "type" : "SCRIPT", "parameters" : [ { "name" : "graphId", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false }, { "name" : "ruleObject", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false }, { "name" : "searchResult", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false }, { "name" : "wordChainsLimit", "datatype" : "java.lang.Integer", "index" : 3, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/language/wordChains/containsAkshara" } }
,{ "_id" : { "$oid" : "58217168eb129763d90cec35" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getWordsStartingWithAkshara", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package java.util HashSet Set\njava::import -package java.util Collection\njava::import -package com.ilimi.graph.dac.model Node Relation\n# get list of aksharas from rule object\nset aksharaList [$ruleObject get \"aksharas\"]\n# get rule name from rule object\nset ruleName [$ruleObject get \"identifier\"]\n# get maxChainLength from rule object and set it as maxChainLength\nset maxChainLengthObj [$ruleObject get \"maxChainLength\"]\nset maxChainLength [$maxChainLengthObj toString]\n# get minChainLength from rule object and set it as minChainLength\nset minChainLengthObj [$ruleObject get \"minChainLength\"]\nset minChainLength [$minChainLengthObj toString]\n# get syllableCount from rule object and use it for syllableCount filter\nset syllableCount [$ruleObject get \"syllableCount\"]\nset statusList [java::new ArrayList]\n$statusList add \"Live\"\n$statusList add \"Draft\"\nset null_var [java::null]\nset empty_list [java::new ArrayList]\nset empty_map [java::new HashMap]\nset words [java::new ArrayList]\nset wordIdList [java::new ArrayList]\nset relations [java::new ArrayList]\njava::for {Object aksharaObj} $aksharaList {\nset akshara [$aksharaObj toString]\nset filters [java::new HashMap]\n$filters put \"objectType\" \"Word\"\n$filters put \"graph_id\" $graphId\nset lemmaMap [java::new HashMap]\n$lemmaMap put \"startsWith\" $akshara\n$filters put \"lemma\" $lemmaMap\n$filters put \"status\" $statusList\n$filters put \"syllableCount\" $syllableCount\nset limit [java::new Integer $maxChainLength]\nset searchResponse [indexSearch $null_var $null_var $filters $empty_list $empty_list $empty_map $empty_list $null_var $limit]\nset searchResultsMap [$searchResponse getResult]\nset wordList [$searchResultsMap get \"results\"]\nset relation [java::new HashMap]\n$relation put \"relation\" $ruleName\nset totalScore 0\nset list [java::new ArrayList]\njava::for {Map word} $wordList {\nset id [$word get \"identifier\"]\nset wordAdded [$wordIdList contains $id]\nif {$wordAdded == 0} {\n$words add $word\n$wordIdList add $id\n}\n$list add $id\nset score [$word get \"score\"]\nset isScoreNull [java::isnull $score]\nif {$isScoreNull == 1} {\nset score 1.0\n}\nset totalScore [expr $totalScore + $score]\n}\n$relation put \"list\" $list\n$relation put \"score\" $totalScore\n$relations add $relation\n}\nset wordChains [java::new ArrayList]\n# filter wordChain that meets minimum word chain length\njava::for {Map wordChain} $relations {\nset wordList [$wordChain get \"list\"]\nset wordList [java::cast List $wordList]\nset wordChainLength [$wordList size]\nif {$wordChainLength >= $minChainLength} {\n$wordChains add $wordChain\n}\n}\n# sort the wordChains based on score(average)\nset sortedWordChains [sort_maps $wordChains \"score\" \"DESC\"]\nset finalWordChains [java::new ArrayList]\nset wordChainsSize [$sortedWordChains size]\nset wordChainsLimitString [$wordChainsLimit toString]\nif { $wordChainsSize > $wordChainsLimitString} {\n# sublist sortedWordChains based on given wordChainsLimit\nset finalWordChains [$sortedWordChains subList 0 $wordChainsLimit]\n} else {\nset finalWordChains $sortedWordChains\n}\nset result_map [java::new HashMap]\n$result_map put \"words\" $words\n$result_map put \"relations\" $finalWordChains\nset response_list [create_response $result_map]\nreturn $response_list", "type" : "SCRIPT", "parameters" : [ { "name" : "graphId", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false }, { "name" : "ruleObject", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false }, { "name" : "searchResult", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false }, { "name" : "wordChainsLimit", "datatype" : "java.lang.Integer", "index" : 3, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/language/wordChains/startsWithAkshara" } }
,{ "_id" : { "$oid" : "5824838ceb1297167b875742" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_setVersionKey", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package java.util Date\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Content\"\nset graph_id \"domain\"\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $object_type\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset content_id [java::prop $graph_node \"identifier\"]\nset metadata [java::prop $graph_node \"metadata\"]\nset versionKey [$metadata get \"versionKey\"]\nset versionKey_null [java::isnull $versionKey]\nif {$versionKey_null == 1} {\nset name [$metadata get \"name\"]\n$metadata put \"name\" $name\nset update_response [updateDataNode $graph_id $content_id $graph_node]\nset check_error [check_response_error $update_response]\nif {$check_error} {\nset messages [get_resp_value $update_response \"messages\"]\njava::for {String msg} $messages {\nputs \"$content_id - $msg\"\n}\n}\n}\n}\n}\nreturn \"Updation Complete\"", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_setVersionKey" } }
,{ "_id" : { "$oid" : "58248391eb1297167b875743" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_resetAssetLicense", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Content\"\nset graph_id \"domain\"\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $object_type\nset contentTypes [java::new ArrayList]\n$contentTypes add \"Asset\"\n$map put \"contentType\" $contentTypes\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset asset_id [java::prop $graph_node \"identifier\"]\nset metadata [java::prop $graph_node \"metadata\"]\nset license [$metadata get \"license\"]\nset license_null [java::isnull $license]\nset isCCBy 1\nif {$license_null == 0} {\nset license_str [java::new String [$license toString]]\nset isCCBy [$license_str equalsIgnoreCase \"Creative Commons Attribution (CC BY)\"]\n}\nif {$license_null == 1 || $isCCBy != 1} {\n$metadata put \"license\" \"Creative Commons Attribution (CC BY)\"\nputs \"updating asset: $asset_id\"\nset update_response [updateDataNode $graph_id $asset_id $graph_node]\nset check_error [check_response_error $update_response]\nif {$check_error} {\nset messages [get_resp_value $update_response \"messages\"]\njava::for {String msg} $messages {\nputs \"$asset_id - $msg\"\n}\n}\n}\n}\nputs \"update complete\"\n}\nreturn \"Updation Complete\"", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_resetAssetLicense" } }
,{ "_id" : { "$oid" : "582483bdeb1297167b875744" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "flagContent", "api_id" : "ekstep.learning.content.flag", "version" : "2.0", "body" : "package require java\njava::import -package java.util HashMap Map Date\njava::import -package java.util ArrayList List\njava::import -package java.util HashSet Set\njava::import -package java.util Arrays\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.graph.common DateUtils\nset graph_id \"domain\"\nset object_type \"Content\"\nproc isNotEmpty {list} {\nset exist false\nset isListNull [java::isnull $list]\nif {$isListNull == 0} {\nset listSize [$list size]\nif {$listSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc addFlagReasons {flagResaons node_metadata} {\nset existingFlagReasons [$node_metadata get \"flagReasons\"]\nset isExistingFlagReasonsNull [java::isnull $existingFlagReasons]\nif {$isExistingFlagReasonsNull == 0} {\nset arr_instance [java::instanceof $existingFlagReasons {String[]}]\nif {$arr_instance == 1} {\nset existingFlagReasons [java::cast {String[]} $existingFlagReasons]\nset existingFlagReasons [java::call Arrays asList $existingFlagReasons]\n} else {\nset existingFlagReasons [java::cast ArrayList $existingFlagReasons]\n}\nif {[isNotEmpty $existingFlagReasons]} {\nset flagReasonsSet [java::new HashSet $existingFlagReasons]\n$flagReasonsSet addAll $flagResaons\nset flagReasonsList [java::new ArrayList $flagReasonsSet]\nreturn $flagReasonsList\n}\n}\nreturn $flagResaons\n}\nproc addFlaggedBy {flaggedBy node_metadata} {\nset flaggedByList [java::new ArrayList]\n$flaggedByList add $flaggedBy\nset existingFlaggedBy [$node_metadata get \"flaggedBy\"]\nset isExistingFlaggedByNull [java::isnull $existingFlaggedBy]\nif {$isExistingFlaggedByNull == 0} {\nset arr_instance [java::instanceof $existingFlaggedBy {String[]}]\nif {$arr_instance == 1} {\nset existingFlaggedBy [java::cast {String[]} $existingFlaggedBy]\nset existingFlaggedBy [java::call Arrays asList $existingFlaggedBy]\n} else {\nset existingFlaggedBy [java::cast ArrayList $existingFlaggedBy]\n}\nif {[isNotEmpty $existingFlaggedBy]} {\nset flaggedBySet [java::new HashSet $existingFlaggedBy]\n$flaggedBySet addAll $flaggedByList\nset flaggedByList [java::new ArrayList $flaggedBySet]\nreturn $flaggedByList\n}\n}\nreturn $flaggedByList\n}\nset resp_get_node [getDataNode $graph_id $content_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset node_object_type [java::prop $graph_node \"objectType\"]\nif {$node_object_type == $object_type} {\nset node_metadata [java::prop $graph_node \"metadata\"]\nset status_val [$node_metadata get \"status\"]\nset status_val_str [java::new String [$status_val toString]]\nset isLiveState [$status_val_str equalsIgnoreCase \"Live\"]\nset isProcessingState [$status_val_str equalsIgnoreCase \"Processing\"]\nset isFlaggedState [$status_val_str equalsIgnoreCase \"Flagged\"]\nif {$isLiveState == 1 || $isFlaggedState == 1 || $isProcessingState == 1} {\nset request [java::new HashMap]\nset flaggedList [addFlaggedBy $flaggedBy $node_metadata]\nset flaggedList [java::cast ArrayList $flaggedList]\nset arraySize [$flaggedList size]\nif {($arraySize > 0)} {\n$request put \"lastUpdatedBy\" [$flaggedList get 0]\n}\n$request put \"flaggedBy\" [addFlaggedBy $flaggedBy $node_metadata]\n$request put \"flags\" $flags\n$request put \"versionKey\" $versionKey\n$request put \"status\" \"Flagged\"\n$request put \"lastFlaggedOn\" [java::call DateUtils format [java::new Date]]\nset isFlagReasonsNull [java::isnull $flagReasons]\nif {$isFlagReasonsNull == 0} {\nset flagReasons [java::cast ArrayList $flagReasons]\nset hasFlagReasons [isNotEmpty $flagReasons]\nif {$hasFlagReasons} {\nset flagResaons [addFlagReasons $flagReasons $node_metadata]\n$request put \"flagReasons\" $flagResaons\n}\n}\n$request put \"objectType\" $object_type\n$request put \"identifier\" $content_id\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset domain_obj [convert_to_graph_node $request $def_node]\nset create_response [updateDataNode $graph_id $content_id $domain_obj]\nset check_error [check_response_error $create_response]\nif {$check_error} {\n} else {\n$node_metadata putAll $request\n$node_metadata put \"prevState\" $status_val_str\nset log_response [log_content_lifecycle_event $content_id $node_metadata]\n}\nreturn $create_response\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_NOT_FLAGGABLE\"\n$result_map put \"message\" \"Unpublished Content $content_id cannot be flagged\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_NODE_NOT_FOUND\"\n$result_map put \"message\" \"$object_type $content_id not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "content_id", "index" : 0, "routing_param" : false }, { "name" : "flagReasons", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false }, { "name" : "flaggedBy", "index" : 2, "routing_param" : false }, { "name" : "versionKey", "index" : 3, "routing_param" : false }, { "name" : "flags", "datatype" : "java.util.ArrayList", "index" : 4, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/content/flag/*", "path_params" : [ "content_id" ] } }
,{ "_id" : { "$oid" : "582483c6eb1297167b875745" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getContent_v3", "api_id" : "ekstep.content.read", "version" : "3.0", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\nproc proc_isNotNull {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 0} {\nset exist true\n}\n} catch {Exception err} {\nset exist false\n}\nreturn $exist\n}\nproc proc_getFirstElement {input_list} {\nset listNotNull [proc_isNotNull $input_list]\nif {$listNotNull} {\nset arr_instance [java::instanceof $input_list {String[]}]\nif {$arr_instance == 1} {\nset array [java::cast {String[]} $input_list]\nset listSize [$array length]\nif {$listSize > 0} {\nset word [$array get 0]\nreturn $word\n} else {\nreturn [java::new String \"English\"]\n}\n} else {\nreturn [$input_list toString]\n}\n} else {\nreturn [java::new String \"English\"]\n}\n}\nproc proc_updateLanguageCode {resp_object graph_node} {\nset objectNotNull [proc_isNotNull $resp_object]\nif {$objectNotNull} {\nset languageCode [$resp_object get \"languageCode\"]\nset languageCodeNotNull [proc_isNotNull $languageCode]\nif {!$languageCodeNotNull} {\nset node_metadata [java::prop $graph_node \"metadata\"]\nset language [$node_metadata get \"language\"]\nset languageVal [proc_getFirstElement $language]\nset language_map [java::new HashMap]\n$language_map put \"english\" \"en\"\n$language_map put \"telugu\" \"te\"\n$language_map put \"hindi\" \"hi\"\n$language_map put \"kannada\" \"ka\"\n$language_map put \"tamil\" \"ta\"\n$language_map put \"marathi\" \"mr\"\n$language_map put \"bengali\" \"bn\"\n$language_map put \"gujarati\" \"gu\"\n$language_map put \"odia\" \"or\"\n$language_map put \"assamese\" \"as\"\nset lang_lc [[java::new String $languageVal] toLowerCase]\nset langCode [$language_map get $lang_lc]\nset langCodeNotNull [proc_isNotNull $langCode]\nif {$langCodeNotNull} {\n$resp_object put \"languageCode\" $langCode\n} else {\n$resp_object put \"languageCode\" \"en\"\n}\n}\n}\n}\nset isEditMode 0\nset imageMode 0\nset object_type \"Content\"\nset graph_id \"domain\"\nset content_image_id ${content_id}.img\nset is_mode_null [java::isnull $mode]\nset resp_get_node [java::null]]\nif {($is_mode_null == 0) && ([$mode toString] == \"edit\")} {\nset resp_get_node [getDataNode $graph_id $content_image_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nset isEditMode 1\nset resp_get_node [getDataNode $graph_id $content_id]\n} else {\nset imageMode 1\n}\n} else {\nset resp_get_node [getDataNode $graph_id $content_id]\n}\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset returnFields false\nset is_fieldList_null [java::isnull $fields]\nif {$is_fieldList_null == 0} {\nset returnFields true\n}\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset metadata [java::prop $graph_node \"metadata\"]\nset status_val [$metadata get \"status\"]\nset status_val_str [java::new String [$status_val toString]]\nset isLiveState [$status_val_str equalsIgnoreCase \"Live\"]\nset isFlaggedState [$status_val_str equalsIgnoreCase \"Flagged\"]\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nif {$returnFields} {\nset resp_object [convert_graph_node $graph_node $def_node $fields]\nset externalProps [java::new ArrayList]\nset returnBody [$fields contains \"body\"]\nif {$returnBody == 1} {\n$externalProps add \"body\"\n}\nset returnOldBody [$fields contains \"oldBody\"]\nif {$returnOldBody == 1} {\n$externalProps add \"oldBody\"\n}\nset returnStageIcons [$fields contains \"stageIcons\"]\nif {$returnStageIcons == 1} {\n$externalProps add \"stageIcons\"\n}\nset externalPropId $content_id\nif {$imageMode == 1} {\nset externalPropId $content_image_id\n}\nset bodyResponse [getContentProperties $externalPropId $externalProps]\nset check_error [check_response_error $bodyResponse]\nif {!$check_error} {\nset extValues [get_resp_value $bodyResponse \"values\"]\nset is_extValues_null [java::isnull $extValues]\nif {$is_extValues_null == 0} {\nset extValuesMap [java::cast Map $extValues]\n$resp_object putAll $extValuesMap\n}\n}\n} else {\nset resp_object [convert_graph_node $graph_node $def_node]\n}\nproc_updateLanguageCode $resp_object $graph_node\n$resp_object put \"identifier\" $content_id\nif {$isEditMode == 1 && $isLiveState == 1} {\n$resp_object put \"status\" \"Draft\"\n}\nset result_map [java::new HashMap]\n$result_map put \"content\" $resp_object\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "content_id", "index" : 0, "routing_param" : false }, { "name" : "fields", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false }, { "name" : "mode", "datatype" : "java.lang.String", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v3/content/read/*", "path_params" : [ "content_id" ], "request_params" : [ "fields", "mode" ] } }
,{ "_id" : { "$oid" : "582483c6eb1297167b875746" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "retireContent_v3", "api_id" : "ekstep.learning.content.retire", "version" : "3.0", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset graph_id \"domain\"\nset object_type \"Content\"\nset image_object_type \"ContentImage\"\nset resp_get_node [getDataNode $graph_id $contentId]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset node_object_type [java::prop $graph_node \"objectType\"]\nif {$node_object_type == $object_type} {\nset node_metadata [java::prop $graph_node \"metadata\"]\nset status_val [$node_metadata get \"status\"]\nset status_val_str [java::new String [$status_val toString]]\n$node_metadata put \"status\" \"Retired\"\nset create_response [updateDataNode $graph_id $contentId $graph_node]\nset content_image_id ${contentId}.img\nset resp_get_image_node [getDataNode $graph_id $content_image_id]\nset check_error [check_response_error $resp_get_image_node]\nif {$check_error} {\n} else {\nset graph_image_node [get_resp_value $resp_get_image_node \"node\"]\nset image_node_metadata [java::prop $graph_image_node \"metadata\"]\nset request [java::new HashMap]\n$request put \"versionKey\" [$image_node_metadata get \"versionKey\"]\n$request put \"status\" \"Retired\"\n$request put \"objectType\" $image_object_type\n$request put \"identifier\" $content_image_id\nset resp_def_node [getDefinition $graph_id $image_object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset domain_obj [convert_to_graph_node $request $def_node]\nset create_image_response [updateDataNode $graph_id $content_image_id $domain_obj]\n}\nreturn $create_response\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_NODE_NOT_FOUND\"\n$result_map put \"message\" \"$object_type $contentId not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "contentId", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "DELETE", "url" : "/v3/content/retire/*", "path_params" : [ "contentId" ] } }
,{ "_id" : { "$oid" : "582483c7eb1297167b875747" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "saveContent_v3", "api_id" : "ekstep.content.create", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package java.util HashSet Set\njava::import -package com.ilimi.graph.dac.model Node Relation\njava::import -package com.ilimi.graph.model.node MetadataDefinition\nproc proc_isEmpty {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 1} {\nset exist true\n} else {\nset strValue [$value toString]\nset newStrValue [java::new String $strValue]\nset strLength [$newStrValue length]\nif {$strLength == 0} {\nset exist true\n}\n}\n} catch {Exception err} {\nset exist true\n}\nreturn $exist\n}\nset object_null [java::isnull $content]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_INVALID_OBJECT\"\n$result_map put \"message\" \"Invalid Request\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset object_type \"Content\"\nset graph_id \"domain\"\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$content put \"objectType\" $object_type\nset mimeType [$content get \"mimeType\"]\nset mimeTypeEmpty [proc_isEmpty $mimeType]\nif {!$mimeTypeEmpty} {\nset isApkMimeType [[java::new String [$mimeType toString]] equalsIgnoreCase \"application/vnd.android.package-archive\"]\nif {$isApkMimeType != 1} {\n$content put \"osId\" \"org.ekstep.quiz.app\"\n}\n}\nset osId_Error false\nset contentType [$content get \"contentType\"]\nset contentTypeEmpty [proc_isEmpty $contentType]\nif {!$mimeTypeEmpty} {\nset osId [$content get \"osId\"]\nset osIdEmpty [proc_isEmpty $osId]\nset osIdCheck [[java::new String [$mimeType toString]] equalsIgnoreCase \"application/vnd.android.package-archive\"]\nif {$osIdCheck == 1 && $osIdEmpty} {\nset osId_Error false\n}\nif {!$contentTypeEmpty} {\nset textbookUnitCheck [[java::new String [$contentType toString]] equalsIgnoreCase \"TextBookUnit\"]\nif {$textbookUnitCheck == 1} {\n$content put \"visibility\" \"Parent\"\n}\n}\nif {$osId_Error} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_INVALID_OSID\"\n$result_map put \"message\" \"OSId cannot be empty\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset externalProps [java::new HashMap]\nset body [$content get \"body\"]\nset bodyEmpty [proc_isEmpty $body]\nif {!$bodyEmpty} {\n$content put \"body\" [java::null]\n$externalProps put \"body\" $body\n}\nset oldBody [$content get \"oldBody\"]\nset oldBodyEmpty [proc_isEmpty $oldBody]\nif {!$oldBodyEmpty} {\n$content put \"oldBody\" [java::null]\n$externalProps put \"oldBody\" $oldBody\n}\nset stageIcons [$content get \"stageIcons\"]\nset stageIconsEmpty [proc_isEmpty $stageIcons]\nif {!$stageIconsEmpty} {\n$content put \"stageIcons\" [java::null]\n$externalProps put \"stageIcons\" $stageIcons\n}\nset codeValidationFailed 0\nif {!$mimeTypeEmpty} {\nset isPluginMimeType [[java::new String [$mimeType toString]] equalsIgnoreCase \"application/vnd.ekstep.plugin-archive\"]\nif {$isPluginMimeType == 1} {\nset pluginCode [$content get \"code\"]\nset codeEmpty [proc_isEmpty $pluginCode]\nif {$codeEmpty} {\nset codeValidationFailed 1\n} else {\n$content put \"identifier\" $pluginCode\n}\n}\n}\nif {$codeValidationFailed == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_PLUGIN_CODE_REQUIRED\"\n$result_map put \"message\" \"Unique code is mandatory for plugins\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset domain_obj [convert_to_graph_node $content $def_node]\nset create_response [createDataNode $graph_id $domain_obj]\nset check_error [check_response_error $create_response]\nif {$check_error} {\nreturn $create_response\n} else {\nset content_id [get_resp_value $create_response \"node_id\"]\nif {!$bodyEmpty || !$oldBodyEmpty} {\nset bodyResponse [updateContentProperties $content_id $externalProps]\nset check_error [check_response_error $bodyResponse]\nif {$check_error} {\nreturn $bodyResponse\n} else {\nreturn $create_response\n}\n} else {\nreturn $create_response\n}\n}\n}\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_INVALID_CONTENT_MIMETYPE_TYPE\"\n$result_map put \"message\" \"Mime Type cannot be empty\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "content", "datatype" : "java.util.Map", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/content/create" } }
,{ "_id" : { "$oid" : "582483c8eb1297167b875748" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "searchContent_v3", "api_id" : "ekstep.content.search", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node RelationFilter\nproc proc_createRelationFilter {relationName direction} {\nset filter [java::new RelationFilter $relationName]\n$filter setFromDepth [java::new Integer 0]\n$filter setToDepth [java::new Integer 0]\n$filter setToDepth [java::new Integer 0]\n$filter setDirection $direction\nreturn $filter\n}\nproc proc_setRelationCriteria {concepts_list objectType filters} {\nset relation_query [java::new HashMap]\nset concepts_list_null [java::isnull $concepts_list]\nif {$concepts_list_null == 0} {\nset is_list [java::instanceof $concepts_list List]\nif {$is_list == 1} {\nset concepts_list_obj [java::cast List $concepts_list]\nset concepts_list_size [$concepts_list_obj size]\nif {$concepts_list_size > 0} {\n$relation_query put \"filters\" $filters\n$relation_query put \"objectType\" $objectType\nset concept_ids [java::new ArrayList]\njava::for {String concept_id} $concepts_list_obj {\n$concept_ids add $concept_id\n}\n$relation_query put \"identifiers\" $concept_ids\n}\n}\n}\nreturn $relation_query\n}\nset object_null [java::isnull $search]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_INVALID_SEARCH_REQUEST\"\n$result_map put \"message\" \"Invalid Search Request\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset invalidObjectType false\nset object_type_param [$search get \"objectType\"]\nset object_type_param_null [java::isnull $object_type_param]\nif {$object_type_param_null == 0} {\nset str_object_type_param [$object_type_param toString]\nif {$str_object_type_param != \"Content\"} {\nset invalidObjectType true\n}\n}\nif {$invalidObjectType} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_NOT_FOUND\"\n$result_map put \"message\" \"No content found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset object_type \"Content\"\nset check_null [java::isnull $search]\nif {$search == 1} {\nset $search [java::new HashMap]\n}\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\nset relations_list [java::new ArrayList]\nset concepts_list [$search get \"concepts\"]\nset concepts_list_null [java::isnull $concepts_list]\nif {$concepts_list_null == 0} {\nset is_list [java::instanceof $concepts_list List]\nif {$is_list == 1} {\nset concepts_list_obj [java::cast List $concepts_list]\nset concepts_list_size [$concepts_list_obj size]\nif {$concepts_list_size > 0} {\nset relations_list [java::new ArrayList]\nset relation_query [java::new HashMap]\n$relation_query put \"name\" \"associatedTo\"\n$relation_query put \"objectType\" \"Concept\"\nset concept_ids [java::new ArrayList]\njava::for {String concept_id} $concepts_list_obj {\n$concept_ids add $concept_id\n}\n$relation_query put \"identifiers\" $concept_ids\n$relations_list add $relation_query\n$search remove \"concepts\"\n}\n}\n}\nset relation_names [java::new ArrayList]\n$relation_names add [proc_createRelationFilter \"associatedTo\" \"OUT\"]\n$relation_names add [proc_createRelationFilter \"isParentOf\" \"IN\"]\nset domains_list [$search get \"domains\"]\nset domain_query_map [proc_setRelationCriteria $domains_list \"Domain\" $relation_names]\nset domain_query_empty [$domain_query_map isEmpty]\nif {!$domain_query_empty} {\n$relations_list add $domain_query_map\n$search remove \"domains\"\n}\nset dimensions_list [$search get \"dimensions\"]\nset dimension_query_map [proc_setRelationCriteria $dimensions_list \"Dimension\" $relation_names]\nset dimension_query_empty [$dimension_query_map isEmpty]\nif {!$dimension_query_empty} {\n$relations_list add $dimension_query_map\n$search remove \"dimensions\"\n}\nset relationsListSize [$relations_list size]\nif {$relationsListSize > 0} {\n$search put \"relationCriteria\" $relations_list\n}\nset sort [$search get \"sort\"]\nset limit [$search get \"limit\"]\n$search put \"sortBy\" $sort\n$search put \"resultSize\" $limit\n$search remove \"sort\"\n$search remove \"limit\"\nset returnFields false\nset fieldList [$search get \"fields\"]\nset is_fieldList_null [java::isnull $fieldList]\nif {$is_fieldList_null == 0} {\n$search remove \"fields\"\nset returnFields true\n}\nset search_criteria [create_search_criteria $search]\nset graph_id \"domain\"\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset obj_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nif {$returnFields} {\nset domain_obj [convert_graph_node $graph_node $def_node $fieldList]\n} else {\nset domain_obj [convert_graph_node $graph_node $def_node]\n}\n$obj_list add $domain_obj\n}\nset result_map [java::new HashMap]\n$result_map put \"content\" $obj_list\nset response_list [create_response $result_map]\nreturn $response_list\n}\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "search", "datatype" : "java.util.Map", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/content/search" } }
,{ "_id" : { "$oid" : "582483caeb1297167b875749" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateContent_v3", "api_id" : "ekstep.content.update", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map Date\njava::import -package java.util HashSet Set\njava::import -package com.ilimi.graph.dac.model Node Relation\njava::import -package com.ilimi.graph.common DateUtils\nproc proc_isNotNull {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 0} {\nset exist true\n}\n} catch {Exception err} {\nset exist false\n}\nreturn $exist\n}\nproc proc_isEmpty {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 1} {\nset exist true\n} else {\nset strValue [$value toString]\nset newStrValue [java::new String $strValue]\nset strLength [$newStrValue length]\nif {$strLength == 0} {\nset exist true\n}\n}\n} catch {Exception err} {\nset exist true\n}\nreturn $exist\n}\nproc proc_isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nset object_null [java::isnull $content]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_INVALID_OBJECT\"\n$result_map put \"message\" \"Invalid Request\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset original_content_id $content_id\nset object_type \"Content\"\nset content_image_object_type \"ContentImage\"\nset graph_id \"domain\"\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$content put \"objectType\" $object_type\n$content put \"identifier\" $content_id\nset osId_Error false\nset contentType [$content get \"contentType\"]\nset contentTypeNotNull [proc_isNotNull $contentType]\nset contentTypeEmpty false\nif {$contentTypeNotNull} {\nset contentTypeEmpty [proc_isEmpty $contentType]\n}\nif {!$contentTypeEmpty} {\nset isImageObjectCreationNeeded 0\nset imageObjectExists 0\nset osId [$content get \"osId\"]\nset osIdNotNull [proc_isNotNull $osId]\nset osIdEmpty false\nif {$osIdNotNull} {\nset osIdEmpty [proc_isEmpty $osId]\n}\nset osIdCheck 1\nif {$contentTypeNotNull} {\nset osIdCheck [[java::new String [$contentType toString]] equalsIgnoreCase \"Game\"]\n}\nif {$osIdCheck == 1 && $osIdEmpty} {\nset osId_Error false\n}\nif {$osId_Error} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_INVALID_OSID\"\n$result_map put \"message\" \"OSId cannot be empty\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset content_image_id ${content_id}.img\nset get_node_response [getDataNode $graph_id $content_image_id]\nset get_node_response_error [check_response_error $get_node_response]\nif {$get_node_response_error} {\nset isImageObjectCreationNeeded 1\nset get_node_response [getDataNode $graph_id $content_id]\nset get_node_response_error [check_response_error $get_node_response]\n} else {\nset imageObjectExists 1\n}\nif {$get_node_response_error} {\nreturn $get_node_response;\n} else {\nset externalProps [java::new HashMap]\nset body [$content get \"body\"]\nset bodyEmpty [proc_isEmpty $body]\nif {!$bodyEmpty} {\n$externalProps put \"body\" $body\n$content put \"artifactUrl\" [java::null]\n$content put \"body\" [java::null]\n}\nset oldBody [$content get \"oldBody\"]\nset oldBodyEmpty [proc_isEmpty $oldBody]\nif {!$oldBodyEmpty} {\n$externalProps put \"oldBody\" $oldBody\n$content put \"oldBody\" [java::null]\n}\nset stageIcons [$content get \"stageIcons\"]\nset stageIconsEmpty [proc_isEmpty $stageIcons]\nif {!$stageIconsEmpty} {\n$content put \"stageIcons\" [java::null]\n$externalProps put \"stageIcons\" $stageIcons\n}\nset graph_node [get_resp_value $get_node_response \"node\"]\nset metadata [java::prop $graph_node \"metadata\"]\nset mimeType [$metadata get \"mimeType\"]\nset domain_val [$metadata get \"domain\"]\nset domain_val_null [java::isnull $domain_val]\nif {$domain_val_null == 0} {\nset domain_val_instance [java::instanceof $domain_val {String[]}]\nif {$domain_val_instance == 0} {\nset input_domain [$content get \"domain\"]\nset input_domain_null [java::isnull $input_domain]\nif {$input_domain_null == 1} {\nset domain_list [java::new ArrayList]\n$domain_list add $domain_val\n$content put \"domain\" $domain_list\n}\n}\n}\nset audience_val [$metadata get \"audience\"]\nset audience_val_null [java::isnull $audience_val]\nif {$audience_val_null == 0} {\nset audience_val_instance [java::instanceof $audience_val {String[]}]\nif {$audience_val_instance == 0} {\nset audience_list [java::new ArrayList]\n$audience_list add $audience_val\n$metadata put \"audience\" $audience_list\nset input_audience [$content get \"audience\"]\nset input_audience_null [java::isnull $input_audience]\nif {$input_audience_null == 1} {\n$content put \"audience\" $audience_list\n}\n}\n}\nset status_val [$metadata get \"status\"]\nset status_val_str [java::new String [$status_val toString]]\nset isReviewState [$status_val_str equalsIgnoreCase \"Review\"]\nset isFlaggedReviewState [$status_val_str equalsIgnoreCase \"FlagReview\"]\nset isFlaggedState [$status_val_str equalsIgnoreCase \"Flagged\"]\nset isLiveState [$status_val_str equalsIgnoreCase \"Live\"]\nset input_status [$content get \"status\"]\nset input_status_null [java::isnull $input_status]\nset log_event 0\nif {$input_status_null == 0} {\nset input_status_str [java::new String [$input_status toString]]\nset updateToReviewState [$input_status_str equalsIgnoreCase \"Review\"]\nset updateToFlagReviewState [$input_status_str equalsIgnoreCase \"FlagReview\"]\nif {( $updateToReviewState == 1 || $updateToFlagReviewState == 1 ) && ( $isReviewState != 1 || $isFlaggedReviewState != 1 )} {\n$content put \"lastSubmittedOn\" [java::call DateUtils format [java::new Date]]\n}\nif {![$input_status_str equals $status_val_str]} {\nset log_event 1\n}\n}\nset check_error false\nset create_response [java::null]\nif {$isLiveState == 1 || $isFlaggedState == 1} {\nif {$isImageObjectCreationNeeded == 1} {\njava::prop $graph_node \"identifier\" $content_image_id\njava::prop $graph_node \"objectType\" $content_image_object_type\n#if {$isFlaggedState == 1} {\n#$metadata put \"status\" \"FlagDraft\"\n#} else {\n$metadata put \"status\" \"Draft\"\n#}\nset lastUpdatedBy [$content get \"lastUpdatedBy\"]\nset isLastUpdateNotNull [proc_isNotNull $lastUpdatedBy]\nif {$isLastUpdateNotNull} {\n$metadata put \"lastUpdatedBy\" $lastUpdatedBy\n}\nset create_response [createDataNode $graph_id $graph_node]\nset check_error [check_response_error $create_response]\nif {!$check_error} {\nset externalPropFields [java::new ArrayList]\n$externalPropFields add \"body\"\n$externalPropFields add \"oldBody\"\n$externalPropFields add \"stageIcons\"\nset bodyResponse [getContentProperties $content_id $externalPropFields]\nset check_error [check_response_error $bodyResponse]\nif {!$check_error} {\nset extValues [get_resp_value $bodyResponse \"values\"]\nset is_extValues_null [java::isnull $extValues]\nif {$is_extValues_null == 0} {\nset extValuesMap [java::cast Map $extValues]\nset bodyResponse [updateContentProperties $content_image_id $extValuesMap]\n}\n}\n$content put \"versionKey\" [get_resp_value $create_response \"versionKey\"]\n}\n}\nset content_id $content_image_id\n} elseif {$imageObjectExists == 1} {\nset content_id $content_image_id\n}\nif {$check_error} {\nreturn $create_response\n} else {\nset domain_obj [convert_to_graph_node $content $def_node $graph_node]\nset create_response [updateDataNode $graph_id $content_id $domain_obj]\nset check_error [check_response_error $create_response]\nif {$check_error} {\nreturn $create_response\n} else {\n$create_response put \"node_id\" $original_content_id\nif {$log_event == 1} {\n$metadata putAll $content\n$metadata put \"prevState\" $status_val_str\nset log_response [log_content_lifecycle_event $original_content_id $metadata]\n}\nif {!$bodyEmpty || !$oldBodyEmpty} {\nset bodyResponse [updateContentProperties $content_id $externalProps]\nset check_error [check_response_error $bodyResponse]\nif {$check_error} {\nreturn $bodyResponse\n} else {\nreturn $create_response\n}\n} else {\nreturn $create_response\n}\n}\n}\n}\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_INVALID_CONTENT_TYPE\"\n$result_map put \"message\" \"Content Type cannot be empty\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "content_id", "index" : 0, "routing_param" : false }, { "name" : "content", "datatype" : "java.util.Map", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "PATCH", "url" : "/v3/content/update/*", "path_params" : [ "content_id" ] } }
,{ "_id" : { "$oid" : "58248464eb1297167bdef41f" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getVarnaList", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset search [java::new HashMap]\nset varna_object_type \"Varna\"\n$search put \"objectType\" $varna_object_type\n$search put \"nodeType\" \"DATA_NODE\"\nset type_list [java::new ArrayList]\nif {$language_id == \"en\"} {\n$type_list add \"Alphabet\"\n} else {\n$type_list add \"Vowel\"\n$type_list add \"Consonant\"\n}\n$search put \"type\" $type_list\nset sort_by [java::new ArrayList]\n$sort_by add \"varna\"\n$search put \"sortBy\" $sort_by\n$search put \"order\" \"ASC\"\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response\n} else {\nset varna_list [java::new ArrayList]\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset node_id [java::prop $graph_node \"identifier\"]\n$varna_list add $node_id\n}\nreturn $varna_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "GET", "url" : "/v1/language/dictionary/varna/*", "path_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "582484c7eb1297167bdef420" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "transliterate", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "addClosingVirama", "datatype" : "java.lang.Boolean", "index" : 1, "routing_param" : false }, { "name" : "text", "index" : 2, "routing_param" : false } ], "actor_path" : { "manager" : "TRANSLITERATOR_ACTOR", "operation" : "transliterate", "router" : "LANGUAGE_REQUEST_ROUTER" }, "request_path" : { "type" : "POST", "url" : "/v2/language/tools/transliterate/*", "path_params" : [ "language_id" ], "request_params" : [ "addClosingVirama" ] } }
,{ "_id" : { "$oid" : "582484e4eb1297167bdef421" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getTopWords", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package java.util Calendar Date\njava::import -package com.ilimi.graph.common DateUtils\njava::import -package com.ilimi.graph.dac.model Node Relation\nset filters [java::new HashMap]\n$filters put \"objectType\" \"Word\"\n$filters put \"graph_id\" $language_id\nset statusList [java::new ArrayList]\n$statusList add \"Live\"\n$statusList add \"Draft\"\n$filters put \"status\" $statusList\nset calendar [java::call Calendar getInstance]\n$calendar add [java::field Calendar DAY_OF_MONTH] [java::new Integer -2]\nset dateValue [$calendar getTime]\nset dateStr [java::call DateUtils format $dateValue]\nset dateRange [java::new HashMap]\n$dateRange put \"max\" $dateStr\n$filters put \"lastUpdatedOn\" $dateRange\nset limit [java::new Integer 5]\nset exists [java::new ArrayList]\n$exists add \"primaryMeaningId\"\nset notExists [java::new ArrayList]\n$notExists add \"pictures\"\n$notExists add \"pronunciations\"\nset sortMap [java::new HashMap]\n$sortMap put \"lastUpdatedOn\" \"desc\"\nset null_var [java::null]\nset empty_list [java::new ArrayList]\nset empty_map [java::new HashMap]\nset searchResponse [indexSearch $null_var $null_var $filters $exists $notExists $sortMap $empty_list $null_var $limit]\nset searchResultsMap [$searchResponse getResult]\nset compositeSearchResponse [groupSearchResultByObjectType $searchResultsMap]\nreturn $compositeSearchResponse", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "POST", "url" : "/v2/language/*/dashboard/words", "path_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "582484e9eb1297167bdef422" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "langugeSearch_v3", "api_id" : "ekstep.languauge.search", "version" : "3.0", "body" : "#This script acts as the entry point for langugae search\n#Input: Query, Filters, exists, not_exits, facets, sort_by and limit\n#Output: Search results, if its not a word chain request; Word chains (words and relations) if its a word chain request\npackage require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset objectType [java::null]\nset graphId \"domain\"\nset wordChains_limit 0\nset ruleNode [java::null]\nset weightagesMap [java::new HashMap]\nset baseConditions [java::new HashMap]\nset fuzzySearch \"false\"\nset wordChainsQuery \"false\"\nset languageIdSize 0\nset request_map [java::new HashMap]\nset wordChainsLimit 10\nset traversalRuleDefinition \"TraversalRule\"\nset weightagesMap [java::new HashMap]\n# check if its a fuzzy search\nset isFuzzyNull [java::isnull $fuzzy]\nif {$isFuzzyNull == 0} {\nset fuzzyString [$fuzzy toString]\nset fuzzySearch $fuzzyString\n}\n# check if its a traversal based search\nset isTraversalIdNull [java::isnull $traversals]\nif {$isTraversalIdNull == 0} {\n# set fuzzySearch \"true\"\nset wordChainsQuery \"true\"\nset traversalsSize [$traversals size]\nif {$traversalsSize > 0} {\nset traversalId [$traversals get 0]\n}\n}\nset isLimitNull [java::isnull $limit]\nif {$isLimitNull == 0} {\nset wordChainsLimit $limit\n}\nset isFiltersNull [java::isnull $filters]\nif {$isFiltersNull == 1} {\nset filters [java::new HashMap]\n}\nset languageIdObj [$filters get \"language_id\"]\nset languageId [java::cast ArrayList $languageIdObj]\n# Set Graph Id from filter\nset isLanguageIdNull [java::isnull $languageId]\nif {$isLanguageIdNull == 0} {\nset languageIdSize [$languageId size]\nif {$languageIdSize > 0} {\nset language [$languageId get 0]\nset graphId $language\n}\n$filters remove \"language_id\"\n$filters put \"graph_id\" $languageIdObj\n}\nif {$isLanguageIdNull == 1 || $languageIdSize == 0} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_INVALID_REQUEST\"\n$result_map put \"message\" \"At least one language Id is mandatory\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n#copy request parameters for Search request\n$request_map put \"query\" $query\n$request_map put \"exists\" $exists\n$request_map put \"not_exists\" $not_exists\n$request_map put \"sort_by\" $sort_by\n$request_map put \"facets\" $facets\n$request_map put \"limit\" $limit\n$request_map put \"fuzzy\" $fuzzy\n# enhance request object for traversal\nif {$wordChainsQuery == \"true\"} {\n$request_map put \"traversal\" [java::new Boolean \"true\"]\n#get rule node for traversal\nset get_rule_response [getDataNode $graphId $traversalId]\nset get_rule_response_error [check_response_error $get_rule_response]\nif {$get_rule_response_error} {\nreturn $get_rule_response\n}\nset ruleNode [get_resp_value $get_rule_response \"node\"]\nset rule_def_node [getDefinition $graphId $traversalRuleDefinition]\nset def_node [get_resp_value $rule_def_node \"definition_node\"]\nset ruleObject [convert_graph_node $ruleNode $def_node]\nset ruleMetadata [$ruleNode getMetadata]\n#get objectType from rule node\nset objectType [$ruleObject get \"ruleObjectType\"]\nset isObjectTypeNull [java::isnull $objectType]\nif {$isObjectTypeNull == 0} {\n$filters put \"objectType\" $objectType\n}\nset searchResultsLimit [$ruleObject get \"maxWords\"]\nset limit $searchResultsLimit\n}\n#add the updated filters back to the request\n$request_map put \"filters\" $filters\n#do the search on elasticsearch\nset searchResponse [indexSearch $traversals $query $filters $exists $not_exists $sort_by $facets $fuzzy $limit]\nset searchResultsMap [$searchResponse getResult]\n#if its not a traversal search, group results by object type and return\nif {$wordChainsQuery == \"false\"} {\nset compositeSearchResponse [groupSearchResultByObjectType $searchResultsMap]\nreturn $compositeSearchResponse\n}\n#if its a traversal search, retreive results and form word chains\nset words [$searchResultsMap get \"results\"]\nset wordChainResponse [getWordChains $graphId $ruleObject $words $wordChainsLimit]\nreturn $wordChainResponse", "type" : "SCRIPT", "parameters" : [ { "name" : "traversals", "datatype" : "java.util.ArrayList", "index" : 0, "routing_param" : false }, { "name" : "query", "datatype" : "java.lang.String", "index" : 1, "routing_param" : false }, { "name" : "filters", "datatype" : "java.util.HashMap", "index" : 2, "routing_param" : false }, { "name" : "exists", "datatype" : "java.util.ArrayList", "index" : 3, "routing_param" : false }, { "name" : "not_exists", "datatype" : "java.util.ArrayList", "index" : 4, "routing_param" : false }, { "name" : "sort_by", "datatype" : "java.util.HashMap", "index" : 5, "routing_param" : false }, { "name" : "facets", "datatype" : "java.util.ArrayList", "index" : 6, "routing_param" : false }, { "name" : "fuzzy", "datatype" : "java.lang.Boolean", "index" : 7, "routing_param" : false }, { "name" : "limit", "datatype" : "java.lang.Integer", "index" : 8, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/search" } }
,{ "_id" : { "$oid" : "5829f16ceb1297167bdef423" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_qe_retireInvalidWords", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package org.ekstep.language.measures WordMeasures\njava::import -package org.ekstep.language.measures.entity WordComplexity\nproc proc_getWords {language_id startPosition resultSize} {\nset nodes [java::new ArrayList]\nset search [java::new HashMap]\n$search put \"objectType\" \"Word\"\n$search put \"nodeType\" \"DATA_NODE\"\n$search put \"startPosition\" [java::new Integer $startPosition]\n$search put \"resultSize\" [java::new Integer $resultSize]\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nputs \"error searching words\"\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\n$nodes add $graph_node\n}\n}\nreturn $nodes\n}\nset minVal [java::call Integer parseInt $min 16]\nset maxVal [java::call Integer parseInt $max 16]\nset words [java::new ArrayList]\nset count 1\nset startPosition 0\nset resultSize 5000\nwhile {$count > 0} {\nset nodeList [proc_getWords $language_id $startPosition $resultSize]\nputs \"batch completed - $startPosition\"\nset size [$nodeList size]\nif {$size > 0} {\njava::for {Node graph_node} $nodeList {\nset identifier [java::prop $graph_node identifier]\nset metadata [java::prop -noconvert $graph_node metadata]\nset lemma [$metadata get \"lemma\"]\nset lemma [[java::new String [$lemma toString]] trim]\nset lemma [java::new String $lemma]\nset char [$lemma charAt 0]\nscan $char \"%c\" num\nset intCode [java::new Integer $num]\nset arr [java::new {Integer[]} {1}]\n$arr set 0 $intCode\nset uc [java::call -noconvert String format \"%04x\" $arr]\njava::try {\nset ucVal [java::call Integer parseInt $uc 16]\nif {$ucVal < $minVal || $ucVal > $maxVal} {\nputs \"deleting - $lemma - $identifier\"\n$words add $lemma\nset delete_response [deleteDataNode $language_id $identifier]\n}\n} catch {Exception err} {\nputs \"deleting - $lemma - $identifier\"\n$words add $lemma\nset delete_response [deleteDataNode $language_id $identifier]\n}\n}\n} else {\nset count 0\nbreak\n}\nset startPosition [expr {$startPosition+5000}]\n}\nset wsize [$words size]\nputs \"words - $wsize\"\nreturn $words", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "min", "index" : 1, "routing_param" : false }, { "name" : "max", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/lang_qe_retireInvalidWords" } }
,{ "_id" : { "$oid" : "582e8e75eb1297167b87574a" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "addOutRelations", "type" : "COMMAND", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "start_node_id", "index" : 1, "routing_param" : false }, { "name" : "relation_type", "index" : 2, "routing_param" : false }, { "name" : "end_node_id", "datatype" : "java.util.ArrayList", "index" : 3, "routing_param" : false } ], "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.GraphMgrImpl", "operation" : "addOutRelations", "router" : "GRAPH_REQUEST_ROUTER" }, "request_path" : { "type" : "POST", "url" : "/v1/graph/*/add/outrelations", "path_params" : [ "graph_id" ] } }
,{ "_id" : { "$oid" : "58381a87eb12974f2a2ac189" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_getItemUsageReport", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nset graph_id \"domain\"\nset object_type \"AssessmentItem\"\nset search [java::new HashMap]\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $graph_id $search_criteria]\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset item_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nset itemMap [java::new HashMap]\nset itemId [java::prop $graph_node \"identifier\"]\n$itemMap put \"identifier\" $itemId\nset metadata [java::prop $graph_node \"metadata\"]\n$itemMap put \"type\" [$metadata get \"type\"]\n$itemMap put \"question\" [$metadata get \"question\"]\n$itemMap put \"title\" [$metadata get \"title\"]\n$itemMap put \"qlevel\" [$metadata get \"qlevel\"]\nset inRelations [java::prop $graph_node \"inRelations\"]\nset hasInRelations [isNotEmpty $inRelations]\nset count 0\nif {$hasInRelations} {\njava::for {Relation relation} $inRelations {\nif {[java::prop $relation \"startNodeObjectType\"] == \"ItemSet\" && [java::prop $relation \"relationType\"] == \"hasMember\"} {\nset count [expr $count + 1]\n}\n}\n}\n$itemMap put \"contentCount\" $count\n$item_list add $itemMap\n}\nset size [$item_list size]\nputs \"size is $size\"\nset result_map [java::new HashMap]\n$result_map put \"items\" $item_list\nset response_list [create_response $result_map]\nset response_csv [convert_response_to_csv $response_list \"items\"]\nreturn $response_csv", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_getItemUsageReport" } }
,{ "_id" : { "$oid" : "5845a8a6eb12974f2a2ac18a" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_getGenieContentData", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList List\njava::import -package com.ilimi.graph.dac.model Node Relation\nset graph_id \"domain\"\nset object_type \"Content\"\nset search [java::new HashMap]\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\n$search put \"status\" \"Live\"\nset contentTypes [java::new ArrayList]\n$contentTypes add \"Story\"\n$contentTypes add \"Worksheet\"\n$contentTypes add \"Game\"\n$contentTypes add \"Collection\"\n$search put \"contentType\" $contentTypes\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $graph_id $search_criteria]\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset item_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nset itemMap [java::new HashMap]\nset itemId [java::prop $graph_node \"identifier\"]\n$itemMap put \"identifier\" $itemId\nset metadata [java::prop $graph_node \"metadata\"]\n$itemMap put \"name\" [$metadata get \"name\"]\n$itemMap put \"contentType\" [$metadata get \"contentType\"]\n$itemMap put \"size\" [$metadata get \"size\"]\n$itemMap put \"language\" [$metadata get \"language\"]\n$item_list add $itemMap\n}\nset result_map [java::new HashMap]\n$result_map put \"content\" $item_list\nreturn $result_map", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_getGenieContentData" } }
,{ "_id" : { "$oid" : "584f17ac0c16cb77c48281f9" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "rejectFlaggedContent", "api_id" : "ekstep.domain.content.flag.reject", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset graph_id \"domain\"\nset object_type \"Content\"\nset resp_get_node [getDataNode $graph_id $content_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node\n} else {\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset node_object_type [java::prop $graph_node \"objectType\"]\nif {$node_object_type == $object_type} {\nset node_metadata [java::prop $graph_node \"metadata\"]\nset status_val [$node_metadata get \"status\"]\nset status_val_str [java::new String [$status_val toString]]\nset isFlaggedstate [$status_val_str equalsIgnoreCase \"Flagged\"]\nif {$isFlaggedstate == 1} {\nset request [java::new HashMap]\n$request put \"flagReasons\" [java::null]\n$request put \"versionKey\" [$node_metadata get \"versionKey\"]\n$request put \"status\" \"Live\"\n$request put \"objectType\" $object_type\n$request put \"identifier\" $content_id\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset domain_obj [convert_to_graph_node $request $def_node]\nset create_response [updateDataNode $graph_id $content_id $domain_obj]\nreturn $create_response\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_NOT_FLAGGED\"\n$result_map put \"message\" \"Content $content_id is not flagged to reject\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_NODE_NOT_FOUND\"\n$result_map put \"message\" \"$object_type $content_id not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "content_id", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/content/flag/reject/*", "path_params" : [ "content_id" ] } }
,{ "_id" : { "$oid" : "584f17ba0c16cb77c48281fa" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_cleanUpContentBody", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nproc proc_isEmpty {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 1} {\nset exist true\n} else {\nset strValue [$value toString]\nset newStrValue [java::new String $strValue]\nset strLength [$newStrValue length]\nif {$strLength == 0} {\nset exist true\n}\n}\n} catch {Exception err} {\nset exist true\n}\nreturn $exist\n}\nset object_type \"Content\"\nset graph_id \"domain\"\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $object_type\nset contentTypes [java::new ArrayList]\n$contentTypes add \"Template\"\n$map put \"contentType\" $contentTypes\nputs \"updating templates\"\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset content_id [java::prop $graph_node \"identifier\"]\nset metadata [java::prop $graph_node \"metadata\"]\nset body [$metadata get \"body\"]\nset bodyEmpty [proc_isEmpty $body]\nif {!$bodyEmpty} {\nputs \"cleaning content body: $content_id\"\nset bodyResponse [updateContentBody $content_id $body]\n$metadata put \"body\" [java::null]\nset update_response [updateDataNode $graph_id $content_id $graph_node]\nset check_error [check_response_error $update_response]\nif {$check_error} {\nset messages [get_resp_value $update_response \"messages\"]\njava::for {String msg} $messages {\nputs \"$msg\"\n}\n}\n}\n}\nputs \"update complete\"\n}\nreturn \"Updation Complete\"", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_cleanUpContentBody" } }
,{ "_id" : { "$oid" : "584f185f0c16cb77c48281fb" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "optimizeImageAsset", "type" : "COMMAND", "parameters" : [ { "name" : "content_id", "index" : 0, "routing_param" : false } ], "actor_path" : { "manager" : "OPTIMIZER_ACTOR", "operation" : "optimizeImage", "router" : "LEARNING_REQUEST_ROUTER" }, "request_path" : { "type" : "POST", "url" : "/v2/asset/optimizeImage/*", "path_params" : [ "content_id" ] } }
,{ "_id" : { "$oid" : "584f186e0c16cb77c48281fc" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getContentBody", "type" : "COMMAND", "parameters" : [ { "name" : "content_id", "index" : 0, "routing_param" : false } ], "actor_path" : { "manager" : "CONTENT_STORE_ACTOR", "operation" : "getContentBody", "router" : "LEARNING_REQUEST_ROUTER" }, "request_path" : { "type" : "POST", "url" : "/v2/contentstore/body/read/*", "path_params" : [ "content_id" ] } }
,{ "_id" : { "$oid" : "584f18720c16cb77c48281fd" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateContentBody", "type" : "COMMAND", "parameters" : [ { "name" : "content_id", "index" : 0, "routing_param" : false }, { "name" : "body", "index" : 1, "routing_param" : false } ], "actor_path" : { "manager" : "CONTENT_STORE_ACTOR", "operation" : "updateContentBody", "router" : "LEARNING_REQUEST_ROUTER" }, "request_path" : { "type" : "POST", "url" : "/v2/contentstore/body/update/*", "path_params" : [ "content_id" ] } }
,{ "_id" : { "$oid" : "584f1c8b1ada1704e5c172f4" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getRhymingWords", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getWordList {wordIds language_id} {\nset filters [java::new HashMap]\n$filters put \"objectType\" \"Word\"\n$filters put \"graph_id\" $language_id\n$filters put \"identifier\" $wordIds\n$filters put \"status\" [java::new ArrayList]\nset limit [java::new Integer 10000]\nset null_var [java::null]\nset empty_list [java::new ArrayList]\nset empty_map [java::new HashMap]\nset searchResponse [indexSearch $null_var $null_var $filters $empty_list $empty_list $empty_map $empty_list $null_var $limit]\nset searchResultsMap [$searchResponse getResult]\nset wordsList [java::cast List [$searchResultsMap get \"results\"]]\nset wordsListNull [java::isnull $wordsList]\nset result [java::new ArrayList]\nif {$wordsListNull == 0 && [$wordsList size] >= 0} {\njava::for {Object wordObj} $wordsList {\nset wordObject [java::cast Map $wordObj]\nset identifier [$wordObject get \"identifier\"]\nset lemma [$wordObject get \"lemma\"]\nset word [java::new HashMap]\n$word put \"lemma\" $lemma\n$word put \"identifier\" $identifier\n$result add $word\n}\n}\nreturn $result\n}\nproc getRhymingSoundWords {word_node language_id} {\nset relationIds [java::new ArrayList]\nset inRelations [java::prop $word_node \"inRelations\"]\nset actualWordId [java::prop $word_node \"identifier\"]\nset hasRelations [isNotEmpty $inRelations]\nif {$hasRelations} {\njava::for {Relation relation} $inRelations {\nset startType [java::prop $relation \"startNodeObjectType\"]\nif {[java::prop $relation \"startNodeObjectType\"] == \"WordSet\"} {\nset start_node_metadata [java::prop $relation \"startNodeMetadata\"]\nset hasMetadata [isNotEmpty $start_node_metadata]\nif {$hasMetadata} {\nset wordSetType [$start_node_metadata get \"type\"]\nset wordSetType [$wordSetType toString]\nif { $wordSetType == \"RhymingSound\"} {\nset setId [java::prop $relation \"startNodeId\"]\nset rhymingSoundResponse [getSetMembers $language_id $setId]\nset rhymingSoundSetMembers [get_resp_value $rhymingSoundResponse \"members\"]\nset hasRhymingSoundSetMembers [isNotEmpty $rhymingSoundSetMembers]\nif {$hasRhymingSoundSetMembers} {\n$rhymingSoundSetMembers remove $actualWordId\nset hasRhymingSoundSetMembers [isNotEmpty $rhymingSoundSetMembers]\nif {$hasRhymingSoundSetMembers} {\nset rhymingSoundWords [getWordList $rhymingSoundSetMembers $language_id]\nreturn $rhymingSoundWords\n}\n}\n}\n}\n}\n}\n}\nreturn [java::new ArrayList]\n}\nset searchProperty [java::new HashMap]\n$searchProperty put \"lemma\" $lemma\nset property [create_search_property $searchProperty]\nset search_response [getNodesByProperty $language_id $property]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n}\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset isListNull [java::isnull $graph_nodes]\nif {$isListNull == 0} {\n#set graph_nodes [java::cast ArrayList $graph_nodes]\nset listSize [$graph_nodes size]\nif {$listSize > 0} {\nset word_node [$graph_nodes get 0]\nset word_node [java::cast Node $word_node]\nset words [getRhymingSoundWords $word_node $language_id]\n# create rhyming sound words response\nset resp_object [java::new HashMap]\n$resp_object put \"words\" $words\nset response [create_response $resp_object]\nreturn $response\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "lemma", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/language/tools/rhymingWords/" } }
,{ "_id" : { "$oid" : "584f1c8c1ada1704e5c172f5" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "flagWord", "body" : "package require java\njava::import -package java.util HashMap Map Date\njava::import -package java.util ArrayList List\njava::import -package java.util HashSet Set\njava::import -package java.util Arrays\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.graph.common DateUtils\nset object_type \"Word\"\nproc isNotEmpty {list} {\nset exist false\nset isListNull [java::isnull $list]\nif {$isListNull == 0} {\nset listSize [$list size]\nif {$listSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc addFlagReasons {flagResaons node_metadata} {\nset existingFlagReasons [$node_metadata get \"flagReasons\"]\nset isExistingFlagReasonsNull [java::isnull $existingFlagReasons]\nif {$isExistingFlagReasonsNull == 0} {\nset arr_instance [java::instanceof $existingFlagReasons {String[]}]\nif {$arr_instance == 1} {\nset existingFlagReasons [java::cast {String[]} $existingFlagReasons]\nset existingFlagReasons [java::call Arrays asList $existingFlagReasons]\n} else {\nset existingFlagReasons [java::cast ArrayList $existingFlagReasons]\n}\nif {[isNotEmpty $existingFlagReasons]} {\nset flagReasonsSet [java::new HashSet $existingFlagReasons]\n$flagReasonsSet addAll $flagResaons\nset flagReasonsList [java::new ArrayList $flagReasonsSet]\nreturn $flagReasonsList\n}\n}\nreturn $flagResaons\n}\nproc addFlaggedBy {flaggedBy node_metadata} {\nset flaggedByList [java::new ArrayList]\n$flaggedByList add $flaggedBy\nset existingFlaggedBy [$node_metadata get \"flaggedBy\"]\nset isExistingFlaggedByNull [java::isnull $existingFlaggedBy]\nif {$isExistingFlaggedByNull == 0} {\nset arr_instance [java::instanceof $existingFlaggedBy {String[]}]\nif {$arr_instance == 1} {\nset existingFlaggedBy [java::cast {String[]} $existingFlaggedBy]\nset existingFlaggedBy [java::call Arrays asList $existingFlaggedBy]\n} else {\nset existingFlaggedBy [java::cast ArrayList $existingFlaggedBy]\n}\nif {[isNotEmpty $existingFlaggedBy]} {\nset flaggedBySet [java::new HashSet $existingFlaggedBy]\n$flaggedBySet addAll $flaggedByList\nset flaggedByList [java::new ArrayList $flaggedBySet]\nreturn $flaggedByList\n}\n}\nreturn $flaggedByList\n}\nset resp_get_node [getDataNode $language_id $word_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset node_object_type [java::prop $graph_node \"objectType\"]\nif {$node_object_type == $object_type} {\nset node_metadata [java::prop $graph_node \"metadata\"]\nset status_val [$node_metadata get \"status\"]\nset status_val_str [java::new String [$status_val toString]]\nset isLiveState [$status_val_str equalsIgnoreCase \"Live\"]\nset isFlaggedState [$status_val_str equalsIgnoreCase \"Flagged\"]\nif {$isLiveState == 1 || $isFlaggedState == 1} {\nset request [java::new HashMap]\n$request put \"flaggedBy\" [addFlaggedBy $flaggedBy $node_metadata]\n$request put \"versionKey\" $versionKey\n$request put \"status\" \"Flagged\"\n$request put \"lastFlaggedOn\" [java::call DateUtils format [java::new Date]]\nset isFlagReasonsNull [java::isnull $flagReasons]\nif {$isFlagReasonsNull == 0} {\nset flagReasons [java::cast ArrayList $flagReasons]\nset hasFlagReasons [isNotEmpty $flagReasons]\nif {$hasFlagReasons} {\nset flagResaons [addFlagReasons $flagReasons $node_metadata]\n$request put \"flagReasons\" $flagResaons\n}\n}\n$request put \"objectType\" $object_type\n$request put \"identifier\" $word_id\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset domain_obj [convert_to_graph_node $request $def_node]\nset create_response [updateDataNode $language_id $word_id $domain_obj]\nreturn $create_response\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_WORD_NOT_FLAGGABLE\"\n$result_map put \"message\" \"Word $word_id can not be flagged\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_NODE_NOT_FOUND\"\n$result_map put \"message\" \"$object_type $word_id not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "word_id", "index" : 1, "routing_param" : false }, { "name" : "flagReasons", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false }, { "name" : "flaggedBy", "index" : 3, "routing_param" : false }, { "name" : "versionKey", "index" : 4, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/language/dictionary/word/flag/*/*", "path_params" : [ "language_id", "word_id" ] } }
,{ "_id" : { "$oid" : "584f1c9d1ada1704e5c172f6" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createWordList_v3", "api_id" : "ekstep.language.wordlist.create", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset lemma_list [java::new ArrayList]\nset object_type \"Word\"\nset set_type \"WordList\"\nset error_status \"Failed\"\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $object_type\n$map put \"lemma\" $words\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset word_id_list [java::new ArrayList]\nset graphSize [$graph_nodes size]\nset lemmaSize [$words size]\nif {$graphSize < $lemmaSize} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"NODE_NOT_FOUND\"\n$result_map put \"message\" \"Node(s) not found\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset err_response [create_error_response $result_map]\nreturn $err_response\n}\njava::for {Node graph_node} $graph_nodes {\nset word_id [java::prop $graph_node \"identifier\"]\n$word_id_list add $word_id\n}\nset set_node [java::new Node]\njava::prop $set_node \"metadata\" $metadata\nset resp [createSet $language_id $word_id_list $set_type $object_type $set_node]\nupdateWordListMembership $language_id $word_id_list\nreturn $resp\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "words", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false }, { "name" : "metadata", "datatype" : "java.util.HashMap", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/wordlists/create", "request_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "584f1c9d1ada1704e5c172f7" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getWordList_v3", "api_id" : "ekstep.language.wordlist.read", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc getOutRelations {graph_node} {\nset outRelations [java::prop $graph_node \"outRelations\"]\nreturn $outRelations\n}\nproc isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getNodeRelationIds {graph_node relationType property} {\nset relationIds [java::new ArrayList]\nset outRelations [getOutRelations $graph_node]\nset hasRelations [isNotEmpty $outRelations]\nif {$hasRelations} {\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"endNodeObjectType\"] == $relationType} {\nset prop_value [java::prop $relation $property]\n$relationIds add [java::prop $relation $property]\n}\n}\n}\nreturn $relationIds\n}\nset lemma_list [java::new ArrayList]\nset object_type \"WordList\"\nset map [java::new HashMap]\n$map put \"nodeType\" \"SET\"\n$map put \"objectType\" $object_type\n$map put \"identifier\" $wordlist_id\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset result_map [java::new HashMap]\njava::try {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset set_metadata [java::new HashMap]\nset word_id_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nset word_ids [getNodeRelationIds $graph_node \"Word\" \"endNodeId\"]\nset not_empty_list [isNotEmpty $word_ids]\nif {$not_empty_list} {\n$word_id_list addAll $word_ids\n}\nset set_metadata [java::prop $graph_node \"metadata\"]\n}\nset set_map [java::new HashMap]\n$set_map put \"identifier\" $wordlist_id\n$set_map put \"metadata\" $set_metadata\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" \"Word\"\n$map put \"identifier\" $word_id_list\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset lemma_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nset word_metadata [java::prop $graph_node \"metadata\"]\n$lemma_list add [$word_metadata get \"lemma\"]\n}\n$set_map put \"words\" $lemma_list\n$result_map put \"wordlist\" $set_map\n}\n} catch {Exception err} {\n$result_map put \"error\" [$err getMessage]\n}\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "wordlist_id", "index" : 1, "routing_param" : true } ], "request_path" : { "type" : "GET", "url" : "/v3/wordlists/read/*", "path_params" : [ "wordlist_id" ], "request_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "584f1c9e1ada1704e5c172f8" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getWordLists_v3", "api_id" : "ekstep.language.wordlist.list", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc getOutRelations {graph_node} {\nset outRelations [java::prop $graph_node \"outRelations\"]\nreturn $outRelations\n}\nproc isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getMemberLemmas {graph_node} {\nset relationIds [java::new ArrayList]\nset outRelations [getOutRelations $graph_node]\nset hasRelations [isNotEmpty $outRelations]\nif {$hasRelations} {\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"endNodeObjectType\"] == \"Word\"} {\nset end_node_metadata [java::prop $relation \"endNodeMetadata\"]\nset hasMetadata [isNotEmpty $end_node_metadata]\nif {$hasMetadata} {\n$relationIds add [$end_node_metadata get \"lemma\"]\n}\n}\n}\n}\nreturn $relationIds\n}\nset lemma_list [java::new ArrayList]\nset object_type \"WordList\"\nset map [java::new HashMap]\n$map put \"nodeType\" \"SET\"\n$map put \"objectType\" $object_type\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset result_map [java::new HashMap]\njava::try {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset word_list_map [java::new HashMap]\njava::for {Node graph_node} $graph_nodes {\nset set_id [java::prop $graph_node \"identifier\"]\nset set_map [java::new HashMap]\n$set_map put \"identifier\" $set_id\n$set_map put \"metadata\" [java::prop $graph_node \"metadata\"]\nset lemma_list [getMemberLemmas $graph_node]\nset not_empty_list [isNotEmpty $lemma_list]\nif {$not_empty_list} {\n$set_map put \"words\" $lemma_list\n}\n$word_list_map put $set_id $set_map\n}\n$result_map put \"wordlists\" $word_list_map\n} catch {Exception err} {\n$result_map put \"error\" [$err getMessage]\n}\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "GET", "url" : "/v3/wordlists/list", "request_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "584f1c9f1ada1704e5c172f9" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateWordList_v3", "api_id" : "ekstep.language.wordlist.update", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset lemma_list [java::new ArrayList]\nset object_type \"Word\"\nset collection_type \"SET\"\nset set_type \"WordList\"\nset wordIds [java::new ArrayList]\nset isWordNull [java::isnull $words]\nif {$isWordNull == 0} {\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $object_type\n$map put \"lemma\" $words\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset word_id_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nset word_id [java::prop $graph_node \"identifier\"]\n$word_id_list add $word_id\n}\n$wordIds addAll $word_id_list\nset resp [addMembers $language_id $wordlist_id $collection_type $word_id_list]\nset check_error_add_member [check_response_error $resp]\nif {$check_error_add_member} {\nreturn $resp\n}\n}\n}\nset isRemoveWordsNull [java::isnull $removeWords]\nif {$isRemoveWordsNull == 0} {\nset rm_map [java::new HashMap]\n$rm_map put \"nodeType\" \"DATA_NODE\"\n$rm_map put \"objectType\" $object_type\n$rm_map put \"lemma\" $removeWords\nset rm_search_criteria [create_search_criteria $rm_map]\nset rm_search_response [searchNodes $language_id $rm_search_criteria]\nset rm_check_error [check_response_error $rm_search_response]\nif {$rm_check_error} {\nreturn $rm_search_response;\n} else {\nset rm_graph_nodes [get_resp_value $rm_search_response \"node_list\"]\nset rm_word_id_list [java::new ArrayList]\njava::for {Node rm_graph_node} $rm_graph_nodes {\nset rm_word_id [java::prop $rm_graph_node \"identifier\"]\n$rm_word_id_list add $rm_word_id\n}\n$wordIds addAll $rm_word_id_list\nset rm_resp [removeMembers $language_id $wordlist_id $collection_type $rm_word_id_list]\nset check_error_rm_member [check_response_error $rm_resp]\nif {$check_error_rm_member} {\nreturn $rm_resp\n}\n}\n}\nupdateWordListMembership $language_id $wordIds\nset get_resp [getWordList $language_id $wordlist_id]\nset get_resp_check_error [check_response_error $get_resp]\nif {$get_resp_check_error} {\nreturn $get_resp;\n}\nset word_list_node [get_resp_value $get_resp \"wordlist\"]\nset words_list_obj [$word_list_node get \"words\"]\nset words_list [java::cast ArrayList $words_list_obj]\nset words_list_size [$words_list size]\nif { $words_list_size > 0 } {\nset up_map [java::new HashMap]\n$up_map put \"nodeType\" \"DATA_NODE\"\n$up_map put \"objectType\" $object_type\n$up_map put \"lemma\" $words_list\nset up_search_criteria [create_search_criteria $up_map]\nset up_search_response [searchNodes $language_id $up_search_criteria]\nset up_check_error [check_response_error $up_search_response]\nif {$up_check_error} {\nreturn $up_search_response;\n} else {\nset up_graph_nodes [get_resp_value $up_search_response \"node_list\"]\nset up_word_id_list [java::new ArrayList]\njava::for {Node up_graph_node} $up_graph_nodes {\nset up_word_id [java::prop $up_graph_node \"identifier\"]\n$up_word_id_list add $up_word_id\n}\nset set_node [java::new Node]\njava::prop $set_node \"identifier\" $wordlist_id\njava::prop $set_node \"metadata\" $metadata\nset up_resp [updateSet $language_id $up_word_id_list $set_type $object_type $set_node]\nset check_error_up_resp [check_response_error $up_resp]\nreturn $up_resp\n}\n} else {\nreturn \"Ok\"\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "wordlist_id", "index" : 1, "routing_param" : true }, { "name" : "words", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false }, { "name" : "metadata", "datatype" : "java.util.HashMap", "index" : 3, "routing_param" : false }, { "name" : "removeWords", "datatype" : "java.util.ArrayList", "index" : 4, "routing_param" : false } ], "request_path" : { "type" : "PATCH", "url" : "/v3/wordlists/update/*", "path_params" : [ "wordlist_id" ], "request_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "584f1ca01ada1704e5c172fa" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getTraversalRule_v3", "api_id" : "ekstep.language.traversalRules.read", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"TraversalRule\"\nset error_status \"Failed\"\nset get_node_response [getDataNode $language_id $rule_id]\nset get_node_response_error [check_response_error $get_node_response]\nif {$get_node_response_error} {\nreturn $get_node_response\n}\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset rule_node [get_resp_value $get_node_response \"node\"]\nset rule_obj [convert_graph_node $rule_node $def_node]\nset result_map [java::new HashMap]\n$result_map put \"rule\" $rule_obj\nset api_response [create_response $result_map]\nreturn $api_response", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "rule_id", "datatype" : "java.lang.String", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v3/traversals/read/*", "path_params" : [ "rule_id" ], "request_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "584f1ca01ada1704e5c172fb" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getTraversalRules_v3", "api_id" : "ekstep.language.traversalRules.list", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"TraversalRule\"\nset map [java::new HashMap]\n$map put \"objectType\" $object_type\n$map put \"nodeType\" \"DATA_NODE\"\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset obj_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nset domain_obj [convert_graph_node $graph_node $def_node]\n$obj_list add $domain_obj\n}\nset result_map [java::new HashMap]\n$result_map put \"rules\" $obj_list\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "GET", "url" : "/v3/traversals/list", "request_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "584f1ca11ada1704e5c172fc" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createSynset_V3", "api_id" : "ekstep.language.synsets.create", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset lemma_list [java::new ArrayList]\nset object_type \"Synset\"\nset error_status \"Failed\"\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$synset put \"objectType\" $object_type\nset synset_obj [convert_to_graph_node $synset $def_node]\nset create_response [createDataNode $language_id $synset_obj]\nreturn $create_response", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "synset", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/synsets/create", "request_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "584f1ca11ada1704e5c172fd" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateSynset_V3", "api_id" : "ekstep.language.synset.update", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset lemma_list [java::new ArrayList]\nset object_type \"Synset\"\nset error_status \"Failed\"\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$synset put \"objectType\" $object_type\n$synset put \"identifier\" $synset_id\nset synset_obj [convert_to_graph_node $synset $def_node]\nset create_response [updateDataNode $language_id $synset_id $synset_obj]\nreturn $create_response", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "synset_id", "index" : 1, "routing_param" : false }, { "name" : "synset", "datatype" : "java.util.HashMap", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "PATCH", "url" : "/v3/synsets/update/*", "path_params" : [ "synset_id" ], "request_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "584f1ca21ada1704e5c172fe" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "searchSynset_V3", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_null [java::isnull $search]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_INVALID_SEARCH_REQUEST\"\n$result_map put \"message\" \"Invalid Search Request\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset invalidObjectType false\nset object_type_param [$search get \"objectType\"]\nset object_type_param_null [java::isnull $object_type_param]\nif {$object_type_param_null == 0} {\nset str_object_type_param [$object_type_param toString]\nif {$str_object_type_param != \"Synset\"} {\nset invalidObjectType true\n}\n}\nif {$invalidObjectType} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_SYNSET_NOT_FOUND\"\n$result_map put \"message\" \"No synset found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset object_type \"Synset\"\nset check_null [java::isnull $search]\nif {$search == 1} {\nset $search [java::new HashMap]\n}\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\nset sort [$search get \"sort\"]\nset limit [$search get \"limit\"]\n$search put \"sortBy\" $sort\n$search put \"resultSize\" $limit\n$search remove \"sort\"\n$search remove \"limit\"\nset returnFields false\nset fieldList [$search get \"fields\"]\nset is_fieldList_null [java::isnull $fieldList]\nif {$is_fieldList_null == 0} {\n$search remove \"fields\"\nset returnFields true\n}\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset obj_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nif {$returnFields} {\nset synset_obj [convert_graph_node $graph_node $def_node $fieldList]\n} else {\nset synset_obj [convert_graph_node $graph_node $def_node]\n}\n$obj_list add $synset_obj\n}\nset result_map [java::new HashMap]\n$result_map put \"content\" $obj_list\nset response_list [create_response $result_map]\nreturn $response_list\n}\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "search", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/public/dictionary/synset/search/*", "path_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "584f1ca41ada1704e5c172ff" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getSynset_V3", "api_id" : "ekstep.language.synsets.read", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset lemma_list [java::new ArrayList]\nset object_type \"Synset\"\nset error_status \"Failed\"\nset get_node_response [getDataNode $language_id $synset_id]\nreturn $get_node_response", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "synset_id", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v3/synsets/read/*", "path_params" : [ "synset_id" ], "request_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "584f1cca1ada1704e5c17300" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getPhoneticSpelling", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "addClosingVirama", "datatype" : "java.lang.Boolean", "index" : 1, "routing_param" : false }, { "name" : "word", "index" : 2, "routing_param" : false } ], "actor_path" : { "manager" : "TRANSLITERATOR_ACTOR", "operation" : "getPhoneticSpellingByLanguage", "router" : "LANGUAGE_REQUEST_ROUTER" }, "request_path" : { "type" : "POST", "url" : "/v2/language/tools/getPhoneticSpelling/*/*", "path_params" : [ "language_id", "word" ], "request_params" : [ "addClosingVirama" ] } }
,{ "_id" : { "$oid" : "584f1cd21ada1704e5c17301" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getWordFeatures", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "word", "index" : 1, "routing_param" : false } ], "actor_path" : { "manager" : "LEXILE_MEASURES_ACTOR", "operation" : "getWordFeatures", "router" : "LANGUAGE_REQUEST_ROUTER" }, "request_path" : { "type" : "POST", "url" : "/v1/language/*/lexileMeasures/getWordFeatures", "path_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "587cc882f9b5a21d50335dba" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getContentProperties", "type" : "COMMAND", "parameters" : [ { "name" : "content_id", "index" : 0, "routing_param" : false }, { "name" : "properties", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false } ], "actor_path" : { "manager" : "CONTENT_STORE_ACTOR", "operation" : "getContentProperties", "router" : "LEARNING_REQUEST_ROUTER" }, "request_path" : { "type" : "POST", "url" : "/v2/contentstore/properties/read/*", "path_params" : [ "content_id" ] } }
,{ "_id" : { "$oid" : "587cc89140648c197ee5c17e" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateContentProperties", "type" : "COMMAND", "parameters" : [ { "name" : "content_id", "index" : 0, "routing_param" : false }, { "name" : "properties", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false } ], "actor_path" : { "manager" : "CONTENT_STORE_ACTOR", "operation" : "updateContentProperties", "router" : "LEARNING_REQUEST_ROUTER" }, "request_path" : { "type" : "POST", "url" : "/v2/contentstore/properties/update/*", "path_params" : [ "content_id" ] } }
,{ "_id" : { "$oid" : "58935ff340648c553813a5ca" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getTransliteration", "api_id" : "ekstep.transliteration.get", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\nset transliterate [java::new HashMap]\nputs \"test $languages #lemma\"\njava::for {String language} $languages {\nif {$language == \"en\"} {\ncontinue\n}\nset transliterateResponse [transliterate $language [java::new Boolean \"true\"] $lemma]\nset get_node_response_error [check_response_error $transliterateResponse]\nif {$get_node_response_error} {\ncontinue\n}\nset transliterateResultMap [$transliterateResponse getResult]\nset transliterateResultMap [java::cast Map $transliterateResultMap]\nset outputText [$transliterateResultMap get \"output\"]\nset outputText [$outputText toString]\nset outputText [string trim $outputText]\nif { $outputText==$lemma } {\n#skip if output is same as input lemma\n} else {\n$transliterateResultMap put \"output\" $outputText\n$transliterate put $language $transliterateResultMap\n}\n}\nset result_map [java::new HashMap]\n$result_map put \"transliterations\" $transliterate\nset response_list [create_response $result_map]\nreturn $response_list", "type" : "SCRIPT", "parameters" : [ { "name" : "lemma", "index" : 0, "routing_param" : false }, { "name" : "languages", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/language/transliteration/*", "path_params" : [ "lemma" ], "request_params" : [ "languages" ] } }
,{ "_id" : { "$oid" : "5894272f40648c45e3cd738d" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getTranslation", "api_id" : "ekstep.translations.get", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc getOutRelations {graph_node} {\nset outRelations [java::prop $graph_node \"outRelations\"]\nreturn $outRelations\n}\nproc getInRelations {graph_node} {\nset inRelations [java::prop $graph_node \"inRelations\"]\nreturn $inRelations\n}\nproc isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc filterSynset {synset_ids languages} {\nset filteredSynsets [java::new ArrayList]\njava::for {String synset_id} $synset_ids {\nset index 0\nset invalidSynset 0\nset idArray [split $synset_id \":\"]\nforeach entry $idArray {\nset languageContains [$languages contains $entry]\nif {$languageContains == 1} {\n$filteredSynsets add $synset_id\n}\nset index [expr $index + 1]\n}\nif {$index == 1} {\nset idArray [split $synset_id \"_\"]\nforeach entry $idArray {\nset languageContains [$languages contains $entry]\nif {$languageContains == 1} {\n$filteredSynsets add $synset_id\n}\nset invalidSynset [expr $invalidSynset + 1]\n}\n}\nif {$invalidSynset == 1} {\nset languageContains [$languages contains \"en\"]\nif {$languageContains == 1} {\n$filteredSynsets add $synset_id\n}\n}\n}\nreturn $filteredSynsets\n}\nproc getInNodeRelationIds {graph_node relationType relationName property} {\nset relationIds [java::new ArrayList]\nset inRelations [getInRelations $graph_node]\nset hasRelations [isNotEmpty $inRelations]\nif {$hasRelations} {\njava::for {Relation relation} $inRelations {\nif {[java::prop $relation \"startNodeObjectType\"] == $relationType && [java::prop $relation \"relationType\"] == $relationName} {\nset prop_value [java::prop $relation $property]\n$relationIds add $prop_value\n}\n}\n}\nreturn $relationIds\n}\nset filters [java::new HashMap]\n$filters put \"objectType\" \"Word\"\n$filters put \"graph_id\" $language_id\n$filters put \"lemma\" $lemma\n$filters put \"status\" [java::new ArrayList]\nset limit [java::new Integer 1]\nset indexSearchCriteria [java::new HashMap]\n$indexSearchCriteria put \"filters\" $filters\n$indexSearchCriteria put \"limit\" $limit\nset searchResponse [compositeSearch $indexSearchCriteria]\nset searchResultsMap [$searchResponse getResult]\nset wordsList [java::cast List [$searchResultsMap get \"results\"]]\nset wordsListNull [java::isnull $wordsList]\nif {$wordsListNull == 1 || [$wordsList size] == 0} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_WORD_NOT_FOUND\"\n$result_map put \"message\" \"Word not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\nset wordObject [java::cast Map [$wordsList get 0]]\nset word_id [$wordObject get \"identifier\"]\nset object_type \"TranslationSet\"\nset graph_id \"translations\"\nset node_id $word_id\nset get_node_response [getDataNode $language_id $node_id]\nset get_node_response_error [check_response_error $get_node_response]\nif {$get_node_response_error} {\nreturn $get_node_response\n}\nset word_node [get_resp_value $get_node_response \"node\"]\nset synonym_list [getInNodeRelationIds $word_node \"Synset\" \"synonym\" \"startNodeId\"]\nset synset_list [java::new ArrayList]\n$synset_list addAll $synonym_list\nset not_empty_list [isNotEmpty $synset_list]\nif {$not_empty_list == false} {\nset result_map [java::new HashMap]\nset response_list [create_response $result_map]\nreturn $response_list\n}\nset filters [java::new HashMap]\n$filters put \"objectType\" $object_type\n$filters put \"graph_id\" $graph_id\n$filters put \"synsets\" $synset_list\n$filters put \"status\" [java::new ArrayList]\nset indexSearchCriteria [java::new HashMap]\n$indexSearchCriteria put \"filters\" $filters\nset searchResponse [compositeSearch $indexSearchCriteria]\nset searchResultsMap [$searchResponse getResult]\nset translations [java::cast List [$searchResultsMap get \"results\"]]\nset translationsNull [java::isnull $translations]\nif {$translationsNull == 1 || [$translations size] == 0} {\nset result_map [java::new HashMap]\nset response_list [create_response $result_map]\nreturn $response_list\n}\nset result_map [java::new HashMap]\nset result_list [java::new HashMap]\njava::try {\njava::for {Object translation} $translations {\nset translation [java::cast Map $translation]\nset synsets [$translation get \"synsets\"]\nset current_language [java::new ArrayList]\n$current_language add $language_id\nset synset_id_list [java::new ArrayList]\nset current_synset_id [filterSynset $synsets $current_language]\nset synsetObjectResponse [multiLanguageWordSearch $current_synset_id]\nset synsetMap [java::cast Map [$synsetObjectResponse get \"translations\"]]\nset synsetId [[[$synsetMap keySet] iterator] next]\nset synsetObjectMap [java::cast Map [$synsetMap get $synsetId]]\n$synsetObjectMap remove $language_id\nset synset_ids [filterSynset $synsets $languages]\nset not_empty_list [isNotEmpty $synset_ids]\nif {$not_empty_list} {\n$synset_id_list addAll $synset_ids\nset searchResponse [multiLanguageWordSearch $synset_id_list]\nset searchResultsMap [java::cast Map [$searchResponse get \"translations\"]]\nset mapValues [$searchResultsMap values]\njava::for {Object obj} $mapValues {\nset mapValue [java::cast Map $obj]\n$mapValue remove \"gloss\"\n$synsetObjectMap putAll $mapValue\n}\n}\n$result_list putAll $synsetMap\n}\n$result_map put \"translations\" $result_list\n} catch {Exception err} {\n$result_map put \"error\" [$err getMessage]\n}\nset response_list [create_response $result_map]\nreturn $response_list", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : false }, { "name" : "lemma", "index" : 1, "routing_param" : false }, { "name" : "languages", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/language/translations/*/*", "path_params" : [ "language_id", "lemma" ], "request_params" : [ "languages" ] } }
,{ "_id" : { "$oid" : "5894283f40648c45e3cd738e" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "compositeSearch", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\nset null_var [java::null]\nset empty_list [java::new ArrayList]\nset empty_map [java::new HashMap]\nset traversals [$request get \"traversals\"]\nset traversalsNull [java::isnull $traversals]\nif {$traversalsNull == 1} {\nset traversals $empty_list\n}\nset query [$request get \"query\"]\nset queryNull [java::isnull $query]\nif {$queryNull == 1} {\nset query $null_var\n}\nset filters [$request get \"filters\"]\nset filtersNull [java::isnull $filters]\nif {$filtersNull == 1} {\nset filters $empty_map\n}\nset exists [$request get \"exists\"]\nset existsNull [java::isnull $exists]\nif {$existsNull == 1} {\nset exists $empty_list\n}\nset not_exists [$request get \"not_exists\"]\nset not_existsNull [java::isnull $not_exists]\nif {$not_existsNull == 1} {\nset not_exists $empty_list\n}\nset sort_by [$request get \"sort_by\"]\nset sort_byNull [java::isnull $sort_by]\nif {$sort_byNull == 1} {\nset sort_by $empty_map\n}\nset facets [$request get \"facets\"]\nset facetsNull [java::isnull $facets]\nif {$facetsNull == 1} {\nset facets $empty_list\n}\nset fuzzy [$request get \"fuzzy\"]\nset fuzzyNull [java::isnull $fuzzy]\nif {$fuzzyNull == 1} {\nset fuzzy $null_var\n}\nset limit [$request get \"limit\"]\nset limitNull [java::isnull $limit]\nif {$limitNull == 1} {\nset limit [java::new Integer 10000]\n}\nset searchResponse [indexSearch $traversals $query $filters $exists $not_exists $sort_by $facets $fuzzy $limit]\nreturn $searchResponse", "type" : "SCRIPT", "parameters" : [ { "name" : "request", "datatype" : "java.util.HashMap", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/compositeSearch" } }
,{ "_id" : { "$oid" : "58b3d354282719021e5311f3" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "listContent_v3", "api_id" : "ekstep.content.list", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node RelationFilter\nproc proc_createRelationFilter {relationName direction} {\nset filter [java::new RelationFilter $relationName]\n$filter setFromDepth [java::new Integer 0]\n$filter setToDepth [java::new Integer 0]\n$filter setToDepth [java::new Integer 0]\n$filter setDirection $direction\nreturn $filter\n}\nproc proc_setRelationCriteria {concepts_list objectType filters} {\nset relation_query [java::new HashMap]\nset concepts_list_null [java::isnull $concepts_list]\nif {$concepts_list_null == 0} {\nset is_list [java::instanceof $concepts_list List]\nif {$is_list == 1} {\nset concepts_list_obj [java::cast List $concepts_list]\nset concepts_list_size [$concepts_list_obj size]\nif {$concepts_list_size > 0} {\n$relation_query put \"filters\" $filters\n$relation_query put \"objectType\" $objectType\nset concept_ids [java::new ArrayList]\njava::for {String concept_id} $concepts_list_obj {\n$concept_ids add $concept_id\n}\n$relation_query put \"identifiers\" $concept_ids\n}\n}\n}\nreturn $relation_query\n}\nset object_null [java::isnull $search]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_INVALID_SEARCH_REQUEST\"\n$result_map put \"message\" \"Invalid Search Request\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset invalidObjectType false\nset object_type_param [$search get \"objectType\"]\nset object_type_param_null [java::isnull $object_type_param]\nif {$object_type_param_null == 0} {\nset str_object_type_param [$object_type_param toString]\nif {$str_object_type_param != \"Content\"} {\nset invalidObjectType true\n}\n}\nif {$invalidObjectType} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_NOT_FOUND\"\n$result_map put \"message\" \"No content found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset object_type \"Content\"\nset check_null [java::isnull $search]\nif {$search == 1} {\nset $search [java::new HashMap]\n}\n$search put \"objectType\" $object_type\n$search put \"nodeType\" \"DATA_NODE\"\nset status_val [$search get \"status\"]\nset is_status_null [java::isnull $status_val]\nif {$is_status_null == 1} {\n$search put \"status\" \"Live\"\n}\nset filter_list [java::new ArrayList]\nset filter [java::new HashMap]\n$filter put \"property\" \"contentType\"\n$filter put \"operator\" \"!=\"\n$filter put \"value\" \"Asset\"\n$filter_list add $filter\nset filter2 [java::new HashMap]\n$filter2 put \"property\" \"contentType\"\n$filter2 put \"operator\" \"!=\"\n$filter2 put \"value\" \"Template\"\n$filter_list add $filter2\n$search put \"filters\" $filter_list\nset relations_list [java::new ArrayList]\nset concepts_list [$search get \"concepts\"]\nset concepts_list_null [java::isnull $concepts_list]\nif {$concepts_list_null == 0} {\nset is_list [java::instanceof $concepts_list List]\nif {$is_list == 1} {\nset concepts_list_obj [java::cast List $concepts_list]\nset concepts_list_size [$concepts_list_obj size]\nif {$concepts_list_size > 0} {\nset relation_query [java::new HashMap]\n$relation_query put \"name\" \"associatedTo\"\n$relation_query put \"objectType\" \"Concept\"\nset concept_ids [java::new ArrayList]\njava::for {String concept_id} $concepts_list_obj {\n$concept_ids add $concept_id\n}\n$relation_query put \"identifiers\" $concept_ids\n$relations_list add $relation_query\n$search remove \"concepts\"\n}\n}\n}\nset relation_names [java::new ArrayList]\n$relation_names add [proc_createRelationFilter \"associatedTo\" \"OUT\"]\n$relation_names add [proc_createRelationFilter \"isParentOf\" \"IN\"]\nset domains_list [$search get \"domains\"]\nset domain_query_map [proc_setRelationCriteria $domains_list \"Domain\" $relation_names]\nset domain_query_empty [$domain_query_map isEmpty]\nif {!$domain_query_empty} {\n$relations_list add $domain_query_map\n$search remove \"domains\"\n}\nset dimensions_list [$search get \"dimensions\"]\nset dimension_query_map [proc_setRelationCriteria $dimensions_list \"Dimension\" $relation_names]\nset dimension_query_empty [$dimension_query_map isEmpty]\nif {!$dimension_query_empty} {\n$relations_list add $dimension_query_map\n$search remove \"dimensions\"\n}\nset relationsListSize [$relations_list size]\nif {$relationsListSize > 0} {\n$search put \"relationCriteria\" $relations_list\n}\nset sort [$search get \"sort\"]\nset limit [$search get \"limit\"]\nset limit_null [java::isnull $limit]\nif {$limit_null == 1} {\nset limit [java::new Integer 50]\n}\n$search put \"sortBy\" $sort\n$search put \"resultSize\" $limit\n$search remove \"sort\"\n$search remove \"limit\"\nset returnFields false\nset fieldList [$search get \"fields\"]\nset is_fieldList_null [java::isnull $fieldList]\nif {$is_fieldList_null == 0} {\n$search remove \"fields\"\nset returnFields true\n}\nset search_criteria [create_search_criteria $search]\nset graph_id \"domain\"\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset obj_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nif {$returnFields} {\nset domain_obj [convert_graph_node $graph_node $def_node $fieldList]\n} else {\nset domain_obj [convert_graph_node $graph_node $def_node]\n}\n$obj_list add $domain_obj\n}\nset content_ttl [java::new Integer 0]\nset def_metadata [java::prop $def_node \"metadata\"]\nset def_metadata_null [java::isnull $def_metadata]\nif {$def_metadata_null != 1} {\nset ttl_val [$def_metadata get \"ttl\"]\nset ttl_val_null [java::isnull $ttl_val]\nif {$ttl_val_null != 1} {\nset content_ttl $ttl_val\n}\n}\nset result_map [java::new HashMap]\n$result_map put \"ttl\" $content_ttl\n$result_map put \"content\" $obj_list\nset response_list [create_response $result_map]\nreturn $response_list\n}\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "search", "datatype" : "java.util.Map", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/content/list" } }
,{ "_id" : { "$oid" : "58b3d378e8e2485069a850d1" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "flagContent_v3", "api_id" : "ekstep.learning.content.flag", "version" : "3.0", "body" : "package require java\njava::import -package java.util HashMap Map Date\njava::import -package java.util ArrayList List\njava::import -package java.util HashSet Set\njava::import -package java.util Arrays\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.graph.common DateUtils\nset graph_id \"domain\"\nset object_type \"Content\"\nproc isNotEmpty {list} {\nset exist false\nset isListNull [java::isnull $list]\nif {$isListNull == 0} {\nset listSize [$list size]\nif {$listSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc addFlagReasons {flagResaons node_metadata} {\nset existingFlagReasons [$node_metadata get \"flagReasons\"]\nset isExistingFlagReasonsNull [java::isnull $existingFlagReasons]\nif {$isExistingFlagReasonsNull == 0} {\nset arr_instance [java::instanceof $existingFlagReasons {String[]}]\nif {$arr_instance == 1} {\nset existingFlagReasons [java::cast {String[]} $existingFlagReasons]\nset existingFlagReasons [java::call Arrays asList $existingFlagReasons]\n} else {\nset existingFlagReasons [java::cast ArrayList $existingFlagReasons]\n}\nif {[isNotEmpty $existingFlagReasons]} {\nset flagReasonsSet [java::new HashSet $existingFlagReasons]\n$flagReasonsSet addAll $flagResaons\nset flagReasonsList [java::new ArrayList $flagReasonsSet]\nreturn $flagReasonsList\n}\n}\nreturn $flagResaons\n}\nproc addFlaggedBy {flaggedBy node_metadata} {\nset flaggedByList [java::new ArrayList]\n$flaggedByList add $flaggedBy\nset existingFlaggedBy [$node_metadata get \"flaggedBy\"]\nset isExistingFlaggedByNull [java::isnull $existingFlaggedBy]\nif {$isExistingFlaggedByNull == 0} {\nset arr_instance [java::instanceof $existingFlaggedBy {String[]}]\nif {$arr_instance == 1} {\nset existingFlaggedBy [java::cast {String[]} $existingFlaggedBy]\nset existingFlaggedBy [java::call Arrays asList $existingFlaggedBy]\n} else {\nset existingFlaggedBy [java::cast ArrayList $existingFlaggedBy]\n}\nif {[isNotEmpty $existingFlaggedBy]} {\nset flaggedBySet [java::new HashSet $existingFlaggedBy]\n$flaggedBySet addAll $flaggedByList\nset flaggedByList [java::new ArrayList $flaggedBySet]\nreturn $flaggedByList\n}\n}\nreturn $flaggedByList\n}\nset resp_get_node [getDataNode $graph_id $content_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset node_object_type [java::prop $graph_node \"objectType\"]\nif {$node_object_type == $object_type} {\nset node_metadata [java::prop $graph_node \"metadata\"]\nset status_val [$node_metadata get \"status\"]\nset status_val_str [java::new String [$status_val toString]]\nset isLiveState [$status_val_str equalsIgnoreCase \"Live\"]\nset isProcessingState [$status_val_str equalsIgnoreCase \"Processing\"]\nset isFlaggedState [$status_val_str equalsIgnoreCase \"Flagged\"]\nif {$isLiveState == 1 || $isFlaggedState == 1 || $isProcessingState == 1} {\nset request [java::new HashMap]\nset flaggedList [addFlaggedBy $flaggedBy $node_metadata]\nset flaggedList [java::cast ArrayList $flaggedList]\nset arraySize [$flaggedList size]\nif {($arraySize > 0)} {\n$request put \"lastUpdatedBy\" [$flaggedList get 0]\n}\n$request put \"flaggedBy\" [addFlaggedBy $flaggedBy $node_metadata]\n$request put \"flags\" $flags\n$request put \"versionKey\" $versionKey\n$request put \"status\" \"Flagged\"\n$request put \"lastFlaggedOn\" [java::call DateUtils format [java::new Date]]\nset isFlagReasonsNull [java::isnull $flagReasons]\nif {$isFlagReasonsNull == 0} {\nset flagReasons [java::cast ArrayList $flagReasons]\nset hasFlagReasons [isNotEmpty $flagReasons]\nif {$hasFlagReasons} {\nset flagResaons [addFlagReasons $flagReasons $node_metadata]\n$request put \"flagReasons\" $flagResaons\n}\n}\n$request put \"objectType\" $object_type\n$request put \"identifier\" $content_id\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset domain_obj [convert_to_graph_node $request $def_node]\nset create_response [updateDataNode $graph_id $content_id $domain_obj]\nset check_error [check_response_error $create_response]\nif {$check_error} {\n} else {\n$node_metadata putAll $request\n$node_metadata put \"prevState\" $status_val_str\nset log_response [log_content_lifecycle_event $content_id $node_metadata]\n}\nreturn $create_response\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_NOT_FLAGGABLE\"\n$result_map put \"message\" \"Unpublished Content $content_id cannot be flagged\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_NODE_NOT_FOUND\"\n$result_map put \"message\" \"$object_type $content_id not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "content_id", "index" : 0, "routing_param" : false }, { "name" : "flagReasons", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false }, { "name" : "flaggedBy", "index" : 2, "routing_param" : false }, { "name" : "versionKey", "index" : 3, "routing_param" : false }, { "name" : "flags", "datatype" : "java.util.ArrayList", "index" : 4, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/content/flag/*", "path_params" : [ "content_id" ] } }
,{ "_id" : { "$oid" : "58b3e9a5e8e2485069a850d2" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getDomain_v3", "api_id" : "ekstep.domain.info", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList\nproc getCount {graph_id object_type domain_id} {\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $object_type\n$map put \"subject\" $domain_id\n$map put \"status\" \"Live\"\nset search_criteria [create_search_criteria $map]\nset search_response [getNodesCount $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn 0\n} else {\nset count [get_resp_value $search_response \"count\"]\nreturn $count\n}\n}\nproc getContentCount {graph_id domain_id} {\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" \"Content\"\nset domains [java::new ArrayList]\n$domains add $domain_id\n$map put \"domain\" $domains\n$map put \"status\" \"Live\"\nset contentTypes [java::new ArrayList]\n$contentTypes add \"Story\"\n$contentTypes add \"Worksheet\"\n$contentTypes add \"Game\"\n$contentTypes add \"Collection\"\n$map put \"contentType\" $contentTypes\nset search_criteria [create_search_criteria $map]\nset search_response [getNodesCount $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn 0\n} else {\nset count [get_resp_value $search_response \"count\"]\nreturn $count\n}\n}\nset object_type \"Domain\"\nset graph_id \"domain\"\nset resp_get_node [getDataNode $graph_id $domain_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset returnFields false\nset is_fieldList_null [java::isnull $fields]\nif {$is_fieldList_null == 0} {\nset returnFields true\n}\nset result_map [java::new HashMap]\njava::try {\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nif {$returnFields} {\nset resp_object [convert_graph_node $graph_node $def_node $fields]\n} else {\nset resp_object [convert_graph_node $graph_node $def_node]\n}\nset dimension_count [getCount $graph_id \"Dimension\" $domain_id]\nset concept_count [getCount $graph_id \"Concept\" $domain_id]\nset misconception_count [getCount $graph_id \"Misconception\" $domain_id]\nset method_count [getCount $graph_id \"Method\" $domain_id]\nset content_count [getContentCount $graph_id $domain_id]\n$resp_object put \"dimension_count\" $dimension_count\n$resp_object put \"concept_count\" $concept_count\n$resp_object put \"misconception_count\" $misconception_count\n$resp_object put \"method_count\" $method_count\n$resp_object put \"content_count\" $content_count\n$result_map put \"domain\" $resp_object\n} catch {Exception err} {\n$result_map put \"error\" [$err getMessage]\n}\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "domain_id", "index" : 0, "routing_param" : false }, { "name" : "fields", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v3/domains/*/read", "path_params" : [ "domain_id" ], "request_params" : [ "fields" ] } }
,{ "_id" : { "$oid" : "58b3e9b2e8e2485069a850d3" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getDomains_v3", "api_id" : "ekstep.domain.list", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset is_sortBy_null [java::isnull $sort]\nset is_resultSize_null [java::isnull $limit]\nset object_type \"Domain\"\nset map [java::new HashMap]\n$map put \"objectType\" $object_type\n$map put \"nodeType\" \"DATA_NODE\"\nif {$is_sortBy_null == 0} {\n$map put \"sortBy\" $sort\n}\nif {$is_resultSize_null == 0} {\n$map put \"resultSize\" $limit\n}\n$map put \"order\" $order\n$map put \"status\" \"Live\"\nset search_criteria [create_search_criteria $map]\nset returnFields false\nset is_fieldList_null [java::isnull $fields]\nif {$is_fieldList_null == 0} {\nset returnFields true\n}\nset graph_id \"domain\"\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset obj_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nif {$returnFields} {\nset domain_obj [convert_graph_node $graph_node $def_node $fields]\n} else {\nset domain_obj [convert_graph_node $graph_node $def_node]\n}\n$obj_list add $domain_obj\n}\nset result_map [java::new HashMap]\n$result_map put \"domains\" $obj_list\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "sort", "datatype" : "java.util.ArrayList", "index" : 0, "routing_param" : false }, { "name" : "order", "index" : 1, "routing_param" : false }, { "name" : "limit", "datatype" : "java.lang.Integer", "index" : 2, "routing_param" : false }, { "name" : "fields", "datatype" : "java.util.ArrayList", "index" : 3, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v3/domains/list", "request_params" : [ "sort", "order", "limit", "fields" ] } }
,{ "_id" : { "$oid" : "58b3e9bce8e2485069a850d4" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getDomainObject_v3", "api_id" : "ekstep.domain.object.info", "body" : "package require java\njava::import -package java.util HashMap Map\nset object_type_res [getDomainObjectType $type]\nset check_obj_type_error [check_response_error $object_type_res]\nif {$check_obj_type_error} {\nreturn $object_type_res\n} else {\nset object_type [get_resp_value $object_type_res \"result\"]\nset graph_id \"domain\"\nset resp_get_node [getDataNode $graph_id $object_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset returnFields false\nset is_fieldList_null [java::isnull $fields]\nif {$is_fieldList_null == 0} {\nset returnFields true\n}\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset node_object_type [java::prop $graph_node \"objectType\"]\nset str_object_type [$object_type toString]\nif {$node_object_type == $str_object_type} {\nset node_metadata [java::prop $graph_node \"metadata\"]\nset node_subject [$node_metadata get \"subject\"]\nset node_subject_str [$node_subject toString]\nif {$domain_id == $node_subject_str} {\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nif {$returnFields} {\nset resp_object [convert_graph_node $graph_node $def_node $fields]\n} else {\nset resp_object [convert_graph_node $graph_node $def_node]\n}\nset result_map [java::new HashMap]\n$result_map put $object_type $resp_object\nset response_list [create_response $result_map]\nreturn $response_list\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_NODE_NOT_FOUND\"\n$result_map put \"message\" \"$str_object_type $object_id not found in $domain_id\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_NODE_NOT_FOUND\"\n$result_map put \"message\" \"$str_object_type $object_id not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "domain_id", "index" : 0, "routing_param" : false }, { "name" : "type", "index" : 1, "routing_param" : false }, { "name" : "object_id", "index" : 2, "routing_param" : false }, { "name" : "fields", "datatype" : "java.util.ArrayList", "index" : 3, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v3/domains/*/*/read/*", "path_params" : [ "domain_id", "type", "object_id" ], "request_params" : [ "fields" ] } }
,{ "_id" : { "$oid" : "58b3e9c1282719021e5311f4" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateDomainObject_v3", "api_id" : "ekstep.domain.object.update", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_null [java::isnull $object]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_DOMAIN_INVALID_OBJECT\"\n$result_map put \"message\" \"Invalid Request\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset object_type_res [getDomainObjectType $type]\nset check_obj_type_error [check_response_error $object_type_res]\nif {$check_obj_type_error} {\nreturn $object_type_res\n} else {\nset object_type [get_resp_value $object_type_res \"result\"]\nset graph_id \"domain\"\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$object put \"objectType\" $object_type\n$object put \"identifier\" $object_id\n$object put \"subject\" $domain_id\nset domain_obj [convert_to_graph_node $object $def_node]\nset create_response [updateDataNode $graph_id $object_id $domain_obj]\nreturn $create_response\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "domain_id", "index" : 0, "routing_param" : false }, { "name" : "type", "index" : 1, "routing_param" : false }, { "name" : "object_id", "index" : 2, "routing_param" : false }, { "name" : "object", "datatype" : "java.util.Map", "index" : 3, "routing_param" : false } ], "request_path" : { "type" : "PATCH", "url" : "/v3/domains/*/*/update/*", "path_params" : [ "domain_id", "type", "object_id" ] } }
,{ "_id" : { "$oid" : "58b3e9c8e8e2485069a850d5" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getDomainObjects_v3", "api_id" : "ekstep.domain.object.list", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Filter\njava::import -package com.ilimi.graph.dac.model Node\nset is_sortBy_null [java::isnull $sort]\nset is_resultSize_null [java::isnull $limit]\nset object_type_res [getDomainObjectType $type]\nset check_obj_type_error [check_response_error $object_type_res]\nif {$check_obj_type_error} {\nreturn $object_type_res\n} else {\nset graph_id \"domain\"\nset object_type [get_resp_value $object_type_res \"result\"]\nset get_domain_resp [getDataNode $graph_id $domain_id]\nset check_error [check_response_error $get_domain_resp]\nif {$check_error} {\nreturn $get_domain_resp\n} else {\nset domain_node [get_resp_value $get_domain_resp \"node\"]\nset domain_obj_type [java::prop $domain_node \"objectType\"]\nif {$domain_obj_type == \"Domain\"} {\nset map [java::new HashMap]\n$map put \"subject\" $domain_id\n$map put \"objectType\" $object_type\nif {$is_sortBy_null == 0} {\n$map put \"sortBy\" $sort\n}\nif {$is_resultSize_null == 0} {\n$map put \"resultSize\" $limit\n}\n$map put \"status\" \"Live\"\n$map put \"order\" $order\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset returnFields false\nset is_fieldList_null [java::isnull $fields]\nif {$is_fieldList_null == 0} {\nset returnFields true\n}\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset obj_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nif {$returnFields} {\nset domain_obj [convert_graph_node $graph_node $def_node $fields]\n} else {\nset domain_obj [convert_graph_node $graph_node $def_node]\n}\n$obj_list add $domain_obj\n}\nset result_map [java::new HashMap]\n$result_map put $type $obj_list\nset response_list [create_response $result_map]\nreturn $response_list\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_DOMAIN_NOT_FOUND\"\n$result_map put \"message\" \"Domain $domain_id not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "domain_id", "index" : 0, "routing_param" : false }, { "name" : "type", "index" : 1, "routing_param" : false }, { "name" : "sort", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false }, { "name" : "order", "index" : 3, "routing_param" : false }, { "name" : "limit", "datatype" : "java.lang.Integer", "index" : 4, "routing_param" : false }, { "name" : "fields", "datatype" : "java.util.ArrayList", "index" : 5, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v3/domains/*/*/list", "path_params" : [ "domain_id", "type" ], "request_params" : [ "sort", "order", "limit", "fields" ] } }
,{ "_id" : { "$oid" : "58b3e9d0e8e2485069a850d6" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "saveDomainObject_v3", "api_id" : "ekstep.domain.object.save", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_null [java::isnull $object]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_DOMAIN_INVALID_OBJECT\"\n$result_map put \"message\" \"Invalid Request\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset object_type_res [getDomainObjectType $type]\nset check_obj_type_error [check_response_error $object_type_res]\nif {$check_obj_type_error} {\nreturn $object_type_res\n} else {\nset object_type [get_resp_value $object_type_res \"result\"]\nset graph_id \"domain\"\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$object put \"objectType\" $object_type\n$object put \"subject\" $domain_id\nset domain_obj [convert_to_graph_node $object $def_node]\nset create_response [createDataNode $graph_id $domain_obj]\nreturn $create_response\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "domain_id", "index" : 0, "routing_param" : false }, { "name" : "type", "index" : 1, "routing_param" : false }, { "name" : "object", "datatype" : "java.util.Map", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/domains/*/*/create", "path_params" : [ "domain_id", "type" ] } }
,{ "_id" : { "$oid" : "58b3e9e2e8e2485069a850d7" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "retireConcept_v3", "api_id" : "ekstep.domain.concept.retire", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset graph_id \"domain\"\nset object_type \"Concept\"\nset resp_get_node [getDataNode $graph_id $conceptId]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset node_object_type [java::prop $graph_node \"objectType\"]\nif {$node_object_type == $object_type} {\nset node_metadata [java::prop $graph_node \"metadata\"]\nset node_subject [$node_metadata get \"subject\"]\nset node_subject_str [$node_subject toString]\nif {$domainId == $node_subject_str} {\n$node_metadata put \"status\" \"Retired\"\nset create_response [updateDataNode $graph_id $conceptId $graph_node]\nreturn $create_response\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_NODE_NOT_FOUND\"\n$result_map put \"message\" \"$object_type $conceptId not found in $domainId\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_NODE_NOT_FOUND\"\n$result_map put \"message\" \"$object_type $conceptId not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "domainId", "index" : 0, "routing_param" : false }, { "name" : "conceptId", "index" : 1, "routing_param" : false }, { "name" : "newConceptId", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/domains/*/concepts/retire/*", "path_params" : [ "domainId", "conceptId" ], "request_params" : [ "newConceptId" ] } }
,{ "_id" : { "$oid" : "58b3e9ebe8e2485069a850d8" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getLanguages_v3", "api_id" : "ekstep.language.list", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Language\"\nset graph_id \"domain\"\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $object_type\nset sortBy [java::new ArrayList]\n$sortBy add \"name\"\n$map put \"sortBy\" $sortBy\n$map put \"order\" \"ASC\"\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset result_map [java::new HashMap]\njava::try {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset language_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nset lang_id [java::prop $graph_node \"identifier\"]\nset metadata [java::prop $graph_node \"metadata\"]\nset lang_map [java::new HashMap]\n$lang_map put \"identifier\" $lang_id\n$lang_map putAll $metadata\n$language_list add $lang_map\n}\n$result_map put \"languages\" $language_list\n} catch {Exception err} {\n$result_map put \"error\" [$err getMessage]\n}\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "GET", "url" : "/v3/languages/list" } }
,{ "_id" : { "$oid" : "58b3f55e282719021ed16cdc" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createTraversalRule_v3", "api_id" : "ekstep.language.traversals.create", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"TraversalRule\"\nset error_status \"Failed\"\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$rule put \"objectType\" $object_type\nset identifer [$rule get \"ruleId\"]\n$rule put \"identifier\" $identifer\nset rule_obj [convert_to_graph_node $rule $def_node]\nset create_response [createDataNode $language_id $rule_obj]\nreturn $create_response", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "rule", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/traversals/create", "request_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "58b3f57be8e24850692d9483" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateTraversalRule_v3", "api_id" : "ekstep.language.traversalRule.update", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"TraversalRule\"\nset error_status \"Failed\"\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$rule put \"objectType\" $object_type\n$rule put \"identifier\" $rule_id\nset rule_obj [convert_to_graph_node $rule $def_node]\nset create_response [updateDataNode $language_id $rule_id $rule_obj]\nreturn $create_response", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "rule_id", "index" : 1, "routing_param" : false }, { "name" : "rule", "datatype" : "java.util.HashMap", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "PATCH", "url" : "/v3/traversals/update/*", "path_params" : [ "rule_id" ], "request_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "58b3f583282719021ed16cdd" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "flagWord_v3", "body" : "package require java\njava::import -package java.util HashMap Map Date\njava::import -package java.util ArrayList List\njava::import -package java.util HashSet Set\njava::import -package java.util Arrays\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.graph.common DateUtils\nset object_type \"Word\"\nproc isNotEmpty {list} {\nset exist false\nset isListNull [java::isnull $list]\nif {$isListNull == 0} {\nset listSize [$list size]\nif {$listSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc addFlagReasons {flagResaons node_metadata} {\nset existingFlagReasons [$node_metadata get \"flagReasons\"]\nset isExistingFlagReasonsNull [java::isnull $existingFlagReasons]\nif {$isExistingFlagReasonsNull == 0} {\nset arr_instance [java::instanceof $existingFlagReasons {String[]}]\nif {$arr_instance == 1} {\nset existingFlagReasons [java::cast {String[]} $existingFlagReasons]\nset existingFlagReasons [java::call Arrays asList $existingFlagReasons]\n} else {\nset existingFlagReasons [java::cast ArrayList $existingFlagReasons]\n}\nif {[isNotEmpty $existingFlagReasons]} {\nset flagReasonsSet [java::new HashSet $existingFlagReasons]\n$flagReasonsSet addAll $flagResaons\nset flagReasonsList [java::new ArrayList $flagReasonsSet]\nreturn $flagReasonsList\n}\n}\nreturn $flagResaons\n}\nproc addFlaggedBy {flaggedBy node_metadata} {\nset flaggedByList [java::new ArrayList]\n$flaggedByList add $flaggedBy\nset existingFlaggedBy [$node_metadata get \"flaggedBy\"]\nset isExistingFlaggedByNull [java::isnull $existingFlaggedBy]\nif {$isExistingFlaggedByNull == 0} {\nset arr_instance [java::instanceof $existingFlaggedBy {String[]}]\nif {$arr_instance == 1} {\nset existingFlaggedBy [java::cast {String[]} $existingFlaggedBy]\nset existingFlaggedBy [java::call Arrays asList $existingFlaggedBy]\n} else {\nset existingFlaggedBy [java::cast ArrayList $existingFlaggedBy]\n}\nif {[isNotEmpty $existingFlaggedBy]} {\nset flaggedBySet [java::new HashSet $existingFlaggedBy]\n$flaggedBySet addAll $flaggedByList\nset flaggedByList [java::new ArrayList $flaggedBySet]\nreturn $flaggedByList\n}\n}\nreturn $flaggedByList\n}\nset resp_get_node [getDataNode $language_id $word_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset node_object_type [java::prop $graph_node \"objectType\"]\nif {$node_object_type == $object_type} {\nset node_metadata [java::prop $graph_node \"metadata\"]\nset status_val [$node_metadata get \"status\"]\nset status_val_str [java::new String [$status_val toString]]\nset isLiveState [$status_val_str equalsIgnoreCase \"Live\"]\nset isFlaggedState [$status_val_str equalsIgnoreCase \"Flagged\"]\nif {$isLiveState == 1 || $isFlaggedState == 1} {\nset request [java::new HashMap]\n$request put \"flaggedBy\" [addFlaggedBy $flaggedBy $node_metadata]\n$request put \"versionKey\" $versionKey\n$request put \"status\" \"Flagged\"\n$request put \"lastFlaggedOn\" [java::call DateUtils format [java::new Date]]\nset isFlagReasonsNull [java::isnull $flagReasons]\nif {$isFlagReasonsNull == 0} {\nset flagReasons [java::cast ArrayList $flagReasons]\nset hasFlagReasons [isNotEmpty $flagReasons]\nif {$hasFlagReasons} {\nset flagResaons [addFlagReasons $flagReasons $node_metadata]\n$request put \"flagReasons\" $flagResaons\n}\n}\n$request put \"objectType\" $object_type\n$request put \"identifier\" $word_id\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset domain_obj [convert_to_graph_node $request $def_node]\nset create_response [updateDataNode $language_id $word_id $domain_obj]\nreturn $create_response\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_WORD_NOT_FLAGGABLE\"\n$result_map put \"message\" \"Word $word_id can not be flagged\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_NODE_NOT_FOUND\"\n$result_map put \"message\" \"$object_type $word_id not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "word_id", "index" : 1, "routing_param" : false }, { "name" : "flagReasons", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false }, { "name" : "flaggedBy", "index" : 3, "routing_param" : false }, { "name" : "versionKey", "index" : 4, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/words/flag/*", "path_params" : [ "word_id" ], "request_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "58b3f586282719021ed16cde" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getTranslation_v3", "api_id" : "ekstep.language.translations.read", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc getOutRelations {graph_node} {\nset outRelations [java::prop $graph_node \"outRelations\"]\nreturn $outRelations\n}\nproc getInRelations {graph_node} {\nset inRelations [java::prop $graph_node \"inRelations\"]\nreturn $inRelations\n}\nproc isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc filterSynset {synset_ids languages} {\nset filteredSynsets [java::new ArrayList]\njava::for {String synset_id} $synset_ids {\nset index 0\nset invalidSynset 0\nset idArray [split $synset_id \":\"]\nforeach entry $idArray {\nset languageContains [$languages contains $entry]\nif {$languageContains == 1} {\n$filteredSynsets add $synset_id\n}\nset index [expr $index + 1]\n}\nif {$index == 1} {\nset idArray [split $synset_id \"_\"]\nforeach entry $idArray {\nset languageContains [$languages contains $entry]\nif {$languageContains == 1} {\n$filteredSynsets add $synset_id\n}\nset invalidSynset [expr $invalidSynset + 1]\n}\n}\nif {$invalidSynset == 1} {\nset languageContains [$languages contains \"en\"]\nif {$languageContains == 1} {\n$filteredSynsets add $synset_id\n}\n}\n}\nreturn $filteredSynsets\n}\nproc getInNodeRelationIds {graph_node relationType relationName property} {\nset relationIds [java::new ArrayList]\nset inRelations [getInRelations $graph_node]\nset hasRelations [isNotEmpty $inRelations]\nif {$hasRelations} {\njava::for {Relation relation} $inRelations {\nif {[java::prop $relation \"startNodeObjectType\"] == $relationType && [java::prop $relation \"relationType\"] == $relationName} {\nset prop_value [java::prop $relation $property]\n$relationIds add $prop_value\n}\n}\n}\nreturn $relationIds\n}\nset filters [java::new HashMap]\n$filters put \"objectType\" \"Word\"\n$filters put \"graph_id\" $language_id\n$filters put \"lemma\" $lemma\n$filters put \"status\" [java::new ArrayList]\nset limit [java::new Integer 1]\nset indexSearchCriteria [java::new HashMap]\n$indexSearchCriteria put \"filters\" $filters\n$indexSearchCriteria put \"limit\" $limit\nset searchResponse [compositeSearch $indexSearchCriteria]\nset searchResultsMap [$searchResponse getResult]\nset wordsList [java::cast List [$searchResultsMap get \"results\"]]\nset wordsListNull [java::isnull $wordsList]\nif {$wordsListNull == 1 || [$wordsList size] == 0} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_WORD_NOT_FOUND\"\n$result_map put \"message\" \"Word not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\nset wordObject [java::cast Map [$wordsList get 0]]\nset word_id [$wordObject get \"identifier\"]\nset object_type \"TranslationSet\"\nset graph_id \"translations\"\nset node_id $word_id\nset get_node_response [getDataNode $language_id $node_id]\nset get_node_response_error [check_response_error $get_node_response]\nif {$get_node_response_error} {\nreturn $get_node_response\n}\nset word_node [get_resp_value $get_node_response \"node\"]\nset synonym_list [getInNodeRelationIds $word_node \"Synset\" \"synonym\" \"startNodeId\"]\nset synset_list [java::new ArrayList]\n$synset_list addAll $synonym_list\nset not_empty_list [isNotEmpty $synset_list]\nif {$not_empty_list == false} {\nset result_map [java::new HashMap]\nset response_list [create_response $result_map]\nreturn $response_list\n}\nset filters [java::new HashMap]\n$filters put \"objectType\" $object_type\n$filters put \"graph_id\" $graph_id\n$filters put \"synsets\" $synset_list\n$filters put \"status\" [java::new ArrayList]\nset indexSearchCriteria [java::new HashMap]\n$indexSearchCriteria put \"filters\" $filters\nset searchResponse [compositeSearch $indexSearchCriteria]\nset searchResultsMap [$searchResponse getResult]\nset translations [java::cast List [$searchResultsMap get \"results\"]]\nset translationsNull [java::isnull $translations]\nif {$translationsNull == 1 || [$translations size] == 0} {\nset result_map [java::new HashMap]\nset response_list [create_response $result_map]\nreturn $response_list\n}\nset result_map [java::new HashMap]\nset result_list [java::new HashMap]\njava::try {\njava::for {Object translation} $translations {\nset translation [java::cast Map $translation]\nset synsets [$translation get \"synsets\"]\nset current_language [java::new ArrayList]\n$current_language add $language_id\nset synset_id_list [java::new ArrayList]\nset current_synset_id [filterSynset $synsets $current_language]\nset synsetObjectResponse [multiLanguageWordSearch $current_synset_id]\nset synsetMap [java::cast Map [$synsetObjectResponse get \"translations\"]]\nset synsetId [[[$synsetMap keySet] iterator] next]\nset synsetObjectMap [java::cast Map [$synsetMap get $synsetId]]\n$synsetObjectMap remove $language_id\nset synset_ids [filterSynset $synsets $languages]\nset not_empty_list [isNotEmpty $synset_ids]\nif {$not_empty_list} {\n$synset_id_list addAll $synset_ids\nset searchResponse [multiLanguageWordSearch $synset_id_list]\nset searchResultsMap [java::cast Map [$searchResponse get \"translations\"]]\nset mapValues [$searchResultsMap values]\njava::for {Object obj} $mapValues {\nset mapValue [java::cast Map $obj]\n$mapValue remove \"gloss\"\n$synsetObjectMap putAll $mapValue\n}\n}\n$result_list putAll $synsetMap\n}\n$result_map put \"translations\" $result_list\n} catch {Exception err} {\n$result_map put \"error\" [$err getMessage]\n}\nset response_list [create_response $result_map]\nreturn $response_list", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : false }, { "name" : "lemma", "index" : 1, "routing_param" : false }, { "name" : "languages", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/tools/translate", "request_params" : [ "language_id", "lemma", "languages" ] } }
,{ "_id" : { "$oid" : "58b3f595e8e24850692d9484" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getSynsets_V3", "api_id" : "ekstep.language.synsets.list", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Synset\"\nset map [java::new HashMap]\n$map put \"objectType\" $object_type\n$map put \"nodeType\" \"DATA_NODE\"\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset obj_list [java::new ArrayList]\njava::for {Node graph_node} $graph_nodes {\nset domain_obj [convert_graph_node $graph_node $def_node]\n$obj_list add $domain_obj\n}\nset result_map [java::new HashMap]\n$result_map put \"synsets\" $obj_list\nset response_list [create_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "synset_id", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v3/synsets/list", "request_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "58b3f5cf282719021ed16cdf" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "transliterate_v3", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "addClosingVirama", "datatype" : "java.lang.Boolean", "index" : 1, "routing_param" : false }, { "name" : "text", "index" : 2, "routing_param" : false } ], "actor_path" : { "manager" : "TRANSLITERATOR_ACTOR", "operation" : "transliterate", "router" : "LANGUAGE_REQUEST_ROUTER" }, "request_path" : { "type" : "POST", "url" : "/v3/tools/transliterate/_dep", "request_params" : [ "language_id", "addClosingVirama" ] } }
,{ "_id" : { "$oid" : "58b3f5f6e8e24850692d9485" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createVarna_v3", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Varna\"\nset error_status \"Failed\"\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$varna put \"objectType\" $object_type\nset identifer [$varna get \"varna\"]\n$varna put \"identifier\" $identifer\nset varna_obj [convert_to_graph_node $varna $def_node]\nset create_response [createDataNode $language_id $varna_obj]\nreturn $create_response", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "varna", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/varnas/create", "request_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "58b3f5fbe8e24850692d9486" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateVarna_v3", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Varna\"\nset error_status \"Failed\"\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$varna put \"objectType\" $object_type\n$varna put \"identifier\" $varna_id\nset varna_obj [convert_to_graph_node $varna $def_node]\nset create_response [updateDataNode $language_id $varna_id $varna_obj]\nreturn $create_response", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "varna_id", "index" : 1, "routing_param" : false }, { "name" : "varna", "datatype" : "java.util.HashMap", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "PATCH", "url" : "/v3/varnas/update/*", "path_params" : [ "varna_id" ], "request_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "58b3f5ffe8e24850692d9487" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getVarna_v3", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Varna\"\nset error_status \"Failed\"\nset get_node_response [getDataNode $language_id $varna_id]\nset get_node_response_error [check_response_error $get_node_response]\nif {$get_node_response_error} {\nreturn $get_node_response\n}\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset varna_node [get_resp_value $get_node_response \"node\"]\nset varna_obj [convert_graph_node $varna_node $def_node]\nset result_map [java::new HashMap]\n$result_map put \"varna\" $varna_obj\nset api_response [create_response $result_map]\nreturn $api_response", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "varna_id", "datatype" : "java.lang.String", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v3/varnas/read/*", "path_params" : [ "varna_id" ], "request_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "58b3f603e8e24850692d9488" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getVarnaList_v3", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset search [java::new HashMap]\nset varna_object_type \"Varna\"\n$search put \"objectType\" $varna_object_type\n$search put \"nodeType\" \"DATA_NODE\"\nset type_list [java::new ArrayList]\nif {$language_id == \"en\"} {\n$type_list add \"Alphabet\"\n} else {\n$type_list add \"Vowel\"\n$type_list add \"Consonant\"\n}\n$search put \"type\" $type_list\nset sort_by [java::new ArrayList]\n$sort_by add \"varna\"\n$search put \"sortBy\" $sort_by\n$search put \"order\" \"ASC\"\nset search_criteria [create_search_criteria $search]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response\n} else {\nset varna_list [java::new ArrayList]\nset graph_nodes [get_resp_value $search_response \"node_list\"]\njava::for {Node graph_node} $graph_nodes {\nset node_id [java::prop $graph_node \"identifier\"]\n$varna_list add $node_id\n}\nreturn $varna_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "GET", "url" : "/v3/varnas/list", "request_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "58c24db328271909285d2100" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "listTerms", "api_id" : "ekstep.learning.terms.list", "version" : "2.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.common JSONUtils\nset mr \"{\\\"subject\\\":{\\\"label\\\":\\\"विषय\\\",\\\"value\\\":\\\"subject\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"सामग्री चा विषय\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"गणित\\\",\\\"value\\\":\\\"Maths\\\",\\\"telemetry\\\":\\\"Maths\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"MATHS\\\"]}}},{\\\"label\\\":\\\"इंग्रजी\\\",\\\"value\\\":\\\"English\\\",\\\"telemetry\\\":\\\"English\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"English\\\"]}}},{\\\"label\\\":\\\"हिंदी\\\",\\\"value\\\":\\\"Hindi\\\",\\\"telemetry\\\":\\\"Hindi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Hindi\\\"]}}},{\\\"label\\\":\\\"आसामी\\\",\\\"value\\\":\\\"Assamese\\\",\\\"telemetry\\\":\\\"Assamese\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Assamese\\\"]}}},{\\\"label\\\":\\\"बंगाली\\\",\\\"value\\\":\\\"Bengali\\\",\\\"telemetry\\\":\\\"Bengali\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Bengali\\\"]}}},{\\\"label\\\":\\\"गुजराती\\\",\\\"value\\\":\\\"Gujarati\\\",\\\"telemetry\\\":\\\"Gujarati\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Gujarati\\\"]}}},{\\\"label\\\":\\\"कन्नड\\\",\\\"value\\\":\\\"Kannada\\\",\\\"telemetry\\\":\\\"Kannada\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Kannada\\\"]}}},{\\\"label\\\":\\\"मल्याळम्\\\",\\\"value\\\":\\\"Malayalam\\\",\\\"telemetry\\\":\\\"Malayalam\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Malayalam\\\"]}}},{\\\"label\\\":\\\"मराठी\\\",\\\"value\\\":\\\"Marathi\\\",\\\"telemetry\\\":\\\"Marathi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Marathi\\\"]}}},{\\\"label\\\":\\\"नेपाळी\\\",\\\"value\\\":\\\"Nepali\\\",\\\"telemetry\\\":\\\"Nepali\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Nepali\\\"]}}},{\\\"label\\\":\\\"ओरिया/उडीसा\\\",\\\"value\\\":\\\"Oriya\\\",\\\"telemetry\\\":\\\"Oriya\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Oriya\\\"]}}},{\\\"label\\\":\\\"पंजाबी\\\",\\\"value\\\":\\\"Punjabi\\\",\\\"telemetry\\\":\\\"Punjabi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Punjabi\\\"]}}},{\\\"label\\\":\\\"तमिळ\\\",\\\"value\\\":\\\"Tamil\\\",\\\"telemetry\\\":\\\"Tamil\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Tamil\\\"]}}},{\\\"label\\\":\\\"तेलगु\\\",\\\"value\\\":\\\"Telugu\\\",\\\"telemetry\\\":\\\"Telugu\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Telugu\\\"]}}},{\\\"label\\\":\\\"उर्दु\\\",\\\"value\\\":\\\"Urdu\\\",\\\"telemetry\\\":\\\"Urdu\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Urdu\\\"]}}}]},\\\"medium\\\":{\\\"label\\\":\\\"माध्यम\\\",\\\"value\\\":\\\"medium\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"सूचनेचे माध्यम\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"इंग्रजी\\\",\\\"value\\\":\\\"English\\\",\\\"telemetry\\\":\\\"English\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"English\\\"]}}},{\\\"label\\\":\\\"हिंदी\\\",\\\"value\\\":\\\"Hindi\\\",\\\"telemetry\\\":\\\"Hindi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Hindi\\\"]}}},{\\\"label\\\":\\\"आसामी\\\",\\\"value\\\":\\\"Assamese\\\",\\\"telemetry\\\":\\\"Assamese\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Assamese\\\"]}}},{\\\"label\\\":\\\"बंगाली\\\",\\\"value\\\":\\\"Bengali\\\",\\\"telemetry\\\":\\\"Bengali\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Bengali\\\"]}}},{\\\"label\\\":\\\"गुजराती\\\",\\\"value\\\":\\\"Gujarati\\\",\\\"telemetry\\\":\\\"Gujarati\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Gujarati\\\"]}}},{\\\"label\\\":\\\"कन्नड\\\",\\\"value\\\":\\\"Kannada\\\",\\\"telemetry\\\":\\\"Kannada\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Kannada\\\"]}}},{\\\"label\\\":\\\"मल्याळम्\\\",\\\"value\\\":\\\"Malayalam\\\",\\\"telemetry\\\":\\\"Malayalam\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Malayalam\\\"]}}},{\\\"label\\\":\\\"मराठी\\\",\\\"value\\\":\\\"Marathi\\\",\\\"telemetry\\\":\\\"Marathi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Marathi\\\"]}}},{\\\"label\\\":\\\"नेपाळी\\\",\\\"value\\\":\\\"Nepali\\\",\\\"telemetry\\\":\\\"Nepali\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Nepali\\\"]}}},{\\\"label\\\":\\\"ओरिया\\\",\\\"value\\\":\\\"Oriya\\\",\\\"telemetry\\\":\\\"Oriya\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Oriya\\\"]}}},{\\\"label\\\":\\\"पंजाबी\\\",\\\"value\\\":\\\"Punjabi\\\",\\\"telemetry\\\":\\\"Punjabi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Punjabi\\\"]}}},{\\\"label\\\":\\\"तमिळ\\\",\\\"value\\\":\\\"Tamil\\\",\\\"telemetry\\\":\\\"Tamil\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Tamil\\\"]}}},{\\\"label\\\":\\\"तेलगू\\\",\\\"value\\\":\\\"Telugu\\\",\\\"telemetry\\\":\\\"Telugu\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Telugu\\\"]}}},{\\\"label\\\":\\\"उर्दु\\\",\\\"value\\\":\\\"Urdu\\\",\\\"telemetry\\\":\\\"Urdu\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Urdu\\\"]}}},{\\\"label\\\":\\\"इतर\\\",\\\"value\\\":\\\"Other\\\",\\\"telemetry\\\":\\\"\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{}}]},\\\"board\\\":{\\\"label\\\":\\\"परीक्षा मंडळ\\\",\\\"value\\\":\\\"board\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"अभ्यासक्रम\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"राष्ट्रिय शैक्षणिक संशोधन परिषद (NCERT)\\\",\\\"value\\\":\\\"NCERT\\\",\\\"telemetry\\\":\\\"NCERT\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"NCERT\\\"]}}},{\\\"label\\\":\\\"सी.बी.एस.ई (CBSE)\\\",\\\"value\\\":\\\"CBSE\\\",\\\"telemetry\\\":\\\"CBSE\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"CBSE\\\"]}}},{\\\"label\\\":\\\"आय.सी.एस.ई (ICSE)\\\",\\\"value\\\":\\\"ICSE\\\",\\\"telemetry\\\":\\\"ICSE\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"ICSE\\\"]}}},{\\\"label\\\":\\\"महाराष्ट्र राज्य शैक्षणिक संशोधन व प्रशिक्षण परिषद (MSCERT)\\\",\\\"value\\\":\\\"MSCERT\\\",\\\"telemetry\\\":\\\"MSCERT\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"MSCERT\\\"]}}},{\\\"label\\\":\\\"इतर\\\",\\\"value\\\":\\\"Other\\\",\\\"telemetry\\\":\\\"\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"Other\\\"]}}}]},\\\"ageGroup\\\":{\\\"label\\\":\\\"वयोगट\\\",\\\"value\\\":\\\"ageGroup\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"विद्यार्थ्याचा वयोगट\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"५ वर्षापेक्षा कमी\\\",\\\"value\\\":\\\"0\\\",\\\"telemetry\\\":\\\"0\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"<5\\\"]}}},{\\\"label\\\":\\\"५ वर्ष\\\",\\\"value\\\":\\\"5\\\",\\\"telemetry\\\":\\\"5\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"5-6\\\"]}}},{\\\"label\\\":\\\"६ वर्ष\\\",\\\"value\\\":\\\"6\\\",\\\"telemetry\\\":\\\"6\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"6-7\\\"]}}},{\\\"label\\\":\\\"७ ते ८ वर्षे\\\",\\\"value\\\":\\\"7\\\",\\\"telemetry\\\":\\\"7\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"7-8\\\"]}}},{\\\"label\\\":\\\"८ ते १० वर्षे\\\",\\\"value\\\":\\\"8\\\",\\\"telemetry\\\":\\\"8\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"8-10\\\"]}}},{\\\"label\\\":\\\"१० वर्षापेक्षा जास्त\\\",\\\"value\\\":\\\"10\\\",\\\"telemetry\\\":\\\"10\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"इतर\\\",\\\"value\\\":\\\"-1\\\",\\\"telemetry\\\":\\\"-1\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"Other\\\"]}}}]},\\\"gradeLevel\\\":{\\\"label\\\":\\\"इयत्ता\\\",\\\"value\\\":\\\"gradeLevel\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"विद्यार्थ्याची इयत्ता\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"पूर्व प्राथमिक वर्ग/अंगणवाडी/बालवाडी\\\",\\\"value\\\":\\\"0\\\",\\\"telemetry\\\":\\\"0\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Kindergarten\\\"]}}},{\\\"label\\\":\\\"इयत्ता १ ली\\\",\\\"value\\\":\\\"1\\\",\\\"telemetry\\\":\\\"1\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 1\\\"]}}},{\\\"label\\\":\\\"इयत्ता २ ऱी\\\",\\\"value\\\":\\\"2\\\",\\\"telemetry\\\":\\\"2\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 2\\\"]}}},{\\\"label\\\":\\\"इयत्ता ३ ऱी\\\",\\\"value\\\":\\\"3\\\",\\\"telemetry\\\":\\\"3\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 3\\\"]}}},{\\\"label\\\":\\\"इयत्ता ४ थी\\\",\\\"value\\\":\\\"4\\\",\\\"telemetry\\\":\\\"4\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 4\\\"]}}},{\\\"label\\\":\\\"इयत्ता ५ वी5\\\",\\\"value\\\":\\\"5\\\",\\\"telemetry\\\":\\\"5\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 5\\\"]}}},{\\\"label\\\":\\\"इतर\\\",\\\"value\\\":\\\"-1\\\",\\\"telemetry\\\":\\\"-1\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Other\\\"]}}}]},\\\"age\\\":{\\\"label\\\":\\\"वयोगट\\\",\\\"value\\\":\\\"age\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"वापरणाऱ्याचा वयोगट\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"५ वर्षे\\\",\\\"value\\\":\\\"5\\\",\\\"telemetry\\\":\\\"5\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"<5\\\",\\\"5-6\\\"]}}},{\\\"label\\\":\\\"६ वर्षे\\\",\\\"value\\\":\\\"6\\\",\\\"telemetry\\\":\\\"6\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"5-6\\\",\\\"6-7\\\"]}}},{\\\"label\\\":\\\"७ वर्षे\\\",\\\"value\\\":\\\"7\\\",\\\"telemetry\\\":\\\"7\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"6-7\\\",\\\"7-8\\\"]}}},{\\\"label\\\":\\\"८ वर्षे\\\",\\\"value\\\":\\\"8\\\",\\\"telemetry\\\":\\\"8\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"7-8\\\",\\\"8-10\\\"]}}},{\\\"label\\\":\\\"९ वर्षे\\\",\\\"value\\\":\\\"9\\\",\\\"telemetry\\\":\\\"9\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"8-10\\\"]}}},{\\\"label\\\":\\\"१० वर्षे\\\",\\\"value\\\":\\\"10\\\",\\\"telemetry\\\":\\\"10\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"8-10\\\",\\\">10\\\"]}}},{\\\"label\\\":\\\"११ वर्षे\\\",\\\"value\\\":\\\"11\\\",\\\"telemetry\\\":\\\"11\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"१२ वर्षे\\\",\\\"value\\\":\\\"12\\\",\\\"telemetry\\\":\\\"12\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"१३ वर्षे\\\",\\\"value\\\":\\\"13\\\",\\\"telemetry\\\":\\\"13\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"१४ वर्षे\\\",\\\"value\\\":\\\"14\\\",\\\"telemetry\\\":\\\"14\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"१५ वर्षे\\\",\\\"value\\\":\\\"15\\\",\\\"telemetry\\\":\\\"15\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"१६ वर्षे\\\",\\\"value\\\":\\\"16\\\",\\\"telemetry\\\":\\\"16\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"१७ वर्षे\\\",\\\"value\\\":\\\"17\\\",\\\"telemetry\\\":\\\"17\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"१८ वर्षे\\\",\\\"value\\\":\\\"18\\\",\\\"telemetry\\\":\\\"18\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"इतर\\\",\\\"value\\\":\\\"-1\\\",\\\"telemetry\\\":\\\"-1\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"Others\\\"]}}}]},\\\"ttl\\\":24}\"\nset en \"{\\\"gradeLevel\\\":{\\\"label\\\":\\\"Grade Level\\\",\\\"value\\\":\\\"gradeLevel\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"Grade Level of the child\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"KG\\\",\\\"value\\\":\\\"0\\\",\\\"telemetry\\\":\\\"0\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Kindergarten\\\"]}}},{\\\"label\\\":\\\"Grade 1\\\",\\\"value\\\":\\\"1\\\",\\\"telemetry\\\":\\\"1\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 1\\\"]}}},{\\\"label\\\":\\\"Grade 2\\\",\\\"value\\\":\\\"2\\\",\\\"telemetry\\\":\\\"2\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 2\\\"]}}},{\\\"label\\\":\\\"Grade 3\\\",\\\"value\\\":\\\"3\\\",\\\"telemetry\\\":\\\"3\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 3\\\"]}}},{\\\"label\\\":\\\"Grade 4\\\",\\\"value\\\":\\\"4\\\",\\\"telemetry\\\":\\\"4\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 4\\\"]}}},{\\\"label\\\":\\\"Grade 5\\\",\\\"value\\\":\\\"5\\\",\\\"telemetry\\\":\\\"5\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 5\\\"]}}},{\\\"label\\\":\\\"Grade 6\\\",\\\"value\\\":\\\"6\\\",\\\"telemetry\\\":\\\"6\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 6\\\"]}}},{\\\"label\\\":\\\"Grade 7\\\",\\\"value\\\":\\\"7\\\",\\\"telemetry\\\":\\\"7\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 7\\\"]}}},{\\\"label\\\":\\\"Grade 8\\\",\\\"value\\\":\\\"8\\\",\\\"telemetry\\\":\\\"8\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 8\\\"]}}},{\\\"label\\\":\\\"Grade 9\\\",\\\"value\\\":\\\"9\\\",\\\"telemetry\\\":\\\"9\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 9\\\"]}}},{\\\"label\\\":\\\"Grade 10\\\",\\\"value\\\":\\\"10\\\",\\\"telemetry\\\":\\\"10\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 10\\\"]}}},{\\\"label\\\":\\\"Grade 11\\\",\\\"value\\\":\\\"11\\\",\\\"telemetry\\\":\\\"11\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 11\\\"]}}},{\\\"label\\\":\\\"Grade 12\\\",\\\"value\\\":\\\"12\\\",\\\"telemetry\\\":\\\"12\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 12\\\"]}}},{\\\"label\\\":\\\"Others\\\",\\\"value\\\":\\\"-1\\\",\\\"telemetry\\\":\\\"-1\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{}}}]},\\\"subject\\\":{\\\"label\\\":\\\"Subject\\\",\\\"value\\\":\\\"subject\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"Subject of the content\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"English\\\",\\\"value\\\":\\\"English\\\",\\\"telemetry\\\":\\\"English\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"English\\\"]}}},{\\\"label\\\":\\\"Hindi\\\",\\\"value\\\":\\\"Hindi\\\",\\\"telemetry\\\":\\\"Hindi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Hindi\\\"]}}},{\\\"label\\\":\\\"Assamese\\\",\\\"value\\\":\\\"Assamese\\\",\\\"telemetry\\\":\\\"Assamese\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Assamese\\\"]}}},{\\\"label\\\":\\\"Bengali\\\",\\\"value\\\":\\\"Bengali\\\",\\\"telemetry\\\":\\\"Bengali\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Bengali\\\"]}}},{\\\"label\\\":\\\"Gujarati\\\",\\\"value\\\":\\\"Gujarati\\\",\\\"telemetry\\\":\\\"Gujarati\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Gujarati\\\"]}}},{\\\"label\\\":\\\"Kannada\\\",\\\"value\\\":\\\"Kannada\\\",\\\"telemetry\\\":\\\"Kannada\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Kannada\\\"]}}},{\\\"label\\\":\\\"Malayalam\\\",\\\"value\\\":\\\"Malayalam\\\",\\\"telemetry\\\":\\\"Malayalam\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Malayalam\\\"]}}},{\\\"label\\\":\\\"Marathi\\\",\\\"value\\\":\\\"Marathi\\\",\\\"telemetry\\\":\\\"Marathi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Marathi\\\"]}}},{\\\"label\\\":\\\"Nepali\\\",\\\"value\\\":\\\"Nepali\\\",\\\"telemetry\\\":\\\"Nepali\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Nepali\\\"]}}},{\\\"label\\\":\\\"Oriya\\\",\\\"value\\\":\\\"Oriya\\\",\\\"telemetry\\\":\\\"Oriya\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Oriya\\\"]}}},{\\\"label\\\":\\\"Punjabi\\\",\\\"value\\\":\\\"Punjabi\\\",\\\"telemetry\\\":\\\"Punjabi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Punjabi\\\"]}}},{\\\"label\\\":\\\"Tamil\\\",\\\"value\\\":\\\"Tamil\\\",\\\"telemetry\\\":\\\"Tamil\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Tamil\\\"]}}},{\\\"label\\\":\\\"Telugu\\\",\\\"value\\\":\\\"Telugu\\\",\\\"telemetry\\\":\\\"Telugu\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Telugu\\\"]}}},{\\\"label\\\":\\\"Urdu\\\",\\\"value\\\":\\\"Urdu\\\",\\\"telemetry\\\":\\\"Urdu\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Urdu\\\"]}}},{\\\"label\\\":\\\"Biology\\\",\\\"value\\\":\\\"Biology\\\",\\\"telemetry\\\":\\\"Biology\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Biology\\\"]}}},{\\\"label\\\":\\\"Chemistry\\\",\\\"value\\\":\\\"Chemistry\\\",\\\"telemetry\\\":\\\"Chemistry\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Chemistry\\\"]}}},{\\\"label\\\":\\\"Physics\\\",\\\"value\\\":\\\"Physics\\\",\\\"telemetry\\\":\\\"Physics\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Physics\\\"]}}},{\\\"label\\\":\\\"Mathematics\\\",\\\"value\\\":\\\"Mathematics\\\",\\\"telemetry\\\":\\\"Mathematics\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Mathematics\\\"]}}},{\\\"label\\\":\\\"Environmental Studies\\\",\\\"value\\\":\\\"Environmental Studies\\\",\\\"telemetry\\\":\\\"Environmental Studies\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Environmental Studies\\\"]}}},{\\\"label\\\":\\\"Geography\\\",\\\"value\\\":\\\"Geography\\\",\\\"telemetry\\\":\\\"Geography\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Geography\\\"]}}},{\\\"label\\\":\\\"History\\\",\\\"value\\\":\\\"History\\\",\\\"telemetry\\\":\\\"History\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"History\\\"]}}},{\\\"label\\\":\\\"Political Science\\\",\\\"value\\\":\\\"Political Science\\\",\\\"telemetry\\\":\\\"Political Science\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Political Science\\\"]}}},{\\\"label\\\":\\\"Economics\\\",\\\"value\\\":\\\"Economics\\\",\\\"telemetry\\\":\\\"Economics\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Economics\\\"]}}},{\\\"label\\\":\\\"Sanskrit\\\",\\\"value\\\":\\\"Sanskrit\\\",\\\"telemetry\\\":\\\"Sanskrit\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Sanskrit\\\"]}}}]},\\\"medium\\\":{\\\"label\\\":\\\"Medium\\\",\\\"value\\\":\\\"medium\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"Medium of instruction\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"English\\\",\\\"value\\\":\\\"English\\\",\\\"telemetry\\\":\\\"English\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"English\\\"]}}},{\\\"label\\\":\\\"Hindi\\\",\\\"value\\\":\\\"Hindi\\\",\\\"telemetry\\\":\\\"Hindi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Hindi\\\"]}}},{\\\"label\\\":\\\"Assamese\\\",\\\"value\\\":\\\"Assamese\\\",\\\"telemetry\\\":\\\"Assamese\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Assamese\\\"]}}},{\\\"label\\\":\\\"Bengali\\\",\\\"value\\\":\\\"Bengali\\\",\\\"telemetry\\\":\\\"Bengali\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Bengali\\\"]}}},{\\\"label\\\":\\\"Gujarati\\\",\\\"value\\\":\\\"Gujarati\\\",\\\"telemetry\\\":\\\"Gujarati\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Gujarati\\\"]}}},{\\\"label\\\":\\\"Kannada\\\",\\\"value\\\":\\\"Kannada\\\",\\\"telemetry\\\":\\\"Kannada\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Kannada\\\"]}}},{\\\"label\\\":\\\"Malayalam\\\",\\\"value\\\":\\\"Malayalam\\\",\\\"telemetry\\\":\\\"Malayalam\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Malayalam\\\"]}}},{\\\"label\\\":\\\"Marathi\\\",\\\"value\\\":\\\"Marathi\\\",\\\"telemetry\\\":\\\"Marathi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Marathi\\\"]}}},{\\\"label\\\":\\\"Nepali\\\",\\\"value\\\":\\\"Nepali\\\",\\\"telemetry\\\":\\\"Nepali\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Nepali\\\"]}}},{\\\"label\\\":\\\"Oriya\\\",\\\"value\\\":\\\"Oriya\\\",\\\"telemetry\\\":\\\"Oriya\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Oriya\\\"]}}},{\\\"label\\\":\\\"Punjabi\\\",\\\"value\\\":\\\"Punjabi\\\",\\\"telemetry\\\":\\\"Punjabi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Punjabi\\\"]}}},{\\\"label\\\":\\\"Tamil\\\",\\\"value\\\":\\\"Tamil\\\",\\\"telemetry\\\":\\\"Tamil\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Tamil\\\"]}}},{\\\"label\\\":\\\"Telugu\\\",\\\"value\\\":\\\"Telugu\\\",\\\"telemetry\\\":\\\"Telugu\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Telugu\\\"]}}},{\\\"label\\\":\\\"Urdu\\\",\\\"value\\\":\\\"Urdu\\\",\\\"telemetry\\\":\\\"Urdu\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Urdu\\\"]}}},{\\\"label\\\":\\\"Other\\\",\\\"value\\\":\\\"Other\\\",\\\"telemetry\\\":\\\"\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{}}]},\\\"ageGroup\\\":{\\\"label\\\":\\\"Age Group\\\",\\\"value\\\":\\\"ageGroup\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"Age Group of the child\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"<5 Years\\\",\\\"value\\\":\\\"0\\\",\\\"telemetry\\\":\\\"0\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"<5\\\"]}}},{\\\"label\\\":\\\"5 Years\\\",\\\"value\\\":\\\"5\\\",\\\"telemetry\\\":\\\"5\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"5-6\\\"]}}},{\\\"label\\\":\\\"6 Years\\\",\\\"value\\\":\\\"6\\\",\\\"telemetry\\\":\\\"6\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"6-7\\\"]}}},{\\\"label\\\":\\\"7-8 Years\\\",\\\"value\\\":\\\"7\\\",\\\"telemetry\\\":\\\"7\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"7-8\\\"]}}},{\\\"label\\\":\\\"8-10 Years\\\",\\\"value\\\":\\\"8\\\",\\\"telemetry\\\":\\\"8\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"8-10\\\"]}}},{\\\"label\\\":\\\">10 Years\\\",\\\"value\\\":\\\"10\\\",\\\"telemetry\\\":\\\"10\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"Others\\\",\\\"value\\\":\\\"-1\\\",\\\"telemetry\\\":\\\"-1\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{}}}]},\\\"board\\\":{\\\"label\\\":\\\"Board\\\",\\\"value\\\":\\\"board\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"Curriculum\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"NCERT\\\",\\\"value\\\":\\\"NCERT\\\",\\\"telemetry\\\":\\\"NCERT\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"NCERT\\\"]}}},{\\\"label\\\":\\\"CBSE\\\",\\\"value\\\":\\\"CBSE\\\",\\\"telemetry\\\":\\\"CBSE\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"CBSE\\\"]}}},{\\\"label\\\":\\\"ICSE\\\",\\\"value\\\":\\\"ICSE\\\",\\\"telemetry\\\":\\\"ICSE\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"ICSE\\\"]}}},{\\\"label\\\":\\\"UP Board\\\",\\\"value\\\":\\\"UP Board\\\",\\\"telemetry\\\":\\\"UP Board\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"UP Board\\\"]}}},{\\\"label\\\":\\\"AP Board\\\",\\\"value\\\":\\\"AP Board\\\",\\\"telemetry\\\":\\\"AP Board\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"AP Board\\\"]}}},{\\\"label\\\":\\\"TN Board\\\",\\\"value\\\":\\\"TN Board\\\",\\\"telemetry\\\":\\\"TN Board\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"TN Board\\\"]}}},{\\\"label\\\":\\\"NCTE\\\",\\\"value\\\":\\\"NCTE\\\",\\\"telemetry\\\":\\\"NCTE\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"NCTE\\\"]}}},{\\\"label\\\":\\\"MSCERT\\\",\\\"value\\\":\\\"MSCERT\\\",\\\"telemetry\\\":\\\"MSCERT\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"MSCERT\\\"]}}},{\\\"label\\\":\\\"Other\\\",\\\"value\\\":\\\"Other\\\",\\\"telemetry\\\":\\\"\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{}}}]},\\\"age\\\":{\\\"label\\\":\\\"Age\\\",\\\"value\\\":\\\"age\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"Age list for user profiles\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"5 Years\\\",\\\"value\\\":\\\"5\\\",\\\"telemetry\\\":\\\"5\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"<5\\\",\\\"5-6\\\"]}}},{\\\"label\\\":\\\"6 Years\\\",\\\"value\\\":\\\"6\\\",\\\"telemetry\\\":\\\"6\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"5-6\\\",\\\"6-7\\\"]}}},{\\\"label\\\":\\\"7 Years\\\",\\\"value\\\":\\\"7\\\",\\\"telemetry\\\":\\\"7\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"6-7\\\",\\\"7-8\\\"]}}},{\\\"label\\\":\\\"8 Years\\\",\\\"value\\\":\\\"8\\\",\\\"telemetry\\\":\\\"8\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"7-8\\\",\\\"8-10\\\"]}}},{\\\"label\\\":\\\"9 Years\\\",\\\"value\\\":\\\"9\\\",\\\"telemetry\\\":\\\"9\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"8-10\\\"]}}},{\\\"label\\\":\\\"10 Years\\\",\\\"value\\\":\\\"10\\\",\\\"telemetry\\\":\\\"10\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"8-10\\\",\\\">10\\\"]}}},{\\\"label\\\":\\\"11 Years\\\",\\\"value\\\":\\\"11\\\",\\\"telemetry\\\":\\\"11\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"12 Years\\\",\\\"value\\\":\\\"12\\\",\\\"telemetry\\\":\\\"12\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"13 Years\\\",\\\"value\\\":\\\"13\\\",\\\"telemetry\\\":\\\"13\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"14 Years\\\",\\\"value\\\":\\\"14\\\",\\\"telemetry\\\":\\\"14\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"15 Years\\\",\\\"value\\\":\\\"15\\\",\\\"telemetry\\\":\\\"15\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"16 Years\\\",\\\"value\\\":\\\"16\\\",\\\"telemetry\\\":\\\"16\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"17 Years\\\",\\\"value\\\":\\\"17\\\",\\\"telemetry\\\":\\\"17\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"18 Years\\\",\\\"value\\\":\\\"18\\\",\\\"telemetry\\\":\\\"18\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"Other\\\",\\\"value\\\":\\\"-1\\\",\\\"telemetry\\\":\\\"-1\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{}}}]},\\\"channel\\\":{\\\"label\\\":\\\"Channel\\\",\\\"value\\\":\\\"channel\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"List of partner channels\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"APSSDC\\\",\\\"value\\\":\\\"AP_1\\\",\\\"telemetry\\\":\\\"AP_1\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"tags\\\":\\[\\\"APSSDC\\\"]}}},{\\\"label\\\":\\\"GPF\\\",\\\"value\\\":\\\"GP_1\\\",\\\"telemetry\\\":\\\"GP_1\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"tags\\\":\\[\\\"GPF\\\"]}}}]},\\\"audience\\\":{\\\"label\\\":\\\"audience\\\",\\\"value\\\":\\\"audience\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"Purpose of the content\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"Learner\\\",\\\"value\\\":\\\"learner\\\",\\\"telemetry\\\":\\\"learner\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"audience\\\":\\[\\\"learner\\\"]}}},{\\\"label\\\":\\\"Instructor\\\",\\\"value\\\":\\\"instructor\\\",\\\"telemetry\\\":\\\"instructor\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"audience\\\":\\[\\\"instructor\\\"]}}}]},\\\"ttl\\\":24}\"\nset is_langId_null [java::isnull $language]\nif {($is_langId_null == 0)} {\nset langId [$language toString]\nif {$langId == \"mr\"} {\nset terms [java::new String $mr]\n} else {\nset terms [java::new String $en]\n}\n} else {\nset terms [java::new String $en]\n}\nset termsObj [java::call JSONUtils \"convertJSONString\" $terms]\nset response_list [create_response $termsObj]\nreturn $response_list", "type" : "SCRIPT", "parameters" : [ { "name" : "language", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/terms/list", "request_params" : [ "language" ] } }
,{ "_id" : { "$oid" : "58c24db628271909285d2101" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "listTerms_v3", "api_id" : "ekstep.learning.terms.list", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.common JSONUtils\nset mr \"{\\\"subject\\\":{\\\"label\\\":\\\"विषय\\\",\\\"value\\\":\\\"subject\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"सामग्री चा विषय\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"गणित\\\",\\\"value\\\":\\\"Maths\\\",\\\"telemetry\\\":\\\"Maths\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"MATHS\\\"]}}},{\\\"label\\\":\\\"इंग्रजी\\\",\\\"value\\\":\\\"English\\\",\\\"telemetry\\\":\\\"English\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"English\\\"]}}},{\\\"label\\\":\\\"हिंदी\\\",\\\"value\\\":\\\"Hindi\\\",\\\"telemetry\\\":\\\"Hindi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Hindi\\\"]}}},{\\\"label\\\":\\\"आसामी\\\",\\\"value\\\":\\\"Assamese\\\",\\\"telemetry\\\":\\\"Assamese\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Assamese\\\"]}}},{\\\"label\\\":\\\"बंगाली\\\",\\\"value\\\":\\\"Bengali\\\",\\\"telemetry\\\":\\\"Bengali\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Bengali\\\"]}}},{\\\"label\\\":\\\"गुजराती\\\",\\\"value\\\":\\\"Gujarati\\\",\\\"telemetry\\\":\\\"Gujarati\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Gujarati\\\"]}}},{\\\"label\\\":\\\"कन्नड\\\",\\\"value\\\":\\\"Kannada\\\",\\\"telemetry\\\":\\\"Kannada\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Kannada\\\"]}}},{\\\"label\\\":\\\"मल्याळम्\\\",\\\"value\\\":\\\"Malayalam\\\",\\\"telemetry\\\":\\\"Malayalam\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Malayalam\\\"]}}},{\\\"label\\\":\\\"मराठी\\\",\\\"value\\\":\\\"Marathi\\\",\\\"telemetry\\\":\\\"Marathi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Marathi\\\"]}}},{\\\"label\\\":\\\"नेपाळी\\\",\\\"value\\\":\\\"Nepali\\\",\\\"telemetry\\\":\\\"Nepali\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Nepali\\\"]}}},{\\\"label\\\":\\\"ओरिया/उडीसा\\\",\\\"value\\\":\\\"Oriya\\\",\\\"telemetry\\\":\\\"Oriya\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Oriya\\\"]}}},{\\\"label\\\":\\\"पंजाबी\\\",\\\"value\\\":\\\"Punjabi\\\",\\\"telemetry\\\":\\\"Punjabi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Punjabi\\\"]}}},{\\\"label\\\":\\\"तमिळ\\\",\\\"value\\\":\\\"Tamil\\\",\\\"telemetry\\\":\\\"Tamil\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Tamil\\\"]}}},{\\\"label\\\":\\\"तेलगु\\\",\\\"value\\\":\\\"Telugu\\\",\\\"telemetry\\\":\\\"Telugu\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Telugu\\\"]}}},{\\\"label\\\":\\\"उर्दु\\\",\\\"value\\\":\\\"Urdu\\\",\\\"telemetry\\\":\\\"Urdu\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Urdu\\\"]}}}]},\\\"medium\\\":{\\\"label\\\":\\\"माध्यम\\\",\\\"value\\\":\\\"medium\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"सूचनेचे माध्यम\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"इंग्रजी\\\",\\\"value\\\":\\\"English\\\",\\\"telemetry\\\":\\\"English\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"English\\\"]}}},{\\\"label\\\":\\\"हिंदी\\\",\\\"value\\\":\\\"Hindi\\\",\\\"telemetry\\\":\\\"Hindi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Hindi\\\"]}}},{\\\"label\\\":\\\"आसामी\\\",\\\"value\\\":\\\"Assamese\\\",\\\"telemetry\\\":\\\"Assamese\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Assamese\\\"]}}},{\\\"label\\\":\\\"बंगाली\\\",\\\"value\\\":\\\"Bengali\\\",\\\"telemetry\\\":\\\"Bengali\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Bengali\\\"]}}},{\\\"label\\\":\\\"गुजराती\\\",\\\"value\\\":\\\"Gujarati\\\",\\\"telemetry\\\":\\\"Gujarati\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Gujarati\\\"]}}},{\\\"label\\\":\\\"कन्नड\\\",\\\"value\\\":\\\"Kannada\\\",\\\"telemetry\\\":\\\"Kannada\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Kannada\\\"]}}},{\\\"label\\\":\\\"मल्याळम्\\\",\\\"value\\\":\\\"Malayalam\\\",\\\"telemetry\\\":\\\"Malayalam\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Malayalam\\\"]}}},{\\\"label\\\":\\\"मराठी\\\",\\\"value\\\":\\\"Marathi\\\",\\\"telemetry\\\":\\\"Marathi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Marathi\\\"]}}},{\\\"label\\\":\\\"नेपाळी\\\",\\\"value\\\":\\\"Nepali\\\",\\\"telemetry\\\":\\\"Nepali\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Nepali\\\"]}}},{\\\"label\\\":\\\"ओरिया\\\",\\\"value\\\":\\\"Oriya\\\",\\\"telemetry\\\":\\\"Oriya\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Oriya\\\"]}}},{\\\"label\\\":\\\"पंजाबी\\\",\\\"value\\\":\\\"Punjabi\\\",\\\"telemetry\\\":\\\"Punjabi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Punjabi\\\"]}}},{\\\"label\\\":\\\"तमिळ\\\",\\\"value\\\":\\\"Tamil\\\",\\\"telemetry\\\":\\\"Tamil\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Tamil\\\"]}}},{\\\"label\\\":\\\"तेलगू\\\",\\\"value\\\":\\\"Telugu\\\",\\\"telemetry\\\":\\\"Telugu\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Telugu\\\"]}}},{\\\"label\\\":\\\"उर्दु\\\",\\\"value\\\":\\\"Urdu\\\",\\\"telemetry\\\":\\\"Urdu\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Urdu\\\"]}}},{\\\"label\\\":\\\"इतर\\\",\\\"value\\\":\\\"Other\\\",\\\"telemetry\\\":\\\"\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{}}]},\\\"board\\\":{\\\"label\\\":\\\"परीक्षा मंडळ\\\",\\\"value\\\":\\\"board\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"अभ्यासक्रम\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"राष्ट्रिय शैक्षणिक संशोधन परिषद (NCERT)\\\",\\\"value\\\":\\\"NCERT\\\",\\\"telemetry\\\":\\\"NCERT\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"NCERT\\\"]}}},{\\\"label\\\":\\\"सी.बी.एस.ई (CBSE)\\\",\\\"value\\\":\\\"CBSE\\\",\\\"telemetry\\\":\\\"CBSE\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"CBSE\\\"]}}},{\\\"label\\\":\\\"आय.सी.एस.ई (ICSE)\\\",\\\"value\\\":\\\"ICSE\\\",\\\"telemetry\\\":\\\"ICSE\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"ICSE\\\"]}}},{\\\"label\\\":\\\"महाराष्ट्र राज्य शैक्षणिक संशोधन व प्रशिक्षण परिषद (MSCERT)\\\",\\\"value\\\":\\\"MSCERT\\\",\\\"telemetry\\\":\\\"MSCERT\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"MSCERT\\\"]}}},{\\\"label\\\":\\\"इतर\\\",\\\"value\\\":\\\"Other\\\",\\\"telemetry\\\":\\\"\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"Other\\\"]}}}]},\\\"ageGroup\\\":{\\\"label\\\":\\\"वयोगट\\\",\\\"value\\\":\\\"ageGroup\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"विद्यार्थ्याचा वयोगट\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"५ वर्षापेक्षा कमी\\\",\\\"value\\\":\\\"0\\\",\\\"telemetry\\\":\\\"0\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"<5\\\"]}}},{\\\"label\\\":\\\"५ वर्ष\\\",\\\"value\\\":\\\"5\\\",\\\"telemetry\\\":\\\"5\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"5-6\\\"]}}},{\\\"label\\\":\\\"६ वर्ष\\\",\\\"value\\\":\\\"6\\\",\\\"telemetry\\\":\\\"6\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"6-7\\\"]}}},{\\\"label\\\":\\\"७ ते ८ वर्षे\\\",\\\"value\\\":\\\"7\\\",\\\"telemetry\\\":\\\"7\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"7-8\\\"]}}},{\\\"label\\\":\\\"८ ते १० वर्षे\\\",\\\"value\\\":\\\"8\\\",\\\"telemetry\\\":\\\"8\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"8-10\\\"]}}},{\\\"label\\\":\\\"१० वर्षापेक्षा जास्त\\\",\\\"value\\\":\\\"10\\\",\\\"telemetry\\\":\\\"10\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"इतर\\\",\\\"value\\\":\\\"-1\\\",\\\"telemetry\\\":\\\"-1\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"Other\\\"]}}}]},\\\"gradeLevel\\\":{\\\"label\\\":\\\"इयत्ता\\\",\\\"value\\\":\\\"gradeLevel\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"विद्यार्थ्याची इयत्ता\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"पूर्व प्राथमिक वर्ग/अंगणवाडी/बालवाडी\\\",\\\"value\\\":\\\"0\\\",\\\"telemetry\\\":\\\"0\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Kindergarten\\\"]}}},{\\\"label\\\":\\\"इयत्ता १ ली\\\",\\\"value\\\":\\\"1\\\",\\\"telemetry\\\":\\\"1\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 1\\\"]}}},{\\\"label\\\":\\\"इयत्ता २ ऱी\\\",\\\"value\\\":\\\"2\\\",\\\"telemetry\\\":\\\"2\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 2\\\"]}}},{\\\"label\\\":\\\"इयत्ता ३ ऱी\\\",\\\"value\\\":\\\"3\\\",\\\"telemetry\\\":\\\"3\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 3\\\"]}}},{\\\"label\\\":\\\"इयत्ता ४ थी\\\",\\\"value\\\":\\\"4\\\",\\\"telemetry\\\":\\\"4\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 4\\\"]}}},{\\\"label\\\":\\\"इयत्ता ५ वी5\\\",\\\"value\\\":\\\"5\\\",\\\"telemetry\\\":\\\"5\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 5\\\"]}}},{\\\"label\\\":\\\"इतर\\\",\\\"value\\\":\\\"-1\\\",\\\"telemetry\\\":\\\"-1\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Other\\\"]}}}]},\\\"age\\\":{\\\"label\\\":\\\"वयोगट\\\",\\\"value\\\":\\\"age\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"वापरणाऱ्याचा वयोगट\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"५ वर्षे\\\",\\\"value\\\":\\\"5\\\",\\\"telemetry\\\":\\\"5\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"<5\\\",\\\"5-6\\\"]}}},{\\\"label\\\":\\\"६ वर्षे\\\",\\\"value\\\":\\\"6\\\",\\\"telemetry\\\":\\\"6\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"5-6\\\",\\\"6-7\\\"]}}},{\\\"label\\\":\\\"७ वर्षे\\\",\\\"value\\\":\\\"7\\\",\\\"telemetry\\\":\\\"7\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"6-7\\\",\\\"7-8\\\"]}}},{\\\"label\\\":\\\"८ वर्षे\\\",\\\"value\\\":\\\"8\\\",\\\"telemetry\\\":\\\"8\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"7-8\\\",\\\"8-10\\\"]}}},{\\\"label\\\":\\\"९ वर्षे\\\",\\\"value\\\":\\\"9\\\",\\\"telemetry\\\":\\\"9\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"8-10\\\"]}}},{\\\"label\\\":\\\"१० वर्षे\\\",\\\"value\\\":\\\"10\\\",\\\"telemetry\\\":\\\"10\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"8-10\\\",\\\">10\\\"]}}},{\\\"label\\\":\\\"११ वर्षे\\\",\\\"value\\\":\\\"11\\\",\\\"telemetry\\\":\\\"11\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"१२ वर्षे\\\",\\\"value\\\":\\\"12\\\",\\\"telemetry\\\":\\\"12\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"१३ वर्षे\\\",\\\"value\\\":\\\"13\\\",\\\"telemetry\\\":\\\"13\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"१४ वर्षे\\\",\\\"value\\\":\\\"14\\\",\\\"telemetry\\\":\\\"14\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"१५ वर्षे\\\",\\\"value\\\":\\\"15\\\",\\\"telemetry\\\":\\\"15\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"१६ वर्षे\\\",\\\"value\\\":\\\"16\\\",\\\"telemetry\\\":\\\"16\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"१७ वर्षे\\\",\\\"value\\\":\\\"17\\\",\\\"telemetry\\\":\\\"17\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"१८ वर्षे\\\",\\\"value\\\":\\\"18\\\",\\\"telemetry\\\":\\\"18\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"इतर\\\",\\\"value\\\":\\\"-1\\\",\\\"telemetry\\\":\\\"-1\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"Others\\\"]}}}]},\\\"ttl\\\":24}\"\nset en \"{\\\"gradeLevel\\\":{\\\"label\\\":\\\"Grade Level\\\",\\\"value\\\":\\\"gradeLevel\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"Grade Level of the child\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"KG\\\",\\\"value\\\":\\\"0\\\",\\\"telemetry\\\":\\\"0\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Kindergarten\\\"]}}},{\\\"label\\\":\\\"Grade 1\\\",\\\"value\\\":\\\"1\\\",\\\"telemetry\\\":\\\"1\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 1\\\"]}}},{\\\"label\\\":\\\"Grade 2\\\",\\\"value\\\":\\\"2\\\",\\\"telemetry\\\":\\\"2\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 2\\\"]}}},{\\\"label\\\":\\\"Grade 3\\\",\\\"value\\\":\\\"3\\\",\\\"telemetry\\\":\\\"3\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 3\\\"]}}},{\\\"label\\\":\\\"Grade 4\\\",\\\"value\\\":\\\"4\\\",\\\"telemetry\\\":\\\"4\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 4\\\"]}}},{\\\"label\\\":\\\"Grade 5\\\",\\\"value\\\":\\\"5\\\",\\\"telemetry\\\":\\\"5\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 5\\\"]}}},{\\\"label\\\":\\\"Grade 6\\\",\\\"value\\\":\\\"6\\\",\\\"telemetry\\\":\\\"6\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 6\\\"]}}},{\\\"label\\\":\\\"Grade 7\\\",\\\"value\\\":\\\"7\\\",\\\"telemetry\\\":\\\"7\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 7\\\"]}}},{\\\"label\\\":\\\"Grade 8\\\",\\\"value\\\":\\\"8\\\",\\\"telemetry\\\":\\\"8\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 8\\\"]}}},{\\\"label\\\":\\\"Grade 9\\\",\\\"value\\\":\\\"9\\\",\\\"telemetry\\\":\\\"9\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 9\\\"]}}},{\\\"label\\\":\\\"Grade 10\\\",\\\"value\\\":\\\"10\\\",\\\"telemetry\\\":\\\"10\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 10\\\"]}}},{\\\"label\\\":\\\"Grade 11\\\",\\\"value\\\":\\\"11\\\",\\\"telemetry\\\":\\\"11\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 11\\\"]}}},{\\\"label\\\":\\\"Grade 12\\\",\\\"value\\\":\\\"12\\\",\\\"telemetry\\\":\\\"12\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"gradeLevel\\\":\\[\\\"Grade 12\\\"]}}},{\\\"label\\\":\\\"Others\\\",\\\"value\\\":\\\"-1\\\",\\\"telemetry\\\":\\\"-1\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{}}}]},\\\"subject\\\":{\\\"label\\\":\\\"Subject\\\",\\\"value\\\":\\\"subject\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"Subject of the content\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"English\\\",\\\"value\\\":\\\"English\\\",\\\"telemetry\\\":\\\"English\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"English\\\"]}}},{\\\"label\\\":\\\"Hindi\\\",\\\"value\\\":\\\"Hindi\\\",\\\"telemetry\\\":\\\"Hindi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Hindi\\\"]}}},{\\\"label\\\":\\\"Assamese\\\",\\\"value\\\":\\\"Assamese\\\",\\\"telemetry\\\":\\\"Assamese\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Assamese\\\"]}}},{\\\"label\\\":\\\"Bengali\\\",\\\"value\\\":\\\"Bengali\\\",\\\"telemetry\\\":\\\"Bengali\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Bengali\\\"]}}},{\\\"label\\\":\\\"Gujarati\\\",\\\"value\\\":\\\"Gujarati\\\",\\\"telemetry\\\":\\\"Gujarati\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Gujarati\\\"]}}},{\\\"label\\\":\\\"Kannada\\\",\\\"value\\\":\\\"Kannada\\\",\\\"telemetry\\\":\\\"Kannada\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Kannada\\\"]}}},{\\\"label\\\":\\\"Malayalam\\\",\\\"value\\\":\\\"Malayalam\\\",\\\"telemetry\\\":\\\"Malayalam\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Malayalam\\\"]}}},{\\\"label\\\":\\\"Marathi\\\",\\\"value\\\":\\\"Marathi\\\",\\\"telemetry\\\":\\\"Marathi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Marathi\\\"]}}},{\\\"label\\\":\\\"Nepali\\\",\\\"value\\\":\\\"Nepali\\\",\\\"telemetry\\\":\\\"Nepali\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Nepali\\\"]}}},{\\\"label\\\":\\\"Oriya\\\",\\\"value\\\":\\\"Oriya\\\",\\\"telemetry\\\":\\\"Oriya\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Oriya\\\"]}}},{\\\"label\\\":\\\"Punjabi\\\",\\\"value\\\":\\\"Punjabi\\\",\\\"telemetry\\\":\\\"Punjabi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Punjabi\\\"]}}},{\\\"label\\\":\\\"Tamil\\\",\\\"value\\\":\\\"Tamil\\\",\\\"telemetry\\\":\\\"Tamil\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Tamil\\\"]}}},{\\\"label\\\":\\\"Telugu\\\",\\\"value\\\":\\\"Telugu\\\",\\\"telemetry\\\":\\\"Telugu\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Telugu\\\"]}}},{\\\"label\\\":\\\"Urdu\\\",\\\"value\\\":\\\"Urdu\\\",\\\"telemetry\\\":\\\"Urdu\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Urdu\\\"]}}},{\\\"label\\\":\\\"Biology\\\",\\\"value\\\":\\\"Biology\\\",\\\"telemetry\\\":\\\"Biology\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Biology\\\"]}}},{\\\"label\\\":\\\"Chemistry\\\",\\\"value\\\":\\\"Chemistry\\\",\\\"telemetry\\\":\\\"Chemistry\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Chemistry\\\"]}}},{\\\"label\\\":\\\"Physics\\\",\\\"value\\\":\\\"Physics\\\",\\\"telemetry\\\":\\\"Physics\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Physics\\\"]}}},{\\\"label\\\":\\\"Mathematics\\\",\\\"value\\\":\\\"Mathematics\\\",\\\"telemetry\\\":\\\"Mathematics\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Mathematics\\\"]}}},{\\\"label\\\":\\\"Environmental Studies\\\",\\\"value\\\":\\\"Environmental Studies\\\",\\\"telemetry\\\":\\\"Environmental Studies\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Environmental Studies\\\"]}}},{\\\"label\\\":\\\"Geography\\\",\\\"value\\\":\\\"Geography\\\",\\\"telemetry\\\":\\\"Geography\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Geography\\\"]}}},{\\\"label\\\":\\\"History\\\",\\\"value\\\":\\\"History\\\",\\\"telemetry\\\":\\\"History\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"History\\\"]}}},{\\\"label\\\":\\\"Political Science\\\",\\\"value\\\":\\\"Political Science\\\",\\\"telemetry\\\":\\\"Political Science\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Political Science\\\"]}}},{\\\"label\\\":\\\"Economics\\\",\\\"value\\\":\\\"Economics\\\",\\\"telemetry\\\":\\\"Economics\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Economics\\\"]}}},{\\\"label\\\":\\\"Sanskrit\\\",\\\"value\\\":\\\"Sanskrit\\\",\\\"telemetry\\\":\\\"Sanskrit\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Sanskrit\\\"]}}}]},\\\"medium\\\":{\\\"label\\\":\\\"Medium\\\",\\\"value\\\":\\\"medium\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"Medium of instruction\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"English\\\",\\\"value\\\":\\\"English\\\",\\\"telemetry\\\":\\\"English\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"English\\\"]}}},{\\\"label\\\":\\\"Hindi\\\",\\\"value\\\":\\\"Hindi\\\",\\\"telemetry\\\":\\\"Hindi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Hindi\\\"]}}},{\\\"label\\\":\\\"Assamese\\\",\\\"value\\\":\\\"Assamese\\\",\\\"telemetry\\\":\\\"Assamese\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Assamese\\\"]}}},{\\\"label\\\":\\\"Bengali\\\",\\\"value\\\":\\\"Bengali\\\",\\\"telemetry\\\":\\\"Bengali\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Bengali\\\"]}}},{\\\"label\\\":\\\"Gujarati\\\",\\\"value\\\":\\\"Gujarati\\\",\\\"telemetry\\\":\\\"Gujarati\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Gujarati\\\"]}}},{\\\"label\\\":\\\"Kannada\\\",\\\"value\\\":\\\"Kannada\\\",\\\"telemetry\\\":\\\"Kannada\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Kannada\\\"]}}},{\\\"label\\\":\\\"Malayalam\\\",\\\"value\\\":\\\"Malayalam\\\",\\\"telemetry\\\":\\\"Malayalam\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"subject\\\":\\[\\\"Malayalam\\\"]}}},{\\\"label\\\":\\\"Marathi\\\",\\\"value\\\":\\\"Marathi\\\",\\\"telemetry\\\":\\\"Marathi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Marathi\\\"]}}},{\\\"label\\\":\\\"Nepali\\\",\\\"value\\\":\\\"Nepali\\\",\\\"telemetry\\\":\\\"Nepali\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Nepali\\\"]}}},{\\\"label\\\":\\\"Oriya\\\",\\\"value\\\":\\\"Oriya\\\",\\\"telemetry\\\":\\\"Oriya\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Oriya\\\"]}}},{\\\"label\\\":\\\"Punjabi\\\",\\\"value\\\":\\\"Punjabi\\\",\\\"telemetry\\\":\\\"Punjabi\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Punjabi\\\"]}}},{\\\"label\\\":\\\"Tamil\\\",\\\"value\\\":\\\"Tamil\\\",\\\"telemetry\\\":\\\"Tamil\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Tamil\\\"]}}},{\\\"label\\\":\\\"Telugu\\\",\\\"value\\\":\\\"Telugu\\\",\\\"telemetry\\\":\\\"Telugu\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Telugu\\\"]}}},{\\\"label\\\":\\\"Urdu\\\",\\\"value\\\":\\\"Urdu\\\",\\\"telemetry\\\":\\\"Urdu\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"medium\\\":\\[\\\"Urdu\\\"]}}},{\\\"label\\\":\\\"Other\\\",\\\"value\\\":\\\"Other\\\",\\\"telemetry\\\":\\\"\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{}}]},\\\"ageGroup\\\":{\\\"label\\\":\\\"Age Group\\\",\\\"value\\\":\\\"ageGroup\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"Age Group of the child\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"<5 Years\\\",\\\"value\\\":\\\"0\\\",\\\"telemetry\\\":\\\"0\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"<5\\\"]}}},{\\\"label\\\":\\\"5 Years\\\",\\\"value\\\":\\\"5\\\",\\\"telemetry\\\":\\\"5\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"5-6\\\"]}}},{\\\"label\\\":\\\"6 Years\\\",\\\"value\\\":\\\"6\\\",\\\"telemetry\\\":\\\"6\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"6-7\\\"]}}},{\\\"label\\\":\\\"7-8 Years\\\",\\\"value\\\":\\\"7\\\",\\\"telemetry\\\":\\\"7\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"7-8\\\"]}}},{\\\"label\\\":\\\"8-10 Years\\\",\\\"value\\\":\\\"8\\\",\\\"telemetry\\\":\\\"8\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"8-10\\\"]}}},{\\\"label\\\":\\\">10 Years\\\",\\\"value\\\":\\\"10\\\",\\\"telemetry\\\":\\\"10\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"Others\\\",\\\"value\\\":\\\"-1\\\",\\\"telemetry\\\":\\\"-1\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{}}}]},\\\"board\\\":{\\\"label\\\":\\\"Board\\\",\\\"value\\\":\\\"board\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"Curriculum\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"NCERT\\\",\\\"value\\\":\\\"NCERT\\\",\\\"telemetry\\\":\\\"NCERT\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"NCERT\\\"]}}},{\\\"label\\\":\\\"CBSE\\\",\\\"value\\\":\\\"CBSE\\\",\\\"telemetry\\\":\\\"CBSE\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"CBSE\\\"]}}},{\\\"label\\\":\\\"ICSE\\\",\\\"value\\\":\\\"ICSE\\\",\\\"telemetry\\\":\\\"ICSE\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"ICSE\\\"]}}},{\\\"label\\\":\\\"UP Board\\\",\\\"value\\\":\\\"UP Board\\\",\\\"telemetry\\\":\\\"UP Board\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"UP Board\\\"]}}},{\\\"label\\\":\\\"AP Board\\\",\\\"value\\\":\\\"AP Board\\\",\\\"telemetry\\\":\\\"AP Board\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"AP Board\\\"]}}},{\\\"label\\\":\\\"TN Board\\\",\\\"value\\\":\\\"TN Board\\\",\\\"telemetry\\\":\\\"TN Board\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"TN Board\\\"]}}},{\\\"label\\\":\\\"NCTE\\\",\\\"value\\\":\\\"NCTE\\\",\\\"telemetry\\\":\\\"NCTE\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"NCTE\\\"]}}},{\\\"label\\\":\\\"MSCERT\\\",\\\"value\\\":\\\"MSCERT\\\",\\\"telemetry\\\":\\\"MSCERT\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"board\\\":\\[\\\"MSCERT\\\"]}}},{\\\"label\\\":\\\"Other\\\",\\\"value\\\":\\\"Other\\\",\\\"telemetry\\\":\\\"\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{}}}]},\\\"age\\\":{\\\"label\\\":\\\"Age\\\",\\\"value\\\":\\\"age\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"Age list for user profiles\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"5 Years\\\",\\\"value\\\":\\\"5\\\",\\\"telemetry\\\":\\\"5\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"<5\\\",\\\"5-6\\\"]}}},{\\\"label\\\":\\\"6 Years\\\",\\\"value\\\":\\\"6\\\",\\\"telemetry\\\":\\\"6\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"5-6\\\",\\\"6-7\\\"]}}},{\\\"label\\\":\\\"7 Years\\\",\\\"value\\\":\\\"7\\\",\\\"telemetry\\\":\\\"7\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"6-7\\\",\\\"7-8\\\"]}}},{\\\"label\\\":\\\"8 Years\\\",\\\"value\\\":\\\"8\\\",\\\"telemetry\\\":\\\"8\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"7-8\\\",\\\"8-10\\\"]}}},{\\\"label\\\":\\\"9 Years\\\",\\\"value\\\":\\\"9\\\",\\\"telemetry\\\":\\\"9\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"8-10\\\"]}}},{\\\"label\\\":\\\"10 Years\\\",\\\"value\\\":\\\"10\\\",\\\"telemetry\\\":\\\"10\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\"8-10\\\",\\\">10\\\"]}}},{\\\"label\\\":\\\"11 Years\\\",\\\"value\\\":\\\"11\\\",\\\"telemetry\\\":\\\"11\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"12 Years\\\",\\\"value\\\":\\\"12\\\",\\\"telemetry\\\":\\\"12\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"13 Years\\\",\\\"value\\\":\\\"13\\\",\\\"telemetry\\\":\\\"13\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"14 Years\\\",\\\"value\\\":\\\"14\\\",\\\"telemetry\\\":\\\"14\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"15 Years\\\",\\\"value\\\":\\\"15\\\",\\\"telemetry\\\":\\\"15\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"16 Years\\\",\\\"value\\\":\\\"16\\\",\\\"telemetry\\\":\\\"16\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"17 Years\\\",\\\"value\\\":\\\"17\\\",\\\"telemetry\\\":\\\"17\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"18 Years\\\",\\\"value\\\":\\\"18\\\",\\\"telemetry\\\":\\\"18\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"ageGroup\\\":\\[\\\">10\\\"]}}},{\\\"label\\\":\\\"Other\\\",\\\"value\\\":\\\"-1\\\",\\\"telemetry\\\":\\\"-1\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{}}}]},\\\"channel\\\":{\\\"label\\\":\\\"Channel\\\",\\\"value\\\":\\\"channel\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"List of partner channels\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"APSSDC\\\",\\\"value\\\":\\\"AP_1\\\",\\\"telemetry\\\":\\\"AP_1\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"tags\\\":\\[\\\"APSSDC\\\"]}}},{\\\"label\\\":\\\"GPF\\\",\\\"value\\\":\\\"GP_1\\\",\\\"telemetry\\\":\\\"GP_1\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"tags\\\":\\[\\\"GPF\\\"]}}}]},\\\"audience\\\":{\\\"label\\\":\\\"audience\\\",\\\"value\\\":\\\"audience\\\",\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"Purpose of the content\\\",\\\"values\\\":\\[{\\\"label\\\":\\\"Learner\\\",\\\"value\\\":\\\"learner\\\",\\\"telemetry\\\":\\\"learner\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"audience\\\":\\[\\\"learner\\\"]}}},{\\\"label\\\":\\\"Instructor\\\",\\\"value\\\":\\\"instructor\\\",\\\"telemetry\\\":\\\"instructor\\\",\\\"description\\\":\\\"\\\",\\\"search\\\":{\\\"filters\\\":{\\\"audience\\\":\\[\\\"instructor\\\"]}}}]},\\\"ttl\\\":24}\"\nset is_langId_null [java::isnull $language]\nif {($is_langId_null == 0)} {\nset langId [$language toString]\nif {$langId == \"mr\"} {\nset terms [java::new String $mr]\n} else {\nset terms [java::new String $en]\n}\n} else {\nset terms [java::new String $en]\n}\nset termsObj [java::call JSONUtils \"convertJSONString\" $terms]\nset response_list [create_response $termsObj]\nreturn $response_list", "type" : "SCRIPT", "parameters" : [ { "name" : "language", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v3/terms/list", "request_params" : [ "language" ] } }
,{ "_id" : { "$oid" : "58c24fa628271909285d2102" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_setCompatibilityLevel", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package java.util Date\njava::import -package com.ilimi.graph.dac.model Node\nproc proc_searchNodes {startPosition resultSize} {\nset object_type \"Content\"\nset graph_id \"domain\"\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $object_type\n$map put \"startPosition\" [java::new Integer $startPosition]\n$map put \"resultSize\" [java::new Integer $resultSize]\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nset params [java::prop $search_response \"params\"]\nif {[java::isnull $params] == 0} {\nset msg [java::prop $params \"errmsg\"]\n}\nset graph_nodes [java::null]\nreturn $graph_nodes\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nreturn $graph_nodes\n}\n}\nset graph_id \"domain\"\nset count 1\nset startPosistion 0\nset resultSize 5000\nwhile {$count > 0} {\nset nodeList [proc_searchNodes $startPosistion $resultSize]\nset hasValue [java::isnull $nodeList]\nif {$hasValue == 1} {\nset count 0\nbreak\n} else {\nset size [$nodeList size]\nif {$size > 0} {\njava::for {Node graph_node} $nodeList {\nset content_id [java::prop $graph_node \"identifier\"]\nset metadata [java::prop $graph_node \"metadata\"]\nset compatibilityLevel [$metadata get \"compatibilityLevel\"]\nset compatibilityLevel_null [java::isnull $compatibilityLevel]\nif {$compatibilityLevel_null == 1} {\n$metadata put \"compatibilityLevel\" [java::new Integer 1]\nset update_response [updateDataNode $graph_id $content_id $graph_node]\nset check_error [check_response_error $update_response]\nif {$check_error} {\nset messages [get_resp_value $update_response \"messages\"]\njava::for {String msg} $messages {\nputs \"$content_id - $msg\"\n}\n}\n}\n}\n} else {\nset count 0\nbreak\n}\n}\nset startPosistion [expr {$startPosistion+5000}]\n}\nreturn \"Updation Complete\"", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_setCompatibilityLevel" } }
,{ "_id" : { "$oid" : "58d4e10f2827192876dec52a" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "content_qe_updateSubject", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package java.util Date\njava::import -package com.ilimi.graph.dac.model Node\nproc proc_isNotNull {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 0} {\nset exist true\n}\n} catch {Exception err} {\nset exist false\n}\nreturn $exist\n}\nproc proc_getFirstElement {input_list} {\nputs \"getting first element\"\nset listNotNull [proc_isNotNull $input_list]\nif {$listNotNull} {\nset arr_instance [java::instanceof $input_list {String[]}]\nif {$arr_instance == 1} {\nset array [java::cast {String[]} $input_list]\nset listSize [$array length]\nif {$listSize > 0} {\nset word [$array get 0]\nreturn $word\n} else {\nreturn [java::null]\n}\n} else {\nreturn [$input_list toString]\n}\n} else {\nreturn [java::null]\n}\n}\nproc proc_searchNodes {startPosition resultSize} {\nset object_type \"Content\"\nset graph_id \"domain\"\nset map [java::new HashMap]\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"objectType\" $object_type\nset statusList [java::new ArrayList]\n$statusList add \"Live\"\n$map put \"status\" $statusList\nset contentTypes [java::new ArrayList]\n$contentTypes add \"Story\"\n$contentTypes add \"Worksheet\"\n$contentTypes add \"Collection\"\n$contentTypes add \"Game\"\n$contentTypes add \"TextBook\"\n$map put \"contentType\" $contentTypes\n$map put \"startPosition\" [java::new Integer $startPosition]\n$map put \"resultSize\" [java::new Integer $resultSize]\nset search_criteria [create_search_criteria $map]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nset params [java::prop $search_response \"params\"]\nif {[java::isnull $params] == 0} {\nset msg [java::prop $params \"errmsg\"]\n}\nset graph_nodes [java::null]\nreturn $graph_nodes\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nreturn $graph_nodes\n}\n}\nset graph_id \"domain\"\nset count 1\nset startPosistion 0\nset resultSize 5000\nwhile {$count > 0} {\nset nodeList [proc_searchNodes $startPosistion $resultSize]\nset hasValue [java::isnull $nodeList]\nif {$hasValue == 1} {\nset count 0\nbreak\n} else {\nputs \"fetched content list 12\"\nset size [$nodeList size]\nif {$size > 0} {\njava::for {Node graph_node} $nodeList {\nputs \"updating content\"\nset content_id [java::prop $graph_node \"identifier\"]\nset metadata [java::prop $graph_node \"metadata\"]\nset subject [$metadata get \"subject\"]\nset subjectVal_null [java::isnull $subject]\nset domain [$metadata get \"domain\"]\nset domainVal_null [java::isnull $domain]\nputs \"checking domain and subject values\"\nif {$subjectVal_null == 1 && $domainVal_null == 0} {\nset domainVal [proc_getFirstElement $domain]\nputs \"first domain value is $domainVal\"\nif {$domainVal == \"numeracy\"} {\nputs \"setting subject to maths\"\n$metadata put \"subject\" \"MATHS\"\n} else {\nputs \"setting literacy subject\"\nset language [$metadata get \"language\"]\nset languageVal [proc_getFirstElement $language]\nputs \"first language value is $languageVal\"\n$metadata put \"subject\" $languageVal\n}\nset update_response [updateDataNode $graph_id $content_id $graph_node]\nset check_error [check_response_error $update_response]\nif {$check_error} {\nset messages [get_resp_value $update_response \"messages\"]\njava::for {String msg} $messages {\nputs \"$content_id - $msg\"\n}\n}\n}\n}\n} else {\nset count 0\nbreak\n}\n}\nset startPosistion [expr {$startPosistion+5000}]\n}\nreturn \"Updation Complete\"", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/content_qe_updateSubject" } }
,{ "_id" : { "$oid" : "58d4fc50e8e24852a2308929" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateSynsetRelations", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc isNotEmpty {list} {\nset exist false\nset isEmpty [java::isnull $list]\nif {$isEmpty == 0} {\nset listSize [$list size]\nif {$listSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getSynset { language_id startPosition resultSize } {\nset object_type \"Synset\"\nset map [java::new HashMap]\n$map put \"objectType\" $object_type\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"startPosition\" [java::new Integer $startPosition]\n$map put \"resultSize\" [java::new Integer $resultSize]\nset search_criteria [create_search_criteria $map]\nset synsets [java::new ArrayList]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset synsets [java::cast List $graph_nodes]\n}\nreturn $synsets\n}\nproc createSynsetNode { language_id gloss } {\nset synsetMetaData [java::new HashMap]\n$synsetMetaData put \"gloss\" $gloss\nset response [createSynset $language_id $synsetMetaData]\nreturn $response\n}\nproc correctSynset {language_id synset } {\n# get inRelations of given word\nset synsetIdentifier [java::prop $synset \"identifier\"]\nset outRelations [java::prop $synset \"outRelations\"]\nset hasRelations [isNotEmpty $outRelations]\nif {$hasRelations} {\njava::for {Relation relation} $outRelations {\nset relationType [java::prop $relation \"relationType\"]\nset endNodeId [java::prop $relation \"endNodeId\"]\nset endNodeName [java::prop $relation \"endNodeName\"]\nif {($relationType != \"synonym\") && ($endNodeName == \"Word\") } {\nset resp_get_node [getDataNode $language_id $endNodeId]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset node_metadata [java::prop $graph_node \"metadata\"]\nset node_identifier [java::prop $graph_node \"identifier\"]\nset nodePrimaryMeaningId [$node_metadata get \"primaryMeaningId\"]\nset primaryMeaningIdNull [java::isnull $nodePrimaryMeaningId]\nif {$primaryMeaningIdNull == 1} {\nset nodeLemma [$node_metadata get \"lemma\"]\nset synsetResponse [createSynsetNode $language_id $nodeLemma]\nset check_error [check_response_error $synsetResponse]\nif {$check_error} {\nreturn $synsetResponse\n}\nset nodePrimaryMeaningId [get_resp_value $synsetResponse \"node_id\"]\nset nodePrimaryMeaningId [$nodePrimaryMeaningId toString]\n$node_metadata put \"primaryMeaningId\" $nodePrimaryMeaningId\nset wordResponse [updateDataNode $language_id $node_identifier $graph_node]\nset check_error [check_response_error $wordResponse]\nif {$check_error} {\nreturn $wordResponse\n}\nset addRelation_response [addRelation $language_id $nodePrimaryMeaningId \"synonym\" $node_identifier]\nset check_addRelation_error [check_response_error $addRelation_response]\nif {$check_addRelation_error} {\nreturn $addRelation_response;\n}\n}\nset deleteRelation_response [deleteRelation $language_id $synsetIdentifier $relationType $node_identifier]\nset check_deleteRelation_error [check_response_error $deleteRelation_response]\nif {$check_deleteRelation_error} {\nreturn $deleteRelation_response;\n}\nset addRelation_response [addRelation $language_id $synsetIdentifier $relationType $nodePrimaryMeaningId]\nset check_addRelation_error [check_response_error $addRelation_response]\nif {$check_addRelation_error} {\nreturn $addRelation_response;\n}\n}\n}\n}\n}\nreturn [java::null]\n}\nset startPosition 0\nset resultSize 1000\nset continue true\nwhile {$continue} {\nset synsets [getSynset $language_id $startPosition $resultSize]\nputs \"synsets size : [$synsets size], startPosition $startPosition ,resultSize $resultSize\"\nset hasSynsets [isNotEmpty $synsets]\nif {$hasSynsets} {\njava::for {Node synset} $synsets {\nset id [java::prop $synset \"identifier\"]\nset correctSynsetResponse [correctSynset $language_id $synset]\nset correctSynsetResponseNull [java::isnull $correctSynsetResponse]\nif {$correctSynsetResponseNull == 0} {\nset errorMsgMap [java::prop $correctSynsetResponse \"result\"]\nputs \"updateSynsetRelations exception while correcting Synset -$id , error [$errorMsgMap toString]\"\nreturn $correctSynsetResponse\n}\n}\n} else {\nset continue false\n}\nset startPosition [expr $startPosition + $resultSize]\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "POST", "url" : "/v2/language/tools/*/updateSynsetRelations", "path_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "58e37844e8e24852a230892a" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "enrichWords", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "node_ids", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false } ], "actor_path" : { "manager" : "ENRICH_ACTOR", "operation" : "enrichWords", "router" : "LANGUAGE_REQUEST_ROUTER" }, "request_path" : { "type" : "POST", "url" : "/v1/language/*/enrichWords/", "path_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "58e64800e8e24852a230892b" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateTextBookAndVerbWords", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nset object_type \"Word\"\nproc getDefinitionFromCache {defMap language_id object_type} {\nset definition [$defMap get $language_id]\nset definitionNull [java::isnull $definition]\nif {$definitionNull == 1} {\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$defMap put $language_id $def_node\nset definition $def_node\n}\nreturn $definition\n}\nproc getWordsByProp {exist} {\nset filters [java::new HashMap]\n$filters put \"objectType\" \"Word\"\nset status [java::new ArrayList]\n$status add \"Draft\"\n$filters put \"status\" $status\nset limit [java::new Integer 10000]\n#set exists [java::new ArrayList]\n#$exists add $exist\nset exists $exist\n#$exists add \"thresholdLevel\"\n#$exists add \"grade\"\nset searchCriteria [java::new HashMap]\n$searchCriteria put \"filters\" $filters\n$searchCriteria put \"exists\" $exist\n$searchCriteria put \"limit\" $limit\nset searchResponse [compositeSearch $searchCriteria]\nset searchResultsMap [$searchResponse getResult]\nset wordsList [java::cast List [$searchResultsMap get \"results\"]]\nreturn $wordsList\n}\nproc makeAliveWordsHaving { existProperty } {\nset object_type \"Word\"\nset wordsList [getWordsByProp $existProperty]\nset wordsListNull [java::isnull $wordsList]\nif {$wordsListNull == 0 && [$wordsList size] >= 0} {\nset defMap [java::new HashMap]\njava::for {Object wordObj} $wordsList {\nset wordObject [java::cast Map $wordObj]\nset identifier [$wordObject get \"identifier\"]\nset language_id [$wordObject get \"graph_id\"]\nset word [java::new HashMap]\n$word put \"identifier\" $identifier\n$word put \"objectType\" $object_type\n$word put \"status\" \"Live\"\nputs \"word update identifier [$identifier toString]\"\nset def_node [getDefinitionFromCache $defMap $language_id $object_type]\nset word_obj [convert_to_graph_node $word $def_node]\nset update_response [updateDataNode $language_id $identifier $word_obj]\nset check_error [check_response_error $update_response]\nif {$check_error} {\nreturn $update_response;\n}\n}\nputs \"wordsList Done\"\n}\nreturn [java::null]\n}\nset exists [java::new ArrayList]\n$exists add \"synonyms\"\n$exists add \"exampleSentences\"\n$exists add \"pos\"\n$exists add \"pictures\"\nputs \"exists [$exists toString] \"\nset result [makeAliveWordsHaving $exists]\nset resultNull [java::isnull $result]\nif {$resultNull == 0} {\n#return error response\nreturn $result\n}\nset exists [java::new ArrayList]\n$exists add \"synonyms\"\n$exists add \"exampleSentences\"\n$exists add \"pos\"\n$exists add \"pronunciations\"\nputs \"exists [$exists toString] \"\nset result [makeAliveWordsHaving $exists]\nset resultNull [java::isnull $result]\nif {$resultNull == 0} {\n#return error response\nreturn $result\n}\nset result_map [java::new HashMap]\n$result_map put \"status\" \"OK\"\nset response_list [create_response $result_map]\nreturn $response_list", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v2/language/tools/updateWords/" } }
,{ "_id" : { "$oid" : "58ea6c28e8e24810e86e09c0" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "enrichAllWords", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc isNotEmpty {list} {\nset exist false\nset isEmpty [java::isnull $list]\nif {$isEmpty == 0} {\nset listSize [$list size]\nif {$listSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getWords { language_id startPosition resultSize } {\nset object_type \"Word\"\nset map [java::new HashMap]\n$map put \"objectType\" $object_type\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"startPosition\" [java::new Integer $startPosition]\n$map put \"resultSize\" [java::new Integer $resultSize]\nset search_criteria [create_search_criteria $map]\nset synsets [java::new ArrayList]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset synsets [java::cast List $graph_nodes]\n}\nreturn $synsets\n}\nset startPosition 0\nset resultSize 1000\nset continue true\nset isBatchEmpty [java::isnull $batchSize]\nif {$isBatchEmpty == 0} {\nset batchSize [java::cast Integer $batchSize]\nset resultSize [$batchSize intValue]\nputs \"enrich All words  - batchSize $resultSize\"\n}\nwhile {$continue} {\nset words [getWords $language_id $startPosition $resultSize]\nset hasWords [isNotEmpty $words]\nset wordIds [java::new ArrayList]\nif {$hasWords} {\njava::for {Node word} $words {\nset wordIdentifier [java::prop $word \"identifier\"]\n$wordIds add $wordIdentifier\n}\nset enrichWordResponse [enrichWords $language_id $wordIds]\n} else {\nset continue false\n}\nset startPosition [expr $startPosition + $resultSize]\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "batchSize", "datatype" : "java.lang.Integer", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/language/tools/*/enrichAllWords", "path_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "58ecd604e8e24810e86e09c1" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateWordsStatusToDraft", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nset object_type \"Word\"\nproc getDefinitionFromCache {defMap language_id object_type} {\nset definition [$defMap get $language_id]\nset definitionNull [java::isnull $definition]\nif {$definitionNull == 1} {\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$defMap put $language_id $def_node\nset definition $def_node\n}\nreturn $definition\n}\nproc getWordsByProp {not_exists} {\nset filters [java::new HashMap]\n$filters put \"objectType\" \"Word\"\nset status [java::new ArrayList]\n$status add \"Live\"\n$filters put \"status\" $status\nset limit [java::new Integer 10000]\n#set exists [java::new ArrayList]\n#$exists add $exist\nset not_exists $not_exists\n#$exists add \"thresholdLevel\"\n#$exists add \"grade\"\nset searchCriteria [java::new HashMap]\n$searchCriteria put \"filters\" $filters\n$searchCriteria put \"not_exists\" $not_exists\n$searchCriteria put \"limit\" $limit\nputs \"searchCriteria  [$searchCriteria toString]\"\nset searchResponse [compositeSearch $searchCriteria]\nset searchResultsMap [$searchResponse getResult]\nset wordsList [java::cast List [$searchResultsMap get \"results\"]]\nreturn $wordsList\n}\nproc makeWordsToDraftHaving { not_existsProperty } {\nset object_type \"Word\"\nset wordsList [getWordsByProp $not_existsProperty]\nset wordsListNull [java::isnull $wordsList]\nif {$wordsListNull == 0 && [$wordsList size] >= 0} {\nputs \"wordsList size [$wordsList size]\"\n#puts \"wordsList [$wordsList toString]\"\nset defMap [java::new HashMap]\njava::for {Object wordObj} $wordsList {\nset wordObject [java::cast Map $wordObj]\nset identifier [$wordObject get \"identifier\"]\nset language_id [$wordObject get \"graph_id\"]\nset word [java::new HashMap]\n$word put \"identifier\" $identifier\n$word put \"objectType\" $object_type\n$word put \"status\" \"Draft\"\nputs \"word update identifier [$identifier toString]\"\nset def_node [getDefinitionFromCache $defMap $language_id $object_type]\nset word_obj [convert_to_graph_node $word $def_node]\nset update_response [updateDataNode $language_id $identifier $word_obj]\nset check_error [check_response_error $update_response]\nif {$check_error} {\nreturn $update_response;\n}\n}\nputs \"wordsList Done\"\n}\nreturn [java::null]\n}\nset not_exists [java::new ArrayList]\n$not_exists add \"synonyms\"\n$not_exists add \"exampleSentences\"\n$not_exists add \"pos\"\n$not_exists add \"pictures\"\n$not_exists add \"pronunciations\"\nputs \"exists [$not_exists toString] \"\nset result [makeWordsToDraftHaving $not_exists]\nset resultNull [java::isnull $result]\nif {$resultNull == 0} {\n#return error response\nreturn $result\n}\nset result_map [java::new HashMap]\n$result_map put \"status\" \"OK\"\nset response_list [create_response $result_map]\nreturn $response_list", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v2/language/tools/updateWordsStatusToDraft/" } }
,{ "_id" : { "$oid" : "58f862aa2827194096405975" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "initSearchActor", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package org.ekstep.search.router SearchRequestRouterPool\njava::import -package com.ilimi.common.router RequestRouterPool\nset baseActorSystem [java::call RequestRouterPool getActorSystem]\nset searchActorSystem [java::call SearchRequestRouterPool init $baseActorSystem]\nset result_map [java::new HashMap]\n$result_map put \"status\" \"OK\"\nset response_list [create_response $result_map]\nreturn $response_list", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/initSearchActor" } }
,{ "_id" : { "$oid" : "58f862f32827194096405976" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "contentSearchV3", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\nset request [java::new HashMap]\nset new_filter [java::new HashMap]\nset isFiltersNull [java::isnull $filters]\nif {$isFiltersNull == 1} {\nset filters $new_filter\n}\n$filters put \"objectType\" \"Content\"\n$request put \"query\" $query\n$request put \"filters\" $filters\n$request put \"exists\" $exists\n$request put \"not_exists\" $not_exists\n$request put \"sort_by\" $sort_by\n$request put \"facets\" $facets\n$request put \"limit\" $limit\n$request put \"offset\" $offset\n$request put \"fields\" $fields\nset compositeSearchResp [compositeSearchWrapper $request]\nset check_error [check_response_error $compositeSearchResp]\nif {$check_error} {\nreturn $compositeSearchResp;\n}\nset resultMap [java::prop $compositeSearchResp \"result\"]\nset contentResult [$resultMap get \"results\"]\n$resultMap put \"content\" $contentResult\n$resultMap remove \"results\"\nreturn $compositeSearchResp", "type" : "SCRIPT", "parameters" : [ { "name" : "query", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false }, { "name" : "filters", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false }, { "name" : "exists", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false }, { "name" : "not_exists", "datatype" : "java.util.ArrayList", "index" : 3, "routing_param" : false }, { "name" : "sort_by", "datatype" : "java.util.HashMap", "index" : 4, "routing_param" : false }, { "name" : "facets", "datatype" : "java.util.ArrayList", "index" : 5, "routing_param" : false }, { "name" : "limit", "datatype" : "java.lang.Integer", "index" : 6, "routing_param" : false }, { "name" : "offset", "datatype" : "java.lang.Integer", "index" : 7, "routing_param" : false }, { "name" : "fields", "datatype" : "java.util.ArrayList", "index" : 8, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/content/adv/search" } }
,{ "_id" : { "$oid" : "58f863022827194096405977" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "compositeSearchIndex", "type" : "COMMAND", "parameters" : [ { "name" : "query", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false }, { "name" : "filters", "datatype" : "java.util.HashMap", "index" : 1, "routing_param" : false }, { "name" : "exists", "datatype" : "java.util.ArrayList", "index" : 2, "routing_param" : false }, { "name" : "not_exists", "datatype" : "java.util.ArrayList", "index" : 3, "routing_param" : false }, { "name" : "sort_by", "datatype" : "java.util.HashMap", "index" : 4, "routing_param" : false }, { "name" : "facets", "datatype" : "java.util.ArrayList", "index" : 5, "routing_param" : false }, { "name" : "fuzzy", "datatype" : "java.lang.Boolean", "index" : 6, "routing_param" : false }, { "name" : "fields", "datatype" : "java.util.ArrayList", "index" : 7, "routing_param" : false }, { "name" : "limit", "datatype" : "java.lang.Integer", "index" : 8, "routing_param" : false }, { "name" : "offset", "datatype" : "java.lang.Integer", "index" : 9, "routing_param" : false } ], "actor_path" : { "manager" : "SEARCH_MANAGER", "operation" : "INDEX_SEARCH", "router" : "SEARCH_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "58f8630c2827194096405978" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "compositeSearchWrapper", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\nset null_var [java::null]\nset empty_list [java::new ArrayList]\nset empty_map [java::new HashMap]\nset query [$request get \"query\"]\nset queryNull [java::isnull $query]\nif {$queryNull == 1} {\nset query $null_var\n}\nset filters [$request get \"filters\"]\nset filtersNull [java::isnull $filters]\nif {$filtersNull == 1} {\nset filters $empty_map\n}\nset exists [$request get \"exists\"]\nset existsNull [java::isnull $exists]\nif {$existsNull == 1} {\nset exists $empty_list\n}\nset not_exists [$request get \"not_exists\"]\nset not_existsNull [java::isnull $not_exists]\nif {$not_existsNull == 1} {\nset not_exists $empty_list\n}\nset sort_by [$request get \"sort_by\"]\nset sort_byNull [java::isnull $sort_by]\nif {$sort_byNull == 1} {\nset sort_by $empty_map\n}\nset facets [$request get \"facets\"]\nset facetsNull [java::isnull $facets]\nif {$facetsNull == 1} {\nset facets $empty_list\n}\nset fuzzy [$request get \"fuzzy\"]\nset fuzzyNull [java::isnull $fuzzy]\nif {$fuzzyNull == 1} {\nset fuzzy $null_var\n}\nset fields [$request get \"fields\"]\nset fieldsNull [java::isnull $fields]\nif {$fieldsNull == 1} {\nset fields $null_var\n}\nset limit [$request get \"limit\"]\nset limitNull [java::isnull $limit]\nif {$limitNull == 1} {\nset limit [java::new Integer 10000]\n}\nset offset [$request get \"offset\"]\nset offsetNull [java::isnull $offset]\nif {$offsetNull == 1} {\nset offset $null_var\n}\nset searchResponse [compositeSearchIndex $query $filters $exists $not_exists $sort_by $facets $fuzzy $fields $limit $offset]\nreturn $searchResponse", "type" : "SCRIPT", "parameters" : [ { "name" : "request", "datatype" : "java.util.HashMap", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/compositeSearchIndex" } }
,{ "_id" : { "$oid" : "58f89bc52827194096d298aa" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "lang_qe_migrateGendersValue", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\njava::import -package java.util Arrays\nset object_type \"Word\"\nproc isNotEmpty {list} {\nset exist false\nset isListNull [java::isnull $list]\nif {$isListNull == 0} {\nset listSize [$list size]\nif {$listSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getDefinitionFromCache {defMap language_id object_type} {\nset definition [$defMap get $language_id]\nset definitionNull [java::isnull $definition]\nif {$definitionNull == 1} {\nset resp_def_node [getDefinition $language_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\n$defMap put $language_id $def_node\nset definition $def_node\n}\nreturn $definition\n}\nproc migrateGendersValue {word_metadata} {\nset genders [$word_metadata get \"genders\"]\nset isGendersNull [java::isnull $genders]\nif {$isGendersNull == 0} {\nset arr_instance [java::instanceof $genders {String[]}]\nif {$arr_instance == 1} {\nset genders [java::cast {String[]} $genders]\nset genders [java::call Arrays asList $genders]\n} else {\nset genders [java::cast ArrayList $genders]\n}\nif {[isNotEmpty $genders]} {\nset new_genders [java::new ArrayList]\njava::for {String gender} $genders {\nif {$gender == \"f\"} {\n$new_genders add \"female\"\n} elseif {$gender == \"m\"} {\n$new_genders add \"male\"\n} elseif {$gender == \"n\"} {\n$new_genders add \"neutral\"\n} else {\n$new_genders add $gender\n}\n}\n#puts \"new_genders [$new_genders toString] gender [$genders toString]\"\n$word_metadata put \"genders\" $new_genders\nreturn true\n}\n}\nreturn false\n}\nproc getWords {} {\nset filters [java::new HashMap]\n$filters put \"objectType\" \"Word\"\nset status [java::new ArrayList]\n$filters put \"status\" $status\nset limit [java::new Integer 10000]\nset exists [java::new ArrayList]\n$exists add \"genders\"\nset searchCriteria [java::new HashMap]\n$searchCriteria put \"filters\" $filters\n$searchCriteria put \"exists\" $exists\n$searchCriteria put \"limit\" $limit\n#puts \"searchCriteria  [$searchCriteria toString]\"\nset searchResponse [compositeSearch $searchCriteria]\nset searchResultsMap [$searchResponse getResult]\nset wordsList [java::cast List [$searchResultsMap get \"results\"]]\nreturn $wordsList\n}\nproc correctWordHavingGender {} {\nset object_type \"Word\"\nset wordsList [getWords]\nset wordsListNull [java::isnull $wordsList]\nset defMap [java::new HashMap]\nif {$wordsListNull == 0 && [$wordsList size] >= 0} {\n#puts \"wordsList size [$wordsList size]\"\njava::for {Object wordObj} $wordsList {\nset wordObject [java::cast Map $wordObj]\nset identifier [$wordObject get \"identifier\"]\nset language_id [$wordObject get \"graph_id\"]\nset nodeRespone [getDataNode $language_id $identifier]\nset check_error [check_response_error $nodeRespone]\nif {$check_error} {\nreturn $nodeRespone\n} else {\nset wordResponse [get_resp_value $nodeRespone \"node\"]\nset wordNode [java::cast Node $wordResponse]\nset metadata [java::prop $wordNode \"metadata\"]\nset isChanged [migrateGendersValue $metadata]\nif {$isChanged} {\nset word [java::new HashMap]\n$word put \"identifier\" $identifier\n$word put \"objectType\" $object_type\n$word put \"genders\" [$metadata get \"genders\"]\nset def_node [getDefinitionFromCache $defMap $language_id $object_type]\nset word_obj [convert_to_graph_node $word $def_node]\nset update_response [updateDataNode $language_id $identifier $word_obj]\nset check_error [check_response_error $update_response]\nif {$check_error} {\nreturn $update_response;\n}\nputs \"word identifier $identifier language_id=$language_id migrated\"\n}\n}\n}\n#puts \"wordsList Done\"\n}\nreturn [java::null]\n}\nset result [correctWordHavingGender]\nset resultNull [java::isnull $result]\nif {$resultNull == 0} {\n#return error response\nset resultMap [java::prop $result \"result\"]\n#puts \" error message [$resultMap toString]\"\nreturn $result\n}\nset result_map [java::new HashMap]\n$result_map put \"status\" \"OK\"\nset response_list [create_response $result_map]\nreturn $response_list", "type" : "SCRIPT", "parameters" : [], "request_path" : { "type" : "POST", "url" : "/v1/exec/lang_qe_migrateGendersValue" } }
,{ "_id" : { "$oid" : "5927dd6be8e24871d41ff5e2" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "cleanupDuplicateWords", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc isNotEmpty {graph_nodes} {\nset exist false\nset hasRelations [java::isnull $graph_nodes]\nif {$hasRelations == 0} {\nset relationsSize [$graph_nodes size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getUntrimmedWords { position graph_id } {\nset filters [java::new HashMap]\n$filters put \"objectType\" \"Word\"\n$filters put \"graph_id\" $graph_id\nset status [java::new ArrayList]\n#$status add \"Draft\"\n$filters put \"status\" $status\nset lemma [java::new HashMap]\n#$lemma put \"endsWith\" \" \"\n$lemma put $position [java::new String \" \"]\n$filters put \"lemma\" $lemma\nset limit [java::new Integer 10000]\nset searchCriteria [java::new HashMap]\n$searchCriteria put \"filters\" $filters\n$searchCriteria put \"limit\" $limit\n#puts \"cleanupDuplicateWords | searchCriteria  [$searchCriteria toString]\"\nset searchResponse [compositeSearch $searchCriteria]\nset searchResultsMap [$searchResponse getResult]\n#puts \"cleanupDuplicateWords | searchResultsMap size [$searchResultsMap size]\"\nset wordsList [java::cast List [$searchResultsMap get \"results\"]]\nset wordsListNull [java::isnull $wordsList]\nset result [java::new HashMap]\nif {$wordsListNull == 0 && [$wordsList size] >= 0} {\n#puts \"cleanupDuplicateWords | wordsList size [$wordsList size]\"\njava::for {Object wordObj} $wordsList {\nset wordObject [java::cast Map $wordObj]\nset lemma [$wordObject get \"lemma\"]\nset trimmedLemma [java::cast String $lemma]\nset trimmedLemma [$trimmedLemma trim]\n$result put $trimmedLemma $wordObject\n}\n}\nreturn $result\n}\nproc getWordsByLemmas { lemmas graph_id } {\nset filters [java::new HashMap]\n$filters put \"objectType\" \"Word\"\n$filters put \"graph_id\" $graph_id\nset status [java::new ArrayList]\n$filters put \"status\" $status\n$filters put \"lemma\" $lemmas\nset limit [java::new Integer 10000]\n#puts \"cleanupDuplicateWords | lemmas size [$lemmas size]\"\nset searchCriteria [java::new HashMap]\n$searchCriteria put \"filters\" $filters\n$searchCriteria put \"limit\" $limit\n#puts \"cleanupDuplicateWords | getWordsByLemmas-searchCriteria  [$searchCriteria toString]\"\nset searchResponse [compositeSearch $searchCriteria]\nset searchResultsMap [$searchResponse getResult]\nset wordsList [java::cast List [$searchResultsMap get \"results\"]]\nset wordsListNull [java::isnull $wordsList]\n#puts \"cleanupDuplicateWords | wordsListNull $wordsListNull\"\nset result [java::new HashMap]\nif {$wordsListNull == 0 && [$wordsList size] >= 0} {\n#puts \"cleanupDuplicateWords | wordsList [$wordsList size]\"\njava::for {Object wordObj} $wordsList {\nset wordObject [java::cast Map $wordObj]\nset identifier [$wordObject get \"identifier\"]\nset graph_id [$wordObject get \"graph_id\"]\nset lemma [$wordObject get \"lemma\"]\nset ids [$result get $graph_id]\nset idsNull [java::isnull $ids]\nif {$idsNull==1} {\nset ids [java::new ArrayList]\n}\nset ids [java::cast List $ids]\n$ids add $identifier\n$result put $graph_id $ids\n$lemmas remove $lemma\n}\n}\n#puts \"cleanupDuplicateWords | getWordsByLemmas done\"\nreturn $result\n}\nproc merge {graph_id wordNode dupWordNode} {\nset wordMetadata [java::prop $wordNode \"metadata\"]\nset dupWordMetadata [java::prop $dupWordNode \"metadata\"]\nset word_id [java::prop $wordNode \"identifier\"]\nset metadataUpdated false\njava::for {Map.Entry entry} [$dupWordMetadata entrySet] {\nset key [[$entry getKey] toString]\nset value [java::cast Object [$entry getValue]]\nset actualWordHasValue [java::isnull [$wordMetadata get $key]]\nif {$actualWordHasValue ==1} {\n$wordMetadata put $key $value\nset metadataUpdated true\n}\n}\nif {$metadataUpdated} {\nset node_update [java::new Node $word_id \"DATA_NODE\" \"Word\"]\n$node_update setMetadata $wordMetadata\n#puts \"cleanupDuplicateWords | update node metadata = [[$node_update getMetadata] toString]\"\nset update_response [updateDataNode $graph_id $word_id $node_update]\nset check_update_error [check_response_error $update_response]\nif {$check_update_error} {\nreturn $update_response;\n}\n}\nset dupWordInRelations [java::prop $dupWordNode \"inRelations\"]\nset hasRelations [isNotEmpty $dupWordInRelations]\nif {$hasRelations} {\njava::for {Relation relation} $dupWordInRelations {\nset relationType [java::prop $relation \"relationType\"]\nset startNodeMetadata [java::prop $relation \"startNodeMetadata\"]\nset startNodeFuncObjectType [$startNodeMetadata get \"IL_FUNC_OBJECT_TYPE\"]\nif {($relationType == \"hasMember\") && ([$startNodeFuncObjectType toString] == \"WordSet\")} {\n#Do Nothing\n} else {\nset startNodeId [java::prop $relation \"startNodeId\"]\nset addRelation_response [addRelation $graph_id $startNodeId $relationType $word_id]\nset check_addRelation_error [check_response_error $addRelation_response]\nif {$check_addRelation_error} {\nreturn $addRelation_response;\n}\n}\n}\n}\nset dupWordOutRelations [java::prop $dupWordNode \"outRelations\"]\nset hasRelations [isNotEmpty $dupWordOutRelations]\nif {$hasRelations} {\njava::for {Relation relation} $dupWordOutRelations {\nset relationType [java::prop $relation \"relationType\"]\nset endNodeId [java::prop $relation \"endNodeId\"]\nset addRelation_response [addRelation $graph_id $word_id $relationType $endNodeId]\nset check_addRelation_error [check_response_error $addRelation_response]\nif {$check_addRelation_error} {\nreturn $addRelation_response;\n}\n}\n}\nreturn [java::null]\n}\nproc cleanUp {actualWords duplicateWords} {\njava::for {Map.Entry e} [$actualWords entrySet] {\nset graph_id [[$e getKey] toString]\nset wordIds [java::cast ArrayList [$e getValue]]\n#puts \"cleanupDuplicateWords | graph_id $graph_id wordIds size [$wordIds size]\"\n#puts \"cleanupDuplicateWords | wordIds [$wordIds toString]\"\nset wordsResp [getDataNodes $graph_id $wordIds]\nset words [get_resp_value $wordsResp \"node_list\"]\nset nodesExists [isNotEmpty $words]\nif {$nodesExists} {\n#puts \"cleanupDuplicateWords | words size [$words size]\"\njava::for {Node word} $words {\nset metadata [java::prop $word \"metadata\"]\nset lemma [$metadata get \"lemma\"]\nset duplicateWord [$duplicateWords get $lemma]\nset duplicateWord [java::cast Map $duplicateWord]\nset duplicateWordID [$duplicateWord get \"identifier\"]\nset dupWordRespone [getDataNode $graph_id [$duplicateWordID toString]]\nset check_error [check_response_error $dupWordRespone]\nif {$check_error} {\nreturn $dupWordRespone\n} else {\nset duplicateWordNode [get_resp_value $dupWordRespone \"node\"]\nset merge_resp [merge $graph_id $word $duplicateWordNode]\nif {[java::isnull $merge_resp]==0} {\nreturn $merge_resp\n}\nset delete_response [deleteDataNode $graph_id $duplicateWordID]\nset check_delete_error [check_response_error $delete_response]\nif {$check_delete_error} {\nreturn $delete_response;\n}\n}\n}\n}\n}\nreturn [java::null]\n}\nproc trim {wordsNotFound duplicateWords} {\njava::for {String word} $wordsNotFound {\nset duplicateWord [$duplicateWords get $word]\nset duplicateWord [java::cast Map $duplicateWord]\nset duplicateWordID [$duplicateWord get \"identifier\"]\nset duplicateWordID [$duplicateWordID toString]\nset duplicateWordlemma [$duplicateWord get \"lemma\"]\nset duplicateWordlemma [$duplicateWordlemma toString]\nset graph_id [$duplicateWord get \"graph_id\"]\nset graph_id [$graph_id toString]\nset node_update [java::new Node $duplicateWordID \"DATA_NODE\" \"Word\"]\nset wordMetadata [java::new HashMap]\n$wordMetadata put \"lemma\" $word\n$node_update setMetadata $wordMetadata\n#puts \"cleanupDuplicateWords | update $duplicateWordID, $duplicateWordlemma node metadata = [$wordMetadata toString]\"\nset update_response [updateDataNode $graph_id $duplicateWordID $node_update]\nset check_update_error [check_response_error $update_response]\nif {$check_update_error} {\nreturn $update_response;\n}\n}\nreturn [java::null]\n}\n#cleaning up leading space\nset leadingSpaceWords [getUntrimmedWords \"startsWith\" $graph_id]\n#puts \"cleanupDuplicateWords | leadingSpaceWords [$leadingSpaceWords size]\"\nset leadingSpaceWordLemmaSet [$leadingSpaceWords keySet]\nset leadingSpaceWordLemmaList [java::new ArrayList $leadingSpaceWordLemmaSet]\nset leadingSpaceWordsSize [$leadingSpaceWordLemmaList size]\n#puts \"cleanupDuplicateWords | leadingSpaceWordsSize $leadingSpaceWordsSize\"\nset start 0\nwhile {$leadingSpaceWordsSize>0} {\nif {$leadingSpaceWordsSize > 500} {\nset end [expr {$start + 500}]\n} else {\nset end [expr {$start + $leadingSpaceWordsSize}]\n}\nputs \"cleanupDuplicateWords | start $start end $end\"\nset leadingSpaceWordsSubList [$leadingSpaceWordLemmaList subList $start $end]\nputs \"cleanupDuplicateWords | leadingSpaceWordsSubList size [$leadingSpaceWordsSubList size]\"\nset actualWords [getWordsByLemmas $leadingSpaceWordsSubList $graph_id]\n#puts \"cleanupDuplicateWords | lemmas [$leadingSpaceWordsSubList size] after removal\"\nset trim_resp [trim $leadingSpaceWordsSubList $leadingSpaceWords]\nif {[java::isnull $trim_resp]==0} {\nset errorMsgMap [java::prop $trim_resp \"result\"]\nputs \"cleanupDuplicateWords | exception during startsWith trim, error [$errorMsgMap toString]\"\nreturn $trim_resp\n}\nset clean_resp [cleanUp $actualWords $leadingSpaceWords]\nif {[java::isnull $clean_resp]==0} {\nset errorMsgMap [java::prop $clean_resp \"result\"]\nputs \"cleanupDuplicateWords | exception during startsWith cleanup, error [$errorMsgMap toString]\"\nreturn $clean_resp\n}\nset start [expr {$end + 0}]\nset leadingSpaceWordsSize [expr {$leadingSpaceWordsSize - 500}]\n#puts \"cleanupDuplicateWords | leadingSpaceWordsSize $leadingSpaceWordsSize\"\n}\nputs \"cleanupDuplicateWords | startsWith duplicateWord processed with es limit of 10000\"\n#cleaning up trailing space\nset trailingSpaceWords [getUntrimmedWords \"endsWith\" $graph_id]\n#puts \"cleanupDuplicateWords | trailingSpaceWords [$trailingSpaceWords  size]\"\nset trailingSpaceWordLemmaSet [$trailingSpaceWords keySet]\nset trailingSpaceWordLemmaList [java::new ArrayList $trailingSpaceWordLemmaSet]\nset trailingSpaceWordsSize [$trailingSpaceWordLemmaList size]\n#puts \"cleanupDuplicateWords | trailingSpaceWordsSize $trailingSpaceWordsSize\"\nset start 0\nwhile {$trailingSpaceWordsSize>0} {\nif {$trailingSpaceWordsSize > 500} {\nset end [expr {$start + 500}]\n} else {\nset end [expr {$start + $trailingSpaceWordsSize}]\n}\nputs \"cleanupDuplicateWords | start $start end $end\"\nset trailingSpaceWordsSubList [$trailingSpaceWordLemmaList subList $start $end]\nputs \"cleanupDuplicateWords | trailingSpaceWordsSubList size [$trailingSpaceWordsSubList size]\"\nset actualWords [getWordsByLemmas $trailingSpaceWordsSubList $graph_id]\n#puts \"cleanupDuplicateWords | lemmas [$trailingSpaceWordsSubList size] after removal\"\nset trim_resp [trim $trailingSpaceWordsSubList $trailingSpaceWords]\nif {[java::isnull $trim_resp]==0} {\nset errorMsgMap [java::prop $trim_resp \"result\"]\nputs \"cleanupDuplicateWords | exception during endsWith trim, error [$errorMsgMap toString]\"\nreturn $trim_resp\n}\nset clean_resp [cleanUp $actualWords $trailingSpaceWords]\nif {[java::isnull $clean_resp]==0} {\nset errorMsgMap [java::prop $clean_resp \"result\"]\nputs \"cleanupDuplicateWords | exception during endsWith cleanup, error [$errorMsgMap toString]\"\nreturn $clean_resp\n}\nset start [expr {$end + 0}]\nset trailingSpaceWordsSize [expr {$trailingSpaceWordsSize - 500}]\n#puts \"cleanupDuplicateWords | trailingSpaceWordsSize $trailingSpaceWordsSize\"\n}\nputs \"cleanupDuplicateWords | endsWith duplicateWord processed with es limit of 10000\"\nset result_map [java::new HashMap]\n$result_map put \"status\" \"OK\"\nset response_list [create_response $result_map]\nreturn $response_list", "type" : "SCRIPT", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "POST", "url" : "/v2/language/tools/*/cleanupDuplicateWords/", "path_params" : [ "graph_id" ] } }
,{ "_id" : { "$oid" : "592aa7502827195c841570b8" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "retireSpecialCharacterWords", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\njava::import  -package java.util.regex Pattern Matcher\nproc isNotEmpty {list} {\nset exist false\nset isEmpty [java::isnull $list]\nif {$isEmpty == 0} {\nset listSize [$list size]\nif {$listSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getWords { language_id startPosition resultSize } {\nset object_type \"Word\"\nset map [java::new HashMap]\n$map put \"objectType\" $object_type\n$map put \"nodeType\" \"DATA_NODE\"\n$map put \"startPosition\" [java::new Integer $startPosition]\n$map put \"resultSize\" [java::new Integer $resultSize]\nset search_criteria [create_search_criteria $map]\nset words [java::new ArrayList]\nset search_response [searchNodes $language_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset words [java::cast List $graph_nodes]\n}\nreturn $words\n}\nproc getWord { language_id object_id} {\nset nodeRespone [getDataNode $language_id $object_id]\nset check_error [check_response_error $nodeRespone]\nif {$check_error} {\nreturn [java::new ArrayList]\n} else {\nset wordNode [get_resp_value $nodeRespone \"node\"]\nset words [java::new ArrayList]\n$words add $wordNode\n}\nreturn $words\n}\nproc retireSpecialCharacterWord {language_id word specialCharPattern} {\n# get inRelations of given word\nset wordIdentifier [java::prop $word \"identifier\"]\nset wordMetadata [java::prop $word \"metadata\"]\nset lemma [$wordMetadata get \"lemma\"]\nset lemma [$lemma toString]\nset hasSpecial [$specialCharPattern matcher [java::new String $lemma]]\nset matched [$hasSpecial matches]\nif {$matched} {\n$wordMetadata put \"status\" \"Retired\"\nset update_response [updateDataNode $language_id $wordIdentifier $word]\nset check_error [check_response_error $update_response]\nif {$check_error} {\nreturn $update_response;\n}\nputs \"word $wordIdentifier got Retired\"\n}\nreturn [java::null]\n}\nset startPosition 0\nset resultSize 1000\nset continue true\nset specialChar {.*\\[`~!@#$%^&*()_=+\\\\\\[\\\\\\]\\{\\}|\\\\\\\\;:'\\\",<.>/?-\\].*}\nset specialCharEsc [subst -nocommands -novariables $specialChar ]\nset specialCharPattern [java::call Pattern compile $specialCharEsc]\n#puts \"specialCharPattern [$specialCharPattern toString]\"\nwhile {$continue} {\nset words [getWords $language_id $startPosition $resultSize]\nputs \"Words size : [$words size], startPosition $startPosition ,resultSize $resultSize\"\nset hasWords [isNotEmpty $words]\nif {$hasWords} {\njava::for {Node word} $words {\nset id [java::prop $word \"identifier\"]\nset retireSpecialCharacterWordsResponse [retireSpecialCharacterWord $language_id $word $specialCharPattern]\nset retireSpecialCharacterWordsResponseNull [java::isnull $retireSpecialCharacterWordsResponse]\nif {$retireSpecialCharacterWordsResponseNull == 0} {\nset errorMsgMap [java::prop $retireSpecialCharacterWordsResponse \"result\"]\nputs \"removeSpecialCharactersResponse exception while correcting Word -$id , error [$errorMsgMap toString]\"\nreturn $retireSpecialCharacterWordsResponse\n}\n}\n} else {\nset continue false\n}\nset startPosition [expr $startPosition + $resultSize]\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "POST", "url" : "/v2/language/tools/*/retireSpecialCharacterWords", "path_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "59315fb4e8e24871d41ff5e3" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getTransliterationV3", "api_id" : "ekstep.language.transliterations.read", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\nset transliterate [java::new HashMap]\nputs \"test $languages #lemma\"\njava::for {String language} $languages {\nif {$language == \"en\"} {\ncontinue\n}\nset transliterateResponse [transliterate $language [java::new Boolean \"true\"] $lemma]\nset get_node_response_error [check_response_error $transliterateResponse]\nif {$get_node_response_error} {\ncontinue\n}\nset transliterateResultMap [$transliterateResponse getResult]\nset transliterateResultMap [java::cast Map $transliterateResultMap]\nset outputText [$transliterateResultMap get \"output\"]\nset outputText [$outputText toString]\nset outputText [string trim $outputText]\nif { $outputText==$lemma } {\n#skip if output is same as input lemma\n} else {\n$transliterateResultMap put \"output\" $outputText\n$transliterate put $language $transliterateResultMap\n}\n}\nset result_map [java::new HashMap]\n$result_map put \"transliterations\" $transliterate\nset response_list [create_response $result_map]\nreturn $response_list", "type" : "SCRIPT", "parameters" : [ { "name" : "lemma", "index" : 0, "routing_param" : false }, { "name" : "languages", "datatype" : "java.util.ArrayList", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/tools/transliterate", "request_params" : [ "languages", "lemma" ] } }
,{ "_id" : { "$oid" : "593d645f2827195e438512bf" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "bulkCreateTranslations", "api_id" : "ekstep.translations.bulk.save", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\njava::import -package com.ilimi.common.dto Response\njava::import  -package java.util.regex Pattern Matcher\nproc isNotEmpty {graph_nodes} {\nset exist false\nset hasRelations [java::isnull $graph_nodes]\nif {$hasRelations == 0} {\nset relationsSize [$graph_nodes size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getWord { graph_id  lemma } {\nset filters [java::new HashMap]\n$filters put \"objectType\" \"Word\"\n$filters put \"graph_id\" $graph_id\nset status [java::new ArrayList]\n$filters put \"status\" $status\n$filters put \"lemma\" $lemma\nset limit [java::new Integer 1]\nset searchCriteria [java::new HashMap]\n$searchCriteria put \"filters\" $filters\n$searchCriteria put \"limit\" $limit\nset searchResponse [compositeSearch $searchCriteria]\nset searchResultsMap [$searchResponse getResult]\nset wordsList [java::cast List [$searchResultsMap get \"results\"]]\nset wordsListNull [java::isnull $wordsList]\nif {$wordsListNull == 0 && [$wordsList size] == 1} {\nset wordObj [$wordsList get 0]\nset wordObject [java::cast Map $wordObj]\nreturn  $wordObject\n}\nreturn [java::null]\n}\nproc getInNodeRelationIds {graph_node relationType relationName property} {\nset relationIds [java::new ArrayList]\nset inRelations [java::prop $graph_node \"inRelations\"]\nset hasRelations [isNotEmpty $inRelations]\nif {$hasRelations} {\njava::for {Relation relation} $inRelations {\nif {[java::prop $relation \"startNodeObjectType\"] == $relationType && [java::prop $relation \"relationType\"] == $relationName} {\nset prop_value [java::prop $relation $property]\n$relationIds add $prop_value\n}\n}\n}\nreturn $relationIds\n}\nproc getSynonym {language_id word_node} {\nset word_metadata [java::prop $word_node \"metadata\"]\nset word_metadata [java::cast Map $word_metadata]\nset word_id [java::prop $word_node \"identifier\"]\nset lemma [$word_metadata get \"lemma\"]\nset pmId [$word_metadata get \"primaryMeaningId\"]\n#logs \"word_id is $word_id | pmId is $pmId\"\nset isPrimaryIdNull [java::isnull $pmId]\n#if primary meaning is null\nif {$isPrimaryIdNull == 1} {\n#get words synonym list\nset synonym_list [getInNodeRelationIds $word_node \"Synset\" \"synonym\" \"startNodeId\"]\nset synonym_list [java::cast List $synonym_list]\nset not_empty_list [isNotEmpty $synonym_list]\nif {$not_empty_list} {\n#return first synset id if word has some synonyms\nset pmId [$synonym_list get 0]\nset pmId [java::cast String $pmId]\n} else {\n#create synset as word\nset synsetResponse [createSynsetNode $language_id $lemma]\nset check_error [check_response_error $synsetResponse]\nif {$check_error} {\n#logs \"error while creating synset $language_id $lemma\"\nreturn $synsetResponse\n}\nset pmId [get_resp_value $synsetResponse \"node_id\"]\nset pmId [java::cast String $pmId]\n}\n#add synsetid as primary meaning in word\nset addPrimaryMeaningResp [addPrimaryMeaning $language_id $word_id $pmId true]\nset addPrimaryMeaningRespNull [java::isnull $addPrimaryMeaningResp]\nif {$addPrimaryMeaningRespNull == 0} {\nreturn $addPrimaryMeaningResp\n}\n}\nreturn $pmId\n}\nproc createSynsetNode {language_id gloss} {\nset synsetMetaData [java::new HashMap]\n$synsetMetaData put \"gloss\" $gloss\nset response [createSynset $language_id $synsetMetaData]\nreturn $response\n}\nproc createWordNode {language_id lemma} {\nset synsetResponse [createSynsetNode $language_id $lemma]\nset check_error [check_response_error $synsetResponse]\nif {$check_error} {\n#logs \"error while creating synset $language_id $lemma\"\nreturn $synsetResponse\n}\nset nodePrimaryMeaningId [get_resp_value $synsetResponse \"node_id\"]\nset nodePrimaryMeaningId [$nodePrimaryMeaningId toString]\n#logs \"createWordNode | nodePrimaryMeaningId $nodePrimaryMeaningId\"\nset graph_node [java::new Node [java::null] \"DATA_NODE\" \"Word\"]\nset metadata [java::new HashMap]\nset trimmedLemma [string trim $lemma]\n#logs \"createWordNode | trimmedLemma $trimmedLemma\"\n$metadata put \"lemma\" $trimmedLemma\n$metadata put \"primaryMeaningId\" $nodePrimaryMeaningId\n$graph_node setMetadata $metadata\n#logs \"creating word - [$metadata toString]\"\nset create_response [createDataNode $language_id $graph_node]\nset check_error [check_response_error $create_response]\nif {$check_error} {\n#logs \"error while creating word $language_id [$metadata toString]\"\nreturn $create_response\n}\nset wordId [get_resp_value $create_response \"node_id\"]\nset wordId [$wordId toString]\n$graph_node setIdentifier $wordId\nset addPrimaryMeaningResp [addPrimaryMeaning $language_id $wordId $nodePrimaryMeaningId false]\nset addPrimaryMeaningRespNull [java::isnull $addPrimaryMeaningResp]\nif {$addPrimaryMeaningRespNull == 0} {\nreturn $addPrimaryMeaningResp\n}\nreturn $graph_node\n}\nproc addPrimaryMeaning {language_id wordId synsetId update} {\n#logs \"addPrimaryMeaning $language_id $wordId $synsetId $update\"\nif {$update} {\n#logs \"updating node with primaryMeaningId $synsetId\"\nset graph_node [java::new Node $wordId \"DATA_NODE\" \"Word\"]\nset metadata [java::new HashMap]\n$metadata put \"primaryMeaningId\" $synsetId\n$graph_node setMetadata $metadata\n#logs \"update word $wordId metadata [$metadata toString]\"\nset wordResponse [updateDataNode $language_id $wordId $graph_node]\nset check_error [check_response_error $wordResponse]\nif {$check_error} {\n#logs \"error while updating word with primary meaning id\"\nreturn $wordResponse\n}\n}\nset addRelation_response [addRelation $language_id $synsetId \"synonym\" $wordId]\nset check_addRelation_error [check_response_error $addRelation_response]\nif {$check_addRelation_error} {\n#logs \"error while adding synonym relation between word and synset\"\nreturn $addRelation_response;\n}\nset words [java::new ArrayList]\n$words add $wordId\nset enrich [enrichWords $language_id $words]\nreturn [java::null]\n}\nproc createTranslations {wordMap specialCharPattern} {\nset maindWordLanguageId \"\"\nset mainWord \"\"\nset mainSynset \"\"\nset translationSetMap [java::new HashMap]\nset errors [java::new ArrayList]\nset mainVariablePopulated false\njava::for {Map.Entry entry} [$wordMap entrySet] {\nset language_id [[$entry getKey] toString]\nset word_lemma [[$entry getValue] toString]\nset word_lemma [string trim $word_lemma]\nif {$word_lemma == \"\"} {\ncontinue\n}\nset hasSpecial [$specialCharPattern matcher [java::new String $word_lemma]]\nset matched [$hasSpecial matches]\nif {$matched} {\n$errors add \"$word_lemma should not contain special character for language $language_id\"\ncontinue\n}\n#logs \"language_id $language_id word_lemma $word_lemma\"\nset word [getWord $language_id $word_lemma]\nset wordNull [java::isnull $word]\nset word_node [java::null]\nif {!$wordNull} {\nset wordId [$word get \"identifier\"]\nset wordId [$wordId toString]\n#logs \"wordId $wordId $language_id\"\nset get_node_response [getDataNode $language_id $wordId]\nset check_error [check_response_error $get_node_response]\nif {$check_error} {\nset wordNull true\n} else {\nset word_node [get_resp_value $get_node_response \"node\"]\n}\n}\n#logs \"wordNull $wordNull\"\nif {$wordNull} {\n#logs \"word not found\"\nset word_node [createWordNode $language_id  $word_lemma]\nset wordId \"\"\nset synsetId \"\"\nset resp_instance [java::instanceof $word_node Response]\nif {$resp_instance == 0} {\nset wordId [java::prop $word_node \"identifier\"]\nset word_metadata [java::prop $word_node \"metadata\"]\nset synsetId [[$word_metadata get \"primaryMeaningId\"] toString]\nafter 10000\n} else {\nset errorMsgMap [java::prop $word_node \"result\"]\n$errors add \"error while creating the word $word_lemma, language_id $language_id, error  [$errorMsgMap toString]\"\ncontinue\n}\n} else {\n#logs \"word found - [$word toString]\"\nset synsetId [getSynonym $language_id $word_node]\nset resp_instance [java::instanceof $synsetId Response]\nif {$resp_instance == 0} {\nset synsetId [$synsetId toString]\n} else {\nset errorMsgMap [java::prop $synsetId \"result\"]\n$errors add \"error while getting synonym for the word $word_lemma, language_id $language_id, error  [$errorMsgMap toString]\"\ncontinue\n}\n}\nif {$mainVariablePopulated} {\n#logs \"populating $language_id $synsetId into translationSetMap\"\nset synsets [java::new ArrayList]\n$synsets add $synsetId\n$translationSetMap put $language_id $synsets\n} else {\nset mainVariablePopulated true\n#logs \"entering main info $language_id $wordId $synsetId \"\nset mainWord $wordId\nset mainSynset $synsetId\nset maindWordLanguageId $language_id\n}\n}\nlogs \"maindWordLanguageId $maindWordLanguageId  mainWord $mainWord mainSynset $mainSynset translationSetMap [$translationSetMap toString]\"\nif {[$translationSetMap size] > 0} {\nset translationMap [java::new HashMap]\n$translationMap put $mainSynset $translationSetMap\nset createTranslationResponse [createTranslationAsync $maindWordLanguageId $mainWord $translationMap]\nset check_error [check_response_error $createTranslationResponse]\nif {$check_error} {\nset errorMsgMap [java::prop $createTranslationResponse \"result\"]\nset errorResponseParams [[java::prop $createTranslationResponse \"params\"] toString]\n$errors add \" create tranlsation failure input  maindWordLanguageId $maindWordLanguageId  mainWord $mainWord translationMap [$translationMap toString], error [$errorMsgMap toString], errorResponseParams $errorResponseParams\"\n}\n} else {\n$errors add \" create tranlsation failure input  maindWordLanguageId $maindWordLanguageId  mainWord $mainWord translationSetMap [$translationSetMap toString], error is no proper synset\"\n}\n#logs \"errors [$errors toString]\"\nafter 60000\nlogs \"maindWordLanguageId $maindWordLanguageId  mainWord $mainWord done\"\nreturn $errors\n}\n#starts\nset errors [java::new ArrayList]\nset result_map [java::new HashMap]\nset specialChar {.*\\[`~!@#$%^&*()_=+\\\\\\[\\\\\\]\\{\\}|\\\\\\\\;:'\\\",<.>/?-\\].*}\nset specialCharEsc [subst -nocommands -novariables $specialChar ]\nset specialCharPattern [java::call Pattern compile $specialCharEsc]\njava::for {Map word} $words {\nset wordMap [$word get \"word\"]\nset wordMap [java::cast Map $wordMap]\nset resp [createTranslations $wordMap $specialCharPattern]\n$errors addAll $resp\n}\n$result_map put \"errors\" $errors\nset response_list [create_response $result_map]\nreturn $response_list", "type" : "SCRIPT", "parameters" : [ { "name" : "words", "datatype" : "java.util.ArrayList", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/language/bulk/translations" } }
,{ "_id" : { "$oid" : "593d64732827195e438512c0" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "v1_enrichAllWords", "type" : "COMMAND", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "actor_path" : { "manager" : "ENRICH_ACTOR", "operation" : "enrichAllWords", "router" : "LANGUAGE_REQUEST_ROUTER" }, "request_path" : { "type" : "POST", "url" : "/v1/language/*/enrichAllWords/", "path_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "593d649fe8e24871d41ff5e4" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createTranslationAsync", "api_id" : "ekstep.translations.async.save", "body" : "package require java\npackage require json\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc isNotEmpty {graph_nodes} {\nset exist false\nset hasRelations [java::isnull $graph_nodes]\nif {$hasRelations == 0} {\nset relationsSize [$graph_nodes size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getOutRelations {graph_node} {\nset outRelations [java::prop $graph_node \"outRelations\"]\nreturn $outRelations\n}\nproc getNodeRelationIds {graph_node relationType property} {\nset relationIds [java::new ArrayList]\nset outRelations [getOutRelations $graph_node]\nset hasRelations [isNotEmpty $outRelations]\nif {$hasRelations} {\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"endNodeObjectType\"] == $relationType} {\nset prop_value [java::prop $relation $property]\n$relationIds add $prop_value\n}\n}\n}\nreturn $relationIds\n}\nproc getProperty {graph_node prop} {\nset property [java::prop $graph_node $prop]\nreturn $property\n}\nproc getErrorResponse {message code respCode} {\nset result_map [java::new HashMap]\n$result_map put \"code\" $code\n$result_map put \"message\" $message\n$result_map put \"responseCode\" [java::new Integer $respCode]\nset err_response [create_error_response $result_map]\nreturn $err_response\n}\nset object_type \"TranslationSet\"\nset node_id $word_id\nset language_id $language_id\nset synset_list [java::new ArrayList]\nset graph_synset_list [java::new ArrayList]\nset proxyType \"Synset\"\nset testMap [java::cast HashMap $translations]\nset graph_id \"translations\"\nset result_map [java::new HashMap]\nset set_list [java::new ArrayList]\nset exists false\njava::for {String translationKey} [$translations keySet] {\n$synset_list add $translationKey\nset testMap [java::cast HashMap [$translations get $translationKey]]\njava::for {String language} [$testMap keySet] {\nset synsetList [java::cast List [$testMap get $language]]\n$synset_list addAll $synsetList\n}\nset synsetListSize [$synset_list size]\nif {$synsetListSize > 0} {\nif {$synsetListSize == 1} {\nset msg \"INVALID REQUEST FORMAT\"\nset code \"INVALID_REQUEST_FORMAT\"\nset respCode 400\nreturn [getErrorResponse $msg $code $respCode]\n}\nset synsetResp [multiLanguageSynsetSearch $synset_list]\nset synsetIds [java::cast List [$synsetResp get \"synsets\"]]\njava::for {String synsetEntry} $synset_list {\nif {![$synsetIds contains $synsetEntry]} {\nset msg \"SYNSET NOT FOUND\"\nset code \"SYNSET_NOT_FOUND\"\nset respCode 404\nreturn [getErrorResponse $msg $code $respCode]\n}\n}\nset proxyResp [getDataNodes $graph_id $synset_list]\nset proxy_nodes [get_resp_value $proxyResp \"node_list\"]\nset proxyExists [isNotEmpty $proxy_nodes]\nif {$proxyExists} {\njava::for {Node proxy_node} $proxy_nodes {\nset proxy_id [getProperty $proxy_node \"identifier\"]\n$graph_synset_list add $proxy_id\n}\n}\njava::for {String synset_id} $synset_list {\nif {![$graph_synset_list contains $synset_id]} {\nset resp_def_node [getDefinition $graph_id $proxyType]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset synsetMap [java::new HashMap]\n$synsetMap put \"objectType\" $proxyType\n$synsetMap put \"graphId\" $graph_id\n$synsetMap put \"identifier\" $synset_id\nset synset_obj [convert_to_graph_node $synsetMap $def_node]\nset create_response [createProxyNode $graph_id $synset_obj]\n}\n}\nset relationMap [java::new HashMap]\n$relationMap put \"name\" \"hasMember\"\n$relationMap put \"objectType\" \"Synset\"\n$relationMap put \"identifiers\" $synset_list\nset criteria_list [java::new ArrayList]\n$criteria_list add $relationMap\nset criteria_map [java::new HashMap]\n$criteria_map put \"nodeType\" \"SET\"\n$criteria_map put \"objectType\" $object_type\n$criteria_map put \"relationCriteria\" $criteria_list\nset search_criteria [create_search_criteria $criteria_map]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset translationExists [isNotEmpty $graph_nodes]\nif {$translationExists} {\nset translationSize [$graph_nodes size]\nset graph_node [java::cast Node [$graph_nodes get 0]]\nset collection_id [getProperty $graph_node \"identifier\"]\nset collection_type \"SET\"\nset synset_ids [getNodeRelationIds $graph_node \"Synset\" \"endNodeId\"]\nset not_empty_list [isNotEmpty $synset_ids]\nif {$not_empty_list} {\nset members [java::new ArrayList]\njava::for {String synsetId} $synset_list {\nset synsetContains [$synset_ids contains $synsetId]\nif {!$synsetContains} {\n$members add $synsetId\n}\n}\nif {$translationSize > 0} {\njava::for {Node graph_node} $graph_nodes {\nset collection_node_id [getProperty $graph_node \"identifier\"]\nif {$collection_node_id != $collection_id} {\nset synset_ids [getNodeRelationIds $graph_node \"Synset\" \"endNodeId\"]\nset not_empty_list [isNotEmpty $synset_ids]\nif {$not_empty_list} {\n$members addAll $synset_ids\n}\nset dropResp [dropCollection $graph_id $collection_node_id $collection_type]\n}\n}\n}\nset membersSize [$members size]\nif {$membersSize > 0} {\nset searchResponse [addMembers $graph_id $collection_id $collection_type $members]\n}\n$set_list add $collection_id\n}\n} else {\nset node [java::new Node]\n$node setObjectType \"TranslationSet\"\nset members [java::new ArrayList]\n$members addAll $synset_list\nset member_type \"Synset\"\nset searchResponse [createSet $graph_id $members $object_type $member_type $node]\nset set_id [get_resp_value $searchResponse \"set_id\"]\n$set_list add $set_id\n}\n}\n} else {\nset msg \"INVALID REQUEST FORMAT\"\nset code \"INVALID_REQUEST_FORMAT\"\nset respCode 400\nreturn [getErrorResponse $msg $code $respCode]\n}\n}\nset resultSize [$result_map size]\nset setListSize [$set_list size]\nif {$setListSize > 0} {\n$result_map put \"set_list\" $set_list\nset response_list [create_response $result_map]\nreturn $response_list\n} else {\nreturn $searchResponse\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "word_id", "index" : 1, "routing_param" : true }, { "name" : "translations", "datatype" : "java.util.HashMap", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v1/exec/createTranslationAsync" }, "async" : true }
,{ "_id" : { "$oid" : "593e8f1b2827195e438512c1" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "bulkCreateTags", "api_id" : "ekstep.tags.bulk.save", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\njava::import -package com.ilimi.common.dto Response\njava::import -package java.util Arrays\nproc isNotEmpty {graph_nodes} {\nset exist false\nset hasRelations [java::isnull $graph_nodes]\nif {$hasRelations == 0} {\nset relationsSize [$graph_nodes size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getWord { graph_id  lemma } {\nset filters [java::new HashMap]\n$filters put \"objectType\" \"Word\"\n$filters put \"graph_id\" $graph_id\nset status [java::new ArrayList]\n$filters put \"status\" $status\n$filters put \"lemma\" $lemma\nset limit [java::new Integer 1]\nset searchCriteria [java::new HashMap]\n$searchCriteria put \"filters\" $filters\n$searchCriteria put \"limit\" $limit\nset searchResponse [compositeSearch $searchCriteria]\nset searchResultsMap [$searchResponse getResult]\nset wordsList [java::cast List [$searchResultsMap get \"results\"]]\nset wordsListNull [java::isnull $wordsList]\nif {$wordsListNull == 0 && [$wordsList size] == 1} {\nset wordObj [$wordsList get 0]\nset wordObject [java::cast Map $wordObj]\nreturn  $wordObject\n}\nreturn [java::null]\n}\nproc getInNodeRelationIds {graph_node relationType relationName property} {\nset relationIds [java::new ArrayList]\nset inRelations [java::prop $graph_node \"inRelations\"]\nset hasRelations [isNotEmpty $inRelations]\nif {$hasRelations} {\njava::for {Relation relation} $inRelations {\nif {[java::prop $relation \"startNodeObjectType\"] == $relationType && [java::prop $relation \"relationType\"] == $relationName} {\nset prop_value [java::prop $relation $property]\n$relationIds add $prop_value\n}\n}\n}\nreturn $relationIds\n}\nproc updateWordAndSynonym {language_id word_node tags} {\nset word_metadata [java::prop $word_node \"metadata\"]\nset word_metadata [java::cast Map $word_metadata]\nset word_id [java::prop $word_node \"identifier\"]\nset lemma [$word_metadata get \"lemma\"]\nset pmId [$word_metadata get \"primaryMeaningId\"]\n#puts \"word_id is $word_id | pmId is $pmId | tags is [$tags toString]\"\nset isPrimaryIdNull [java::isnull $pmId]\n#if primary meaning is null\nif {$isPrimaryIdNull == 1} {\n#get words synonym list\nset synonym_list [getInNodeRelationIds $word_node \"Synset\" \"synonym\" \"startNodeId\"]\nset synonym_list [java::cast List $synonym_list]\nset not_empty_list [isNotEmpty $synonym_list]\nif {$not_empty_list} {\n#return first synset id if word has some synonyms\nset pmId [$synonym_list get 0]\nset pmId [java::cast String $pmId]\nset synsetResponse [updateSynsetNode $language_id $pmId $tags]\nset check_error [check_response_error $synsetResponse]\nif {$check_error} {\n#puts \"error while updating synset $language_id $pmId\"\nreturn $synsetResponse\n}\n} else {\n#create synset as word\nset synsetResponse [createSynsetNode $language_id $lemma $tags]\nset check_error [check_response_error $synsetResponse]\nif {$check_error} {\n#puts \"error while creating synset $language_id $lemma\"\nreturn $synsetResponse\n}\nset pmId [get_resp_value $synsetResponse \"node_id\"]\nset pmId [java::cast String $pmId]\n}\n#add synsetid as primary meaning in word\nset addPrimaryMeaningResp [addPrimaryMeaning $language_id $word_id $pmId]\nset addPrimaryMeaningRespNull [java::isnull $addPrimaryMeaningResp]\nif {$addPrimaryMeaningRespNull == 0} {\nreturn $addPrimaryMeaningResp\n}\n} else {\nset synsetResponse [updateSynsetNode $language_id $pmId $tags]\nset check_error [check_response_error $synsetResponse]\nif {$check_error} {\n#puts \"error while updating synset $language_id $pmId\"\nreturn $synsetResponse\n}\n#set enrich [enrichWordAsync $language_id $word_id]\n}\n#logs \"updating word $word_id\"\n#update word with tags and primaryMeaningId\nset wordResponse [updateWordNode $language_id $word_id $pmId $tags]\nset wordResponseNull [java::isnull $wordResponse]\nif {$wordResponseNull == 0} {\nreturn $wordResponse\n}\n#logs \"primaryMeaningId [$pmId toString]\"\nreturn $pmId\n}\nproc enrichWordAsync {language_id wordId} {\nset words [java::new ArrayList]\n$words add $wordId\nset enrich [enrichWords $language_id $words]\n}\nproc updateSynsetNode {language_id  synset_id tags} {\nset synsetMetaData [java::new HashMap]\n$synsetMetaData put \"tags\" $tags\n#puts \"updating synset $language_id $synset_id metadata [$synsetMetaData toString]\"\nset response [updateSynset $language_id $synset_id $synsetMetaData]\nreturn $response\n}\nproc createSynsetNode {language_id gloss tags} {\nset synsetMetaData [java::new HashMap]\n$synsetMetaData put \"gloss\" $gloss\n$synsetMetaData put \"tags\" $tags\n#puts \"creating synset $language_id metadata [$synsetMetaData toString]\"\nset response [createSynset $language_id $synsetMetaData]\nreturn $response\n}\nproc updateWordNode {language_id wordId synsetId tags} {\n#logs \"updateWordNode $language_id $wordId $synsetId [$tags toString]\"\nset graph_node [java::new Node $wordId \"DATA_NODE\" \"Word\"]\nset metadata [java::new HashMap]\n$metadata put \"primaryMeaningId\" $synsetId\n$metadata put \"status\" \"Live\"\n$graph_node setMetadata $metadata\n$graph_node setTags $tags\nset wordResponse [updateDataNode $language_id $wordId $graph_node]\nset check_error [check_response_error $wordResponse]\nif {$check_error} {\nreturn $wordResponse\n}\nreturn [java::null]\n}\nproc addPrimaryMeaning {language_id wordId synsetId} {\nset addRelation_response [addRelation $language_id $synsetId \"synonym\" $wordId]\nset check_addRelation_error [check_response_error $addRelation_response]\nif {$check_addRelation_error} {\n#puts \"error while adding synonym relation between word and synset\"\nreturn $addRelation_response;\n}\n#set enrich [enrichWordAsync $language_id $wordId]\nreturn [java::null]\n}\nproc createTag {wordMap tags} {\nset errors [java::new ArrayList]\nset mainVariablePopulated false\njava::for {Map.Entry entry} [$wordMap entrySet] {\nset language_id [[$entry getKey] toString]\nset word_lemma [[$entry getValue] toString]\nset word_lemma [string trim $word_lemma]\nif {$word_lemma == \"\"} {\ncontinue\n}\n#puts \"language_id $language_id word_lemma $word_lemma\"\nset word [getWord $language_id $word_lemma]\nset wordNull [java::isnull $word]\nset word_node [java::null]\nset wordId \"\"\nif {!$wordNull} {\nset wordId [$word get \"identifier\"]\nset wordId [$wordId toString]\n#puts \"wordId $wordId $language_id\"\nset get_node_response [getDataNode $language_id $wordId]\nset check_error [check_response_error $get_node_response]\nif {$check_error} {\nset wordNull true\n} else {\nset word_node [get_resp_value $get_node_response \"node\"]\n}\n}\n#puts \"wordNull $wordNull\"\nif {$wordNull} {\n#puts \"word not found\"\n$errors add \"error the word not found $word_lemma, language_id $language_id\"\ncontinue\n} else {\n#puts \"word found - [$word toString]\"\nset synsetId [updateWordAndSynonym $language_id $word_node $tags]\nset resp_instance [java::instanceof $synsetId Response]\nif {$resp_instance == 0} {\n} else {\nset errorMsgMap [java::prop $synsetId \"result\"]\n$errors add \"error while getting synonym for the word $word_lemma, language_id $language_id, error  [$errorMsgMap toString]\"\ncontinue\n}\n}\n}\n#puts \"errors [$errors toString]\"\nreturn $errors\n}\n#starts\nset errors [java::new ArrayList]\nset result_map [java::new HashMap]\njava::for {Map word} $words {\nset wordMap [$word get \"word\"]\nset wordMap [java::cast Map $wordMap]\nset tags [$word get \"tags\"]\nset tags [java::cast String $tags]\nset tagList [java::call Arrays asList [$tags split \"\\\\s*,\\\\s*\"]]\nset tagList [java::new ArrayList $tagList]\n#puts \"tagList [$tagList toString]\"\n#$errors add [$tagList toString]\nset resp [createTag $wordMap $tagList]\n$errors addAll $resp\n}\n$result_map put \"errors\" $errors\nset response_list [create_response $result_map]\nreturn $response_list", "type" : "SCRIPT", "parameters" : [ { "name" : "words", "datatype" : "java.util.ArrayList", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/language/bulk/tags" } }
,{ "_id" : { "$oid" : "593ed0b52827196cf32b41f0" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateApi_v2", "api_id" : "ekstep.api.update", "version" : "2.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Api\"\nset graph_id \"domain\"\nset update_response [updateObject $graph_id $api $object_type $api_id]\nreturn $update_response", "type" : "SCRIPT", "parameters" : [ { "name" : "api_id", "index" : 0, "routing_param" : false }, { "name" : "api", "datatype" : "java.util.Map", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "PATCH", "url" : "/v2/api/update/*", "path_params" : [ "api_id" ] } }
,{ "_id" : { "$oid" : "593ed0ba2827196cf32b41f1" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getApi", "api_id" : "ekstep.api.read", "version" : "2.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Api\"\nset graph_id \"domain\"\nset get_node_response [getObject $graph_id $object_type $api_id]\nset api_object [get_resp_value $get_node_response \"object\"]\nset result_map [java::new HashMap]\n$result_map put \"api\" $api_object\nset api_response [create_response $result_map]\nreturn $api_response", "type" : "SCRIPT", "parameters" : [ { "name" : "api_id", "datatype" : "java.lang.String", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/api/read/*", "path_params" : [ "api_id" ], "request_params" : [ "fields" ] } }
,{ "_id" : { "$oid" : "593ed0c72827196cf32b41f2" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "searchApi_v2", "api_id" : "ekstep.api.search", "version" : "2.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Api\"\nset graph_id \"domain\"\nset get_node_response [searchObjects $graph_id $search $object_type]\nset api_object [get_resp_value $get_node_response \"object_list\"]\nset result_map [java::new HashMap]\n$result_map put \"apis\" $api_object\nset api_response [create_response $result_map]\nreturn $api_response", "type" : "SCRIPT", "parameters" : [ { "name" : "search", "datatype" : "java.util.Map", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/api/search" } }
,{ "_id" : { "$oid" : "593ed0e0e8e2484c8b4314d2" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createApi_v2", "api_id" : "ekstep.api.create", "version" : "2.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Api\"\nset graph_id \"domain\"\nset create_response [createObject $graph_id $api $object_type]\nreturn $create_response", "type" : "SCRIPT", "parameters" : [ { "name" : "api", "datatype" : "java.util.HashMap", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/api/create" } }
,{ "_id" : { "$oid" : "593ed0f5e8e2484c8b4314d3" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "listApis_v2", "api_id" : "ekstep.api.list", "version" : "2.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Api\"\nset graph_id \"domain\"\nset get_node_response [getAllObjects $graph_id $object_type]\nset api_object [get_resp_value $get_node_response \"object_list\"]\nset result_map [java::new HashMap]\n$result_map put \"apis\" $api_object\nset api_response [create_response $result_map]\nreturn $api_response", "type" : "SCRIPT", "parameters" : [ { "name" : "search", "datatype" : "java.util.Map", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/api/list" } }
,{ "_id" : { "$oid" : "593ed1bb2827196cf32b41f3" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createApi_v3", "api_id" : "ekstep.api.create", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Api\"\nset graph_id \"domain\"\nset create_response [createObject $graph_id $api $object_type]\nreturn $create_response", "type" : "SCRIPT", "parameters" : [ { "name" : "api", "datatype" : "java.util.HashMap", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/api/create" } }
,{ "_id" : { "$oid" : "593ed1bf2827196cf32b41f4" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateApi_v3", "api_id" : "ekstep.api.update", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Api\"\nset graph_id \"domain\"\nset update_response [updateObject $graph_id $api $object_type $api_id]\nreturn $update_response", "type" : "SCRIPT", "parameters" : [ { "name" : "api_id", "index" : 0, "routing_param" : false }, { "name" : "api", "datatype" : "java.util.Map", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "PATCH", "url" : "/v3/api/update/*", "path_params" : [ "api_id" ] } }
,{ "_id" : { "$oid" : "593ed1de2827196cf32b41f5" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "searchApi_v3", "api_id" : "ekstep.api.search", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Api\"\nset graph_id \"domain\"\nset get_node_response [searchObjects $graph_id $search $object_type]\nset api_object [get_resp_value $get_node_response \"object_list\"]\nset result_map [java::new HashMap]\n$result_map put \"apis\" $api_object\nset api_response [create_response $result_map]\nreturn $api_response", "type" : "SCRIPT", "parameters" : [ { "name" : "search", "datatype" : "java.util.Map", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/api/search" } }
,{ "_id" : { "$oid" : "593ed20de8e2484c8b4314d4" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "listApis_v3", "api_id" : "ekstep.api.list", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Api\"\nset graph_id \"domain\"\nset get_node_response [getAllObjects $graph_id $object_type]\nset api_object [get_resp_value $get_node_response \"object_list\"]\nset result_map [java::new HashMap]\n$result_map put \"apis\" $api_object\nset api_response [create_response $result_map]\nreturn $api_response", "type" : "SCRIPT", "parameters" : [ { "name" : "search", "datatype" : "java.util.Map", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/api/list" } }
,{ "_id" : { "$oid" : "593ed2502827196cf32b41f6" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateChannel_v2", "api_id" : "ekstep.channel.update", "version" : "2.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Channel\"\nset graph_id \"domain\"\nset update_response [updateObject $graph_id $channel $object_type $channel_id]\nreturn $update_response", "type" : "SCRIPT", "parameters" : [ { "name" : "channel_id", "index" : 0, "routing_param" : false }, { "name" : "channel", "datatype" : "java.util.Map", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "PATCH", "url" : "/v2/channel/update/*", "path_params" : [ "channel_id" ] } }
,{ "_id" : { "$oid" : "593ed25d2827196cf32b41f7" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "listChannels_v2", "api_id" : "ekstep.channel.list", "version" : "2.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Channel\"\nset graph_id \"domain\"\nset get_node_response [getAllObjects $graph_id $object_type]\nset channel_object [get_resp_value $get_node_response \"object_list\"]\nset result_map [java::new HashMap]\n$result_map put \"channels\" $channel_object\nset channel_response [create_response $result_map]\nreturn $channel_response", "type" : "SCRIPT", "parameters" : [ { "name" : "search", "datatype" : "java.util.Map", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/channel/list" } }
,{ "_id" : { "$oid" : "593ed2632827196cf32b41f8" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "searchChannel_v2", "api_id" : "ekstep.channel.search", "version" : "2.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Channel\"\nset graph_id \"domain\"\nset get_node_response [searchObjects $graph_id $search $object_type]\nset channel_object [get_resp_value $get_node_response \"object_list\"]\nset result_map [java::new HashMap]\n$result_map put \"channels\" $channel_object\nset channel_response [create_response $result_map]\nreturn $channel_response", "type" : "SCRIPT", "parameters" : [ { "name" : "search", "datatype" : "java.util.Map", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/channel/search" } }
,{ "_id" : { "$oid" : "593ed27b2827196cf32b41f9" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createChannel_v3", "api_id" : "ekstep.channel.create", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Channel\"\nset graph_id \"domain\"\nset create_response [createObject $graph_id $channel $object_type]\nreturn $create_response", "type" : "SCRIPT", "parameters" : [ { "name" : "channel", "datatype" : "java.util.HashMap", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/channel/create" } }
,{ "_id" : { "$oid" : "593ed27ee8e2484c8b4314d5" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createChannel_v2", "api_id" : "ekstep.channel.create", "version" : "2.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Channel\"\nset graph_id \"domain\"\nset create_response [createObject $graph_id $channel $object_type]\nreturn $create_response", "type" : "SCRIPT", "parameters" : [ { "name" : "channel", "datatype" : "java.util.HashMap", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/channel/create" } }
,{ "_id" : { "$oid" : "593ed28be8e2484c8b4314d6" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getChannel", "api_id" : "ekstep.channel.read", "version" : "2.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Channel\"\nset graph_id \"domain\"\nset get_node_response [getObject $graph_id $object_type $channel_id]\nset channel_object [get_resp_value $get_node_response \"object\"]\nset result_map [java::new HashMap]\n$result_map put \"channel\" $channel_object\nset channel_response [create_response $result_map]\nreturn $channel_response", "type" : "SCRIPT", "parameters" : [ { "name" : "channel_id", "datatype" : "java.lang.String", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/channel/read/*", "path_params" : [ "channel_id" ], "request_params" : [ "fields" ] } }
,{ "_id" : { "$oid" : "593ed2932827196cf32b41fa" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "searchChannel_v3", "api_id" : "ekstep.channel.search", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Channel\"\nset graph_id \"domain\"\nset get_node_response [searchObjects $graph_id $search $object_type]\nset channel_object [get_resp_value $get_node_response \"object_list\"]\nset result_map [java::new HashMap]\n$result_map put \"channels\" $channel_object\nset channel_response [create_response $result_map]\nreturn $channel_response", "type" : "SCRIPT", "parameters" : [ { "name" : "search", "datatype" : "java.util.Map", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/channel/search" } }
,{ "_id" : { "$oid" : "593ed29ee8e2484c8b4314d7" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "listAdvChannels_v2", "api_id" : "ekstep.channel.adv.list", "version" : "2.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nproc proc_isEmpty {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 1} {\nset exist true\n} else {\nset strValue [$value toString]\nset newStrValue [java::new String $strValue]\nset strLength [$newStrValue length]\nif {$strLength == 0} {\nset exist true\n}\n}\n} catch {Exception err} {\nset exist true\n}\nreturn $exist\n}\nset object_type \"Channel\"\nset graph_id \"domain\"\nset resultMaps [java::new HashMap]\nset values [java::new ArrayList]\nset result_map [java::new HashMap]\nset get_node_response [getAllObjects $graph_id $object_type]\nset channel_object [get_resp_value $get_node_response \"object_list\"]\njava::for {Map object} $channel_object {\nset resultMap $object\nset label [$resultMap get \"name\"]\nset labelData [$label toString]\nset value [$resultMap get \"identifier\"]\nset valueData [$value toString]\nset telemetry $valueData\nset search [$resultMap get \"contentFilter\"]\nset searchData [$search toString]\n$result_map put \"label\" $labelData\n$result_map put \"value\" $valueData\n$result_map put \"telemetry\" $telemetry\n$result_map put \"search\" $search\n$values add $result_map\n$resultMaps put \"label\" \"Channel\"\n$resultMaps put \"value\" \"channel\"\n$resultMaps put \"language\" \"en\"\n$resultMaps put \"description\" \"List of partner channels\"\n$resultMaps put \"values\" $values\n}\nset channel_response [create_response $resultMaps]\nreturn $channel_response", "type" : "SCRIPT", "parameters" : [ { "name" : "search", "datatype" : "java.util.Map", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/adv/channel/list" } }
,{ "_id" : { "$oid" : "593ed2b6e8e2484c8b4314d8" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "updateChannel_v3", "api_id" : "ekstep.channel.update", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Channel\"\nset graph_id \"domain\"\nset update_response [updateObject $graph_id $channel $object_type $channel_id]\nreturn $update_response", "type" : "SCRIPT", "parameters" : [ { "name" : "channel_id", "index" : 0, "routing_param" : false }, { "name" : "channel", "datatype" : "java.util.Map", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "PATCH", "url" : "/v3/channel/update/*", "path_params" : [ "channel_id" ] } }
,{ "_id" : { "$oid" : "593ed2c2e8e2484c8b4314d9" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "listChannels_v3", "api_id" : "ekstep.channel.list", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset object_type \"Channel\"\nset graph_id \"domain\"\nset get_node_response [getAllObjects $graph_id $object_type]\nset channel_object [get_resp_value $get_node_response \"object_list\"]\nset result_map [java::new HashMap]\n$result_map put \"channels\" $channel_object\nset channel_response [create_response $result_map]\nreturn $channel_response", "type" : "SCRIPT", "parameters" : [ { "name" : "search", "datatype" : "java.util.Map", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/channel/list" } }
,{ "_id" : { "$oid" : "593ed2c62827196cf32b41fb" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getStageIcons_v2", "api_id" : "ekstep.stageIcons.read", "version" : "2.0", "body" : "package require java\njava::import -package java.util HashMap LinkedHashMap Map\njava::import -package java.util ArrayList LinkedList List\njava::import -package org.apache.commons.lang3 StringEscapeUtils\nset externalProps [java::new ArrayList]\n$externalProps add \"stageIcons\"\nset resp_object [java::new HashMap]\nset stage_map [java::new LinkedHashMap]\nset stage_list [java::new LinkedList]\nset externalPropId $content_id\nset bodyResponse [getContentProperties $externalPropId $externalProps]\nset check_error [check_response_error $bodyResponse]\nif {!$check_error} {\nset extValues [get_resp_value $bodyResponse \"values\"]\nset is_extValues_null [java::isnull $extValues]\nset result_map [java::new HashMap]\nif {$is_extValues_null == 0} {\nset extValuesMap [java::cast Map $extValues]\n$resp_object putAll $extValuesMap\nset data [$resp_object get \"stageIcons\"]\nset is_data_null [java::isnull $data]\nif {$is_data_null == 1} {\n$result_map put \"code\" \"ERR_CONTENT_INVALID_REQUEST\"\n$result_map put \"message\" \"Content does not have stageIcons\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset data [java::cast String $data]\nset stage_string [java::call StringEscapeUtils unescapeJson $data]\n$stage_map putAll [convert_jsonstring_to_map $stage_string]\nset stage [$stage_map get $stage_id]\nset is_stage_null [java::isnull $stage]\nif {$is_stage_null == 1} {\n$result_map put \"code\" \"ERR_CONTENT_INVALID_REQUEST\"\n$result_map put \"message\" \"Stage does not exist\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nreturn $stage\n}\n}\n} else {\n$result_map put \"code\" \"ERR_CONTENT_INVALID_REQUEST\"\n$result_map put \"message\" \"Content doesnot exist\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\nset response_list [create_response $result_map]\nreturn $response_list\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_INVALID_CONTENT\"\n$result_map put \"message\" \"Content is invalid\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "content_id", "index" : 0, "routing_param" : false }, { "name" : "stage_id", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/content/*/stage/*", "path_params" : [ "content_id", "stage_id" ] } }
,{ "_id" : { "$oid" : "593ed2cee8e2484c8b4314da" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "listAdvChannels_v3", "api_id" : "ekstep.channel.adv.list", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nproc proc_isEmpty {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 1} {\nset exist true\n} else {\nset strValue [$value toString]\nset newStrValue [java::new String $strValue]\nset strLength [$newStrValue length]\nif {$strLength == 0} {\nset exist true\n}\n}\n} catch {Exception err} {\nset exist true\n}\nreturn $exist\n}\nset object_type \"Channel\"\nset graph_id \"domain\"\nset resultMaps [java::new HashMap]\nset values [java::new ArrayList]\nset result_map [java::new HashMap]\nset get_node_response [getAllObjects $graph_id $object_type]\nset channel_object [get_resp_value $get_node_response \"object_list\"]\njava::for {Map object} $channel_object {\nset resultMap $object\nset label [$resultMap get \"name\"]\nset labelData [$label toString]\nset value [$resultMap get \"identifier\"]\nset valueData [$value toString]\nset telemetry $valueData\nset search [$resultMap get \"contentFilter\"]\nset searchData [$search toString]\n$result_map put \"label\" $labelData\n$result_map put \"value\" $valueData\n$result_map put \"telemetry\" $telemetry\n$result_map put \"search\" $search\n$values add $result_map\n$resultMaps put \"label\" \"Channel\"\n$resultMaps put \"value\" \"channel\"\n$resultMaps put \"language\" \"en\"\n$resultMaps put \"description\" \"List of partner channels\"\n$resultMaps put \"values\" $values\n}\nset channel_response [create_response $resultMaps]\nreturn $channel_response", "type" : "SCRIPT", "parameters" : [ { "name" : "search", "datatype" : "java.util.Map", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/adv/channel/list" } }
,{ "_id" : { "$oid" : "593ed310e8e2484c8b4314db" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getStageIconsList_v2", "api_id" : "ekstep.stageIcons.list", "version" : "2.0", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package java.util ArrayList LinkedList List\njava::import -package org.apache.commons.lang3 StringEscapeUtils\nset externalProps [java::new ArrayList]\n$externalProps add \"stageIcons\"\nset env_String [java::cast String $server_env]\nset env_text [$env_String toString]\nset env_text \"${env_text}/v2/content/${content_id}\"\nset is_env_null [java::isnull $server_env]\nif { $is_env_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"SERVER_ERROR\"\n$result_map put \"message\" \"Something went wrong while processing\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\nset resp_object [java::new HashMap]\nset stage [java::new LinkedList]\nset externalPropId $content_id\nset bodyResponse [getContentProperties $externalPropId $externalProps]\nset check_error [check_response_error $bodyResponse]\nif {!$check_error} {\nset extValues [get_resp_value $bodyResponse \"values\"]\nset is_extValues_null [java::isnull $extValues]\nset result_map [java::new HashMap]\nif {$is_extValues_null == 0} {\nset extValuesMap [java::cast Map $extValues]\n$resp_object putAll $extValuesMap\nset data [$resp_object get \"stageIcons\"]\nset is_data_null [java::isnull $data]\nif {$is_data_null == 1} {\n$result_map put \"code\" \"ERR_CONTENT_INVALID_REQUEST\"\n$result_map put \"message\" \"Content does not have stageIcons\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\nset data [java::cast String $data]\nset stage_string [java::call StringEscapeUtils unescapeJson $data]\nset stage_map [convert_jsonstring_to_map $stage_string]\n$stage addAll [$stage_map keySet]\nset stage_list [java::new LinkedList]\njava::for {String elem} $stage {\n$stage_list add \"${env_text}/stage/${elem}?format=base64\"\n}\n} else {\n$result_map put \"code\" \"ERR_CONTENT_INVALID_REQUEST\"\n$result_map put \"message\" \"Content doesnot exist\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n$result_map put \"stages\" $stage_list\nset response_list [create_response $result_map]\nreturn $response_list\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_INVALID_CONTENT\"\n$result_map put \"message\" \"Content\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "content_id", "index" : 0, "routing_param" : false }, { "name" : "server_env", "datatype" : "java.lang.String", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/content/stageIcons/list/*", "path_params" : [ "content_id" ] } }
,{ "_id" : { "$oid" : "593ed353e8e2484c8b4314dc" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "rejectReviewContent", "api_id" : "ekstep.learning.content.reject", "version" : "2.0", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset graph_id \"domain\"\nset object_type \"Content\"\nset resp_get_node [getDataNode $graph_id $content_id]\nset check_error [check_response_error $resp_get_node]\nset original_content_id $content_id\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset node_object_type [java::prop $graph_node \"objectType\"]\nif {$node_object_type == $object_type} {\nset node_metadata [java::prop $graph_node \"metadata\"]\nset status_val [$node_metadata get \"status\"]\nset status_val_str [java::new String [$status_val toString]]\nset isReviewState [$status_val_str equalsIgnoreCase \"Review\"]\nset isLiveState [$status_val_str equalsIgnoreCase \"Live\"]\nset isFlaggedState [$status_val_str equalsIgnoreCase \"Flagged\"]\nif {$isReviewState == 1} {\nset request [java::new HashMap]\n$request put \"versionKey\" [$node_metadata get \"versionKey\"]\n$request put \"status\" \"Draft\"\n$request put \"objectType\" $object_type\n$request put \"identifier\" $content_id\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset domain_obj [convert_to_graph_node $request $def_node]\nset create_response [updateDataNode $graph_id $content_id $domain_obj]\nset check_error [check_response_error $create_response]\nreturn $create_response\n} elseif {$isLiveState == 1} {\nset content_image_id ${content_id}.img\nset resp_get_node [getDataNode $graph_id $content_image_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_NOT_IN_REVIEW\"\n$result_map put \"message\" \"Content $content_id is not in review state to reject\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset image_node [get_resp_value $resp_get_node \"node\"]\nset image_metadata [java::prop $image_node \"metadata\"]\nset status_val [$image_metadata get \"status\"]\nset status_val_str [java::new String [$status_val toString]]\nset isReviewState [$status_val_str equalsIgnoreCase \"Review\"]\nif {$isReviewState == 1} {\n$image_metadata put \"status\" \"Draft\"\nset create_image_response [updateDataNode $graph_id $content_image_id $image_node]\nset check_error [check_response_error $create_image_response]\n$create_image_response put \"node_id\" $original_content_id\nreturn $create_image_response\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_NOT_IN_REVIEW\"\n$result_map put \"message\" \"Content $content_id is not in review state to reject\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}\n}  elseif {$isFlaggedState == 1} {\nset content_image_id ${content_id}.img\nset resp_get_node [getDataNode $graph_id $content_image_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_NOT_IN_REVIEW\"\n$result_map put \"message\" \"Content $content_id is not in review state to reject\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset image_node [get_resp_value $resp_get_node \"node\"]\nset image_metadata [java::prop $image_node \"metadata\"]\nset status_val [$image_metadata get \"status\"]\nset status_val_str [java::new String [$status_val toString]]\nset isReviewState [$status_val_str equalsIgnoreCase \"FlagReview\"]\nif {$isReviewState == 1} {\n$image_metadata put \"status\" \"FlagDraft\"\nset create_image_response [updateDataNode $graph_id $content_image_id $image_node]\nset check_error [check_response_error $create_image_response]\n$create_image_response put \"node_id\" $original_content_id\nreturn $create_image_response\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_NOT_IN_FLAG_REVIEW\"\n$result_map put \"message\" \"Content $content_id is not in flag review state to reject\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_NOT_IN_REVIEW\"\n$result_map put \"message\" \"Content $content_id is not in review state to reject\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_NODE_NOT_FOUND\"\n$result_map put \"message\" \"$object_type $content_id not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "content_id", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/content/reject/*", "path_params" : [ "content_id" ] } }
,{ "_id" : { "$oid" : "593ed35be8e2484c8b4314dd" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "acceptFlaggedContent", "api_id" : "ekstep.domain.content.flag.accept", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package java.util ArrayList List\nset graph_id \"domain\"\nset object_type \"Content\"\nset original_content_id $content_id\nset content_image_object_type \"ContentImage\"\nset resp_get_node [getDataNode $graph_id $content_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node\n} else {\nset isImageObjectCreationNeeded 0\nset imageObjectExists 0\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset node_object_type [java::prop $graph_node \"objectType\"]\nset metadata [java::prop $graph_node \"metadata\"]\nif {$node_object_type == $object_type} {\nset node_metadata [java::prop $graph_node \"metadata\"]\nset status_val [$node_metadata get \"status\"]\nset status_val_str [java::new String [$status_val toString]]\nset isFlaggedstate [$status_val_str equalsIgnoreCase \"Flagged\"]\nif {$isFlaggedstate == 1} {\nset content_image_id ${content_id}.img\nset get_node_response [getDataNode $graph_id $content_image_id]\nset get_node_response_error [check_response_error $get_node_response]\nif {$get_node_response_error} {\nset isImageObjectCreationNeeded 1\n} else {\nset imageObjectExists 1\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_NOT_FLAGGED\"\n$result_map put \"message\" \"Content $content_id is not flagged to accept\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\nif {$isImageObjectCreationNeeded == 1} {\njava::prop $graph_node \"identifier\" $content_image_id\njava::prop $graph_node \"objectType\" $content_image_object_type\nif {$isFlaggedstate == 1} {\n$metadata put \"status\" \"FlagDraft\"\n}\nset create_response [createDataNode $graph_id $graph_node]\nset check_error [check_response_error $create_response]\nif {!$check_error} {\nset externalPropFields [java::new ArrayList]\n$externalPropFields add \"body\"\n$externalPropFields add \"oldBody\"\n$externalPropFields add \"stageIcons\"\nset bodyResponse [getContentProperties $content_id $externalPropFields]\nset check_error [check_response_error $bodyResponse]\nif {!$check_error} {\nset extValues [get_resp_value $bodyResponse \"values\"]\nset is_extValues_null [java::isnull $extValues]\nif {$is_extValues_null == 0} {\nset extValuesMap [java::cast Map $extValues]\nset bodyResponse [updateContentProperties $content_image_id $extValuesMap]\n}\n}\n$create_response put \"node_id\" $original_content_id\n}\nreturn $create_response\n} elseif {$imageObjectExists == 1} {\nset content_image_id ${content_id}.img\nset get_node_response [getDataNode $graph_id $content_image_id]\nset image_node [get_resp_value $get_node_response \"node\"]\nset image_metadata [java::prop $image_node \"metadata\"]\n$image_metadata put \"status\" \"FlagDraft\"\nset create_response [updateDataNode $graph_id $content_image_id $image_node]\nset check_error [check_response_error $create_response]\nif {$check_error} {\nreturn $create_response\n} else {\n$create_response put \"node_id\" $original_content_id\n}\nreturn $create_response\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_NODE_NOT_FOUND\"\n$result_map put \"message\" \"$object_type $content_id not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "content_id", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/content/flag/accept/*", "path_params" : [ "content_id" ] } }
,{ "_id" : { "$oid" : "593ed37d2827196cf32b41fc" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "rejectReviewContentV3", "api_id" : "ekstep.domain.content.reject", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset graph_id \"domain\"\nset object_type \"Content\"\nset resp_get_node [getDataNode $graph_id $content_id]\nset check_error [check_response_error $resp_get_node]\nset original_content_id $content_id\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset node_object_type [java::prop $graph_node \"objectType\"]\nif {$node_object_type == $object_type} {\nset node_metadata [java::prop $graph_node \"metadata\"]\nset status_val [$node_metadata get \"status\"]\nset status_val_str [java::new String [$status_val toString]]\nset isReviewState [$status_val_str equalsIgnoreCase \"Review\"]\nset isLiveState [$status_val_str equalsIgnoreCase \"Live\"]\nif {$isReviewState == 1} {\nset request [java::new HashMap]\n$request put \"versionKey\" [$node_metadata get \"versionKey\"]\n$request put \"status\" \"Draft\"\n$request put \"objectType\" $object_type\n$request put \"identifier\" $content_id\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset domain_obj [convert_to_graph_node $request $def_node]\nset create_response [updateDataNode $graph_id $content_id $domain_obj]\nset check_error [check_response_error $create_response]\nreturn $create_response\n} elseif {$isLiveState == 1} {\nset content_image_id ${content_id}.img\nset resp_get_node [getDataNode $graph_id $content_image_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_NOT_IN_REVIEW\"\n$result_map put \"message\" \"Content $content_id is not in review state to reject\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n} else {\nset image_node [get_resp_value $resp_get_node \"node\"]\nset image_metadata [java::prop $image_node \"metadata\"]\nset status_val [$image_metadata get \"status\"]\nset status_val_str [java::new String [$status_val toString]]\nset isReviewState [$status_val_str equalsIgnoreCase \"Review\"]\nif {$isReviewState == 1} {\n$image_metadata put \"status\" \"Draft\"\nset create_image_response [updateDataNode $graph_id $content_image_id $image_node]\nset check_error [check_response_error $create_image_response]\n$create_image_response put \"node_id\" $original_content_id\nreturn $create_image_response\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_NOT_IN_REVIEW\"\n$result_map put \"message\" \"Content $content_id is not in review state to reject\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_NOT_IN_REVIEW\"\n$result_map put \"message\" \"Content $content_id is not in review state to reject\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_NODE_NOT_FOUND\"\n$result_map put \"message\" \"$object_type $content_id not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "content_id", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/content/reject/*", "path_params" : [ "content_id" ] } }
,{ "_id" : { "$oid" : "593ed38f2827196cf32b41fd" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "rejectFlaggedContent_V3", "api_id" : "ekstep.domain.content.flag.reject", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset graph_id \"domain\"\nset object_type \"Content\"\nset resp_get_node [getDataNode $graph_id $content_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node\n} else {\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset node_object_type [java::prop $graph_node \"objectType\"]\nif {$node_object_type == $object_type} {\nset node_metadata [java::prop $graph_node \"metadata\"]\nset status_val [$node_metadata get \"status\"]\nset status_val_str [java::new String [$status_val toString]]\nset isFlaggedstate [$status_val_str equalsIgnoreCase \"Flagged\"]\nif {$isFlaggedstate == 1} {\nset request [java::new HashMap]\n$request put \"flagReasons\" [java::null]\n$request put \"versionKey\" [$node_metadata get \"versionKey\"]\n$request put \"status\" \"Live\"\n$request put \"objectType\" $object_type\n$request put \"identifier\" $content_id\nset resp_def_node [getDefinition $graph_id $object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset domain_obj [convert_to_graph_node $request $def_node]\nset create_response [updateDataNode $graph_id $content_id $domain_obj]\nreturn $create_response\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_NOT_FLAGGED\"\n$result_map put \"message\" \"Content $content_id is not flagged to reject\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_NODE_NOT_FOUND\"\n$result_map put \"message\" \"$object_type $content_id not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "content_id", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/content/flag/reject/*", "path_params" : [ "content_id" ] } }
,{ "_id" : { "$oid" : "593ed3a2e8e2484c8b4314de" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "acceptFlaggedContent_V3", "api_id" : "ekstep.domain.content.flag.accept", "body" : "package require java\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package java.util ArrayList List\nset graph_id \"domain\"\nset object_type \"Content\"\nset original_content_id $content_id\nset content_image_object_type \"ContentImage\"\nset resp_get_node [getDataNode $graph_id $content_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node\n} else {\nset isImageObjectCreationNeeded 0\nset imageObjectExists 0\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset node_object_type [java::prop $graph_node \"objectType\"]\nset metadata [java::prop $graph_node \"metadata\"]\nif {$node_object_type == $object_type} {\nset node_metadata [java::prop $graph_node \"metadata\"]\nset status_val [$node_metadata get \"status\"]\nset status_val_str [java::new String [$status_val toString]]\nset isFlaggedstate [$status_val_str equalsIgnoreCase \"Flagged\"]\nif {$isFlaggedstate == 1} {\nset content_image_id ${content_id}.img\nset get_node_response [getDataNode $graph_id $content_image_id]\nset get_node_response_error [check_response_error $get_node_response]\nif {$get_node_response_error} {\nset isImageObjectCreationNeeded 1\n} else {\nset imageObjectExists 1\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT_NOT_FLAGGED\"\n$result_map put \"message\" \"Content $content_id is not flagged to accept\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\nif {$isImageObjectCreationNeeded == 1} {\njava::prop $graph_node \"identifier\" $content_image_id\njava::prop $graph_node \"objectType\" $content_image_object_type\nif {$isFlaggedstate == 1} {\n$metadata put \"status\" \"FlagDraft\"\n}\nset create_response [createDataNode $graph_id $graph_node]\nset check_error [check_response_error $create_response]\nif {!$check_error} {\nset externalPropFields [java::new ArrayList]\n$externalPropFields add \"body\"\n$externalPropFields add \"oldBody\"\n$externalPropFields add \"stageIcons\"\nset bodyResponse [getContentProperties $content_id $externalPropFields]\nset check_error [check_response_error $bodyResponse]\nif {!$check_error} {\nset extValues [get_resp_value $bodyResponse \"values\"]\nset is_extValues_null [java::isnull $extValues]\nif {$is_extValues_null == 0} {\nset extValuesMap [java::cast Map $extValues]\nset bodyResponse [updateContentProperties $content_image_id $extValuesMap]\n}\n}\n$create_response put \"node_id\" $original_content_id\n}\nreturn $create_response\n} elseif {$imageObjectExists == 1} {\nset content_image_id ${content_id}.img\nset get_node_response [getDataNode $graph_id $content_image_id]\nset image_node [get_resp_value $get_node_response \"node\"]\nset image_metadata [java::prop $image_node \"metadata\"]\n$image_metadata put \"status\" \"FlagDraft\"\nset create_response [updateDataNode $graph_id $content_image_id $image_node]\nset check_error [check_response_error $create_response]\nif {$check_error} {\nreturn $create_response\n} else {\n$create_response put \"node_id\" $original_content_id\n}\nreturn $create_response\n}\n} else {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_NODE_NOT_FOUND\"\n$result_map put \"message\" \"$object_type $content_id not found\"\n$result_map put \"responseCode\" [java::new Integer 404]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "content_id", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/content/flag/accept/*", "path_params" : [ "content_id" ] } }
,{ "_id" : { "$oid" : "593fd3e12827196cf32b41fe" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "migrateScreenshots_v2", "api_id" : "ekstep.content.migrate", "body" : "package require java\njava::import -package java.util HashMap Map Date\njava::import -package java.util ArrayList List\njava::import -package java.util HashSet Set\njava::import -package java.util Arrays\njava::import -package com.ilimi.graph.dac.model Node\njava::import -package com.ilimi.graph.common DateUtils\njava::import -package com.ilimi.graph.dac.model Relation\njava::import -package java.util Arrays\nset graph_id \"domain\"\nset object_type \"Content\"\nset image_object_type \"ContentImage\"\nproc isNotEmpty {list} {\nset exist false\nset isListNull [java::isnull $list]\nif {$isListNull == 0} {\nset listSize [$list size]\nif {$listSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc proc_isNotNull {value} {\nset exist false\njava::try {\nset hasValue [java::isnull $value]\nif {$hasValue == 0} {\nset exist true\n}\n} catch {Exception err} {\nset exist false\n}\nreturn $exist\n}\nproc proc_getScreenshots {graph_node} {\nset urlSet [java::new HashSet]\nset result_map [java::new Relation]\nset node_metadata [java::prop $graph_node \"metadata\"]\nset outRelations [java::prop $graph_node \"outRelations\"]\njava::for {Relation object} $outRelations {\nset resultMap $object\nset relationType [java::prop $resultMap \"relationType\"]\nif {$relationType == \"associatedTo\"} {\nset endNodeObjectType [java::prop $resultMap \"endNodeObjectType\"]\nif {$endNodeObjectType == \"Content\"} {\nset endNodeMetadata [java::prop $resultMap \"endNodeMetadata\"]\nset endNodeContentType [$endNodeMetadata get \"contentType\"]\nset contentType [$endNodeContentType toString]\nif {$contentType == \"Asset\"} {\nset artifactUrl [$endNodeMetadata get \"artifactUrl\"]\nset url [java::cast String $artifactUrl]\nset urlNotNull [proc_isNotNull $url]\nif {$urlNotNull} {\n$urlSet add $url\n} else {\nset downloadUrl [$endNodeMetadata get \"downloadUrl\"]\nset url [java::cast String $downloadUrl]\nset urlNotNull [proc_isNotNull $url]\nif {$urlNotNull} {\n$urlSet add $url\n}\n}\n}\n}\n}\n}\nset screenshots [$node_metadata get \"screenshots\"]\nset arr_instance [java::instanceof $screenshots {String[]}]\nif {$arr_instance == 1} {\nset existingAsset [java::cast {String[]} $screenshots]\nset existingData [java::call Arrays asList $existingAsset]\nset screenShotNotNull [proc_isNotNull $existingData]\nif {$screenShotNotNull} {\n$urlSet addAll $existingData\n}\n}\nset urls [java::new ArrayList $urlSet]\n$node_metadata put \"screenshots\" $urls\nreturn $graph_node\n}\nset resp_get_node [getDataNode $graph_id $content_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\nreturn $resp_get_node;\n} else {\nset graph_node [get_resp_value $resp_get_node \"node\"]\nset node_object_type [java::prop $graph_node \"objectType\"]\nset node_metadata [java::prop $graph_node \"metadata\"]\nset outRelations [java::prop $graph_node \"outRelations\"]\nset relation_val_null [java::isnull $outRelations]\nset relation_isNotEmpty [isNotEmpty $outRelations]\nif {$relation_val_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT\"\n$result_map put \"message\" \"Content has no relations\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\nif {$relation_isNotEmpty && $node_object_type == $object_type} {\nproc_getScreenshots $graph_node\nset create_response [updateDataNode $graph_id $content_id $graph_node]\nreturn $create_response\n}\nset content_image_id ${content_id}.img\nset resp_get_node [getDataNode $graph_id $content_image_id]\nset check_error [check_response_error $resp_get_node]\nif {$check_error} {\n} else {\nset image_node [get_resp_value $resp_get_node \"node\"]\nset node_metadata [java::prop $image_node \"metadata\"]\nset outRelations [java::prop $image_node \"outRelations\"]\nset node_object_type [java::prop $graph_node \"objectType\"]\nset relation_val_null [java::isnull $outRelations]\nset relation_isNotEmpty [isNotEmpty $outRelations]\nif {$relation_val_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_CONTENT\"\n$result_map put \"message\" \"Content has no relations\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\nif {$relation_isNotEmpty && $node_object_type == $object_type} {\nset image_node [get_resp_value $resp_get_node \"node\"]\nproc_getScreenshots $image_node\nset create_image_response [updateDataNode $graph_id $content_image_id $image_node]\nreturn $create_image_response\n}\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "content_id", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v2/content/migrate/*", "path_params" : [ "content_id" ] } }
,{ "_id" : { "$oid" : "5943ae9c2827191d4218e3f6" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "multiLanguageWordSearch", "type" : "COMMAND", "parameters" : [ { "name" : "synset_id_list", "datatype" : "java.util.ArrayList", "index" : 0, "routing_param" : false } ], "actor_path" : { "manager" : "SEARCH_MANAGER", "operation" : "MULTI_LANGUAGE_WORD_SEARCH", "router" : "SEARCH_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "5943aeb42827191d4218e3f7" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "dropCollection", "type" : "COMMAND", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "collection_id", "index" : 1, "routing_param" : false }, { "name" : "collection_type", "index" : 2, "routing_param" : false } ], "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.CollectionManagerImpl", "operation" : "dropCollection", "router" : "GRAPH_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "5943af092827191d4218e3f8" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "deleteTranslation", "api_id" : "ekstep.translations.delete", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc getOutRelations {graph_node} {\nset outRelations [java::prop $graph_node \"outRelations\"]\nreturn $outRelations\n}\nproc getNodeRelationIds {graph_node relationType property} {\nset relationIds [java::new ArrayList]\nset outRelations [getOutRelations $graph_node]\nset hasRelations [isNotEmpty $outRelations]\nif {$hasRelations} {\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"endNodeObjectType\"] == $relationType} {\nset prop_value [java::prop $relation $property]\n$relationIds add $prop_value\n}\n}\n}\nreturn $relationIds\n}\nproc isNotEmpty {graph_nodes} {\nset exist false\nset hasRelations [java::isnull $graph_nodes]\nif {$hasRelations == 0} {\nset relationsSize [$graph_nodes size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getProperty {graph_node prop} {\nset property [java::prop $graph_node $prop]\nreturn $property\n}\nproc getErrorResponse {message code respCode} {\nset result_map [java::new HashMap]\n$result_map put \"code\" $code\n$result_map put \"message\" $message\n$result_map put \"responseCode\" [java::new Integer $respCode]\nset err_response [create_error_response $result_map]\nreturn $err_response\n}\nset object_type \"TranslationSet\"\nset node_id $word_id\nset language_id $language_id\nset synset_list [java::new ArrayList]\nset testMap [java::cast HashMap $translations]\nset resultmap [java::new HashMap]\nset resultlist [java::new ArrayList]\njava::for {String translationKey} [$translations keySet] {\nset testMap [java::cast HashMap [$translations get $translationKey]]\njava::for {String language} [$testMap keySet] {\nset synsetList [java::cast List [$testMap get $language]]\n$synset_list addAll $synsetList\n}\nset relationMap [java::new HashMap]\n$relationMap put \"name\" \"hasMember\"\n$relationMap put \"objectType\" \"Synset\"\n$relationMap put \"identifiers\" $synset_list\nset criteria_list [java::new ArrayList]\n$criteria_list add $relationMap\nset criteria_map [java::new HashMap]\n$criteria_map put \"nodeType\" \"SET\"\n$criteria_map put \"objectType\" $object_type\n$criteria_map put \"relationCriteria\" $criteria_list\nset graph_id \"translations\"\nset collection_type \"SET\"\nset search_criteria [create_search_criteria $criteria_map]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset result_map [java::new HashMap]\njava::try {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset translationExists [isNotEmpty $graph_nodes]\nif {$translationExists} {\njava::for {Node graph_node} $graph_nodes {\nset collection_id [getProperty $graph_node \"identifier\"]\nset synset_ids [getNodeRelationIds $graph_node \"Synset\" \"endNodeId\"]\nset not_empty_list [isNotEmpty $synset_ids]\nif {$not_empty_list} {\nset members [java::new ArrayList]\njava::for {String synsetId} $synset_list {\nset synsetContains [$synset_ids contains $synsetId]\nif {$synsetContains} {\n$members add $synsetId\n}\n}\nset membersSize [$members size]\nif {$membersSize > 0} {\nset searchResponse [removeMembers $graph_id $collection_id $collection_type $members]\n$resultlist add $collection_id\n}\n}\n}\n}\n} catch {Exception err} {\n$result_map put \"error\" [$err getMessage]\n}\n}\n}\nset get_node_response [getDataNode $language_id $node_id]\nset get_node_response_error [check_response_error $get_node_response]\nif {$get_node_response_error} {\nreturn $get_node_response\n}\nset word_node [get_resp_value $get_node_response \"node\"]\nset eventResp [log_translation_lifecycle_event $word_id $word_node]\nset resultlistSize [$resultlist size]\nif {$resultlistSize > 0} {\n$result_map put \"set_list\" $resultlist\nset response_list [create_response $result_map]\nreturn $response_list\n} else {\nset msg \"TRANSLATION NOT FOUND\"\nset code \"TRANSLATION_NOT_FOUND\"\nset respCode 404\nreturn [getErrorResponse $msg $code $respCode]\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "word_id", "index" : 1, "routing_param" : true }, { "name" : "translations", "datatype" : "java.util.HashMap", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/language/translations/delete/*/*", "path_params" : [ "language_id", "word_id" ] } }
,{ "_id" : { "$oid" : "5943af27e8e24817e44bc25f" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createProxyNode", "type" : "COMMAND", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "node", "datatype" : "com.ilimi.graph.dac.model.Node", "index" : 1, "routing_param" : false } ], "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.NodeManagerImpl", "operation" : "createProxyNode", "router" : "GRAPH_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "5943af2fe8e24817e44bc260" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getProxyNode", "type" : "COMMAND", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "node_id", "index" : 1, "routing_param" : true } ], "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.SearchManagerImpl", "operation" : "getProxyNode", "router" : "SEARCH_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "5943af43e8e24817e44bc261" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "multiLanguageSynsetSearch", "type" : "COMMAND", "parameters" : [ { "name" : "synset_ids", "datatype" : "java.util.ArrayList", "index" : 0, "routing_param" : false } ], "actor_path" : { "manager" : "SEARCH_MANAGER", "operation" : "MULTI_LANGUAGE_SYNSET_SEARCH", "router" : "SEARCH_REQUEST_ROUTER" } }
,{ "_id" : { "$oid" : "5943af80e8e24817e44bc262" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "createTranslation", "api_id" : "ekstep.translations.save", "body" : "package require java\npackage require json\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc isNotEmpty {graph_nodes} {\nset exist false\nset hasRelations [java::isnull $graph_nodes]\nif {$hasRelations == 0} {\nset relationsSize [$graph_nodes size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getOutRelations {graph_node} {\nset outRelations [java::prop $graph_node \"outRelations\"]\nreturn $outRelations\n}\nproc getNodeRelationIds {graph_node relationType property} {\nset relationIds [java::new ArrayList]\nset outRelations [getOutRelations $graph_node]\nset hasRelations [isNotEmpty $outRelations]\nif {$hasRelations} {\njava::for {Relation relation} $outRelations {\nif {[java::prop $relation \"endNodeObjectType\"] == $relationType} {\nset prop_value [java::prop $relation $property]\n$relationIds add $prop_value\n}\n}\n}\nreturn $relationIds\n}\nproc getProperty {graph_node prop} {\nset property [java::prop $graph_node $prop]\nreturn $property\n}\nproc getErrorResponse {message code respCode} {\nset result_map [java::new HashMap]\n$result_map put \"code\" $code\n$result_map put \"message\" $message\n$result_map put \"responseCode\" [java::new Integer $respCode]\nset err_response [create_error_response $result_map]\nreturn $err_response\n}\nset object_type \"TranslationSet\"\nset node_id $word_id\nset language_id $language_id\nset synset_list [java::new ArrayList]\nset graph_synset_list [java::new ArrayList]\nset proxyType \"Synset\"\nset testMap [java::cast HashMap $translations]\nset graph_id \"translations\"\nset result_map [java::new HashMap]\nset set_list [java::new ArrayList]\nset exists false\njava::for {String translationKey} [$translations keySet] {\n$synset_list add $translationKey\nset testMap [java::cast HashMap [$translations get $translationKey]]\njava::for {String language} [$testMap keySet] {\nset synsetList [java::cast List [$testMap get $language]]\n$synset_list addAll $synsetList\n}\nset synsetListSize [$synset_list size]\nif {$synsetListSize > 0} {\nif {$synsetListSize == 1} {\nset msg \"INVALID REQUEST FORMAT\"\nset code \"INVALID_REQUEST_FORMAT\"\nset respCode 400\nreturn [getErrorResponse $msg $code $respCode]\n}\nset synsetResp [multiLanguageSynsetSearch $synset_list]\nset synsetIds [java::cast List [$synsetResp get \"synsets\"]]\njava::for {String synsetEntry} $synset_list {\nif {![$synsetIds contains $synsetEntry]} {\nset msg \"SYNSET NOT FOUND\"\nset code \"SYNSET_NOT_FOUND\"\nset respCode 404\nreturn [getErrorResponse $msg $code $respCode]\n}\n}\nset proxyResp [getDataNodes $graph_id $synset_list]\nset proxy_nodes [get_resp_value $proxyResp \"node_list\"]\nset proxyExists [isNotEmpty $proxy_nodes]\nif {$proxyExists} {\njava::for {Node proxy_node} $proxy_nodes {\nset proxy_id [getProperty $proxy_node \"identifier\"]\n$graph_synset_list add $proxy_id\n}\n}\njava::for {String synset_id} $synset_list {\nif {![$graph_synset_list contains $synset_id]} {\nset resp_def_node [getDefinition $graph_id $proxyType]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset synsetMap [java::new HashMap]\n$synsetMap put \"objectType\" $proxyType\n$synsetMap put \"graphId\" $graph_id\n$synsetMap put \"identifier\" $synset_id\nset synset_obj [convert_to_graph_node $synsetMap $def_node]\nset create_response [createProxyNode $graph_id $synset_obj]\n}\n}\nset relationMap [java::new HashMap]\n$relationMap put \"name\" \"hasMember\"\n$relationMap put \"objectType\" \"Synset\"\n$relationMap put \"identifiers\" $synset_list\nset criteria_list [java::new ArrayList]\n$criteria_list add $relationMap\nset criteria_map [java::new HashMap]\n$criteria_map put \"nodeType\" \"SET\"\n$criteria_map put \"objectType\" $object_type\n$criteria_map put \"relationCriteria\" $criteria_list\nset search_criteria [create_search_criteria $criteria_map]\nset search_response [searchNodes $graph_id $search_criteria]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n} else {\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset translationExists [isNotEmpty $graph_nodes]\nif {$translationExists} {\nset translationSize [$graph_nodes size]\nset graph_node [java::cast Node [$graph_nodes get 0]]\nset collection_id [getProperty $graph_node \"identifier\"]\nset collection_type \"SET\"\nset synset_ids [getNodeRelationIds $graph_node \"Synset\" \"endNodeId\"]\nset not_empty_list [isNotEmpty $synset_ids]\nif {$not_empty_list} {\nset members [java::new ArrayList]\njava::for {String synsetId} $synset_list {\nset synsetContains [$synset_ids contains $synsetId]\nif {!$synsetContains} {\n$members add $synsetId\n}\n}\nif {$translationSize > 0} {\njava::for {Node graph_node} $graph_nodes {\nset collection_node_id [getProperty $graph_node \"identifier\"]\nif {$collection_node_id != $collection_id} {\nset synset_ids [getNodeRelationIds $graph_node \"Synset\" \"endNodeId\"]\nset not_empty_list [isNotEmpty $synset_ids]\nif {$not_empty_list} {\n$members addAll $synset_ids\n}\nset dropResp [dropCollection $graph_id $collection_node_id $collection_type]\n}\n}\n}\nset membersSize [$members size]\nif {$membersSize > 0} {\nset searchResponse [addMembers $graph_id $collection_id $collection_type $members]\n}\n$set_list add $collection_id\n}\n} else {\nset node [java::new Node]\n$node setObjectType \"TranslationSet\"\nset members [java::new ArrayList]\n$members addAll $synset_list\nset member_type \"Synset\"\nset searchResponse [createSet $graph_id $members $object_type $member_type $node]\nset set_id [get_resp_value $searchResponse \"set_id\"]\n$set_list add $set_id\n}\n}\n} else {\nset msg \"INVALID REQUEST FORMAT\"\nset code \"INVALID_REQUEST_FORMAT\"\nset respCode 400\nreturn [getErrorResponse $msg $code $respCode]\n}\n}\nset resultSize [$result_map size]\nset setListSize [$set_list size]\nif {$setListSize > 0} {\n$result_map put \"set_list\" $set_list\nset response_list [create_response $result_map]\nreturn $response_list\n} else {\nreturn $searchResponse\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "word_id", "index" : 1, "routing_param" : true }, { "name" : "translations", "datatype" : "java.util.HashMap", "index" : 2, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v2/language/translations/*/*", "path_params" : [ "language_id", "word_id" ] } }
,{ "_id" : { "$oid" : "596df2d21685812867138d45" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "clearCacheAllNodeProperty", "type" : "COMMAND", "parameters" : [ { "name" : "graph_id", "index" : 0, "routing_param" : true }, { "name" : "property", "index" : 1, "routing_param" : false } ], "actor_path" : { "manager" : "com.ilimi.graph.engine.mgr.impl.GraphMgrImpl", "operation" : "deleteCacheNodesProperty", "router" : "GRAPH_REQUEST_ROUTER" }, "request_path" : { "type" : "POST", "url" : "/v2/*/clearCache/*", "path_params" : [ "graph_id", "property" ] } }
,{ "_id" : { "$oid" : "5970a66128271925f4d3882b" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getConsonantsList_v3", "api_id" : "ekstep.language.varnas.consonants.list", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset varnas [getAllVarnas $language_id \"Consonant\"]\nreturn $varnas", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "GET", "url" : "/v3/varnas/consonants/list/", "request_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "5970a66228271925f4d3882c" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getGunimta_v3", "api_id" : "ekstep.language.varnas.gunimta.list", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset varna_object_type \"Varna\"\nset varna_iso_object_type \"Varna_ISO\"\nset varna_iso_graph_id \"language\"\nset object_null [java::isnull $unicode]\nif {$object_null == 1} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_INVALID_REQUEST\"\n$result_map put \"message\" \"UNICODE IS MANDATORY\"\n$result_map put \"responseCode\" [java::new Integer 400]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\nset searchProperty [java::new HashMap]\n$searchProperty put \"varna\" $unicode\nset language_id [get_language_graph_id $unicode]\nset property [create_search_property $searchProperty]\nset search_response [getNodesByProperty $language_id $property]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n}\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset varna_node [$graph_nodes get 0]\nset resp_def_node [getDefinition $language_id $varna_object_type]\nset def_node [get_resp_value $resp_def_node \"definition_node\"]\nset varna_obj [convert_graph_node $varna_node $def_node]\nset vowel_response [getAllVarnas $language_id \"VowelSign\"]\nset check_error_vowel [check_response_error $vowel_response]\nif {$check_error_vowel} {\nset result_map [java::new HashMap]\n$result_map put \"code\" \"ERR_INVALID_REQUEST\"\n$result_map put \"message\" \"VOWEL DATA NOT FOUND\"\n$result_map put \"responseCode\" [java::new Integer 500]\nset response_list [create_error_response $result_map]\nreturn $response_list\n}\nset vowel_list [get_resp_value $vowel_response \"result\"]\nset gunimta_list [java::new ArrayList]\njava::for {Map vowelMap} $vowel_list {\nset gunimta_unicode_list [java::new ArrayList]\nset consonant_unicode [$varna_obj get \"unicode\"]\n$gunimta_unicode_list add $consonant_unicode\nset vowel_unicode [$vowelMap get \"unicode\"]\n$gunimta_unicode_list add $vowel_unicode\nset gunimta [get_text_from_unicode $language_id $gunimta_unicode_list]\n$gunimta_list add $gunimta\n}\nreturn $gunimta_list", "type" : "SCRIPT", "parameters" : [ { "name" : "unicode", "datatype" : "java.lang.String", "index" : 0, "routing_param" : false } ], "request_path" : { "type" : "GET", "url" : "/v3/varnas/gunimta/list", "request_params" : [ "unicode" ] } }
,{ "_id" : { "$oid" : "5970a67628271925f4d3882d" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getRhymingWords_listV3", "api_id" : "ekstep.language.rhymingWords.list", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node Relation\nproc isNotEmpty {relations} {\nset exist false\nset hasRelations [java::isnull $relations]\nif {$hasRelations == 0} {\nset relationsSize [$relations size]\nif {$relationsSize > 0} {\nset exist true\n}\n}\nreturn $exist\n}\nproc getWordList {wordIds language_id} {\nset filters [java::new HashMap]\n$filters put \"objectType\" \"Word\"\n$filters put \"graph_id\" $language_id\n$filters put \"identifier\" $wordIds\n$filters put \"status\" [java::new ArrayList]\nset limit [java::new Integer 10000]\nset null_var [java::null]\nset empty_list [java::new ArrayList]\nset empty_map [java::new HashMap]\nset searchResponse [indexSearch $null_var $null_var $filters $empty_list $empty_list $empty_map $empty_list $null_var $limit]\nset searchResultsMap [$searchResponse getResult]\nset wordsList [java::cast List [$searchResultsMap get \"results\"]]\nset wordsListNull [java::isnull $wordsList]\nset result [java::new ArrayList]\nif {$wordsListNull == 0 && [$wordsList size] >= 0} {\njava::for {Object wordObj} $wordsList {\nset wordObject [java::cast Map $wordObj]\nset identifier [$wordObject get \"identifier\"]\nset lemma [$wordObject get \"lemma\"]\nset word [java::new HashMap]\n$word put \"lemma\" $lemma\n$word put \"identifier\" $identifier\n$result add $word\n}\n}\nreturn $result\n}\nproc getRhymingSoundWords {word_node language_id} {\nset relationIds [java::new ArrayList]\nset inRelations [java::prop $word_node \"inRelations\"]\nset actualWordId [java::prop $word_node \"identifier\"]\nset hasRelations [isNotEmpty $inRelations]\nif {$hasRelations} {\njava::for {Relation relation} $inRelations {\nset startType [java::prop $relation \"startNodeObjectType\"]\nif {[java::prop $relation \"startNodeObjectType\"] == \"WordSet\"} {\nset start_node_metadata [java::prop $relation \"startNodeMetadata\"]\nset hasMetadata [isNotEmpty $start_node_metadata]\nif {$hasMetadata} {\nset wordSetType [$start_node_metadata get \"type\"]\nset wordSetType [$wordSetType toString]\nif { $wordSetType == \"RhymingSound\"} {\nset setId [java::prop $relation \"startNodeId\"]\nset rhymingSoundResponse [getSetMembers $language_id $setId]\nset rhymingSoundSetMembers [get_resp_value $rhymingSoundResponse \"members\"]\nset hasRhymingSoundSetMembers [isNotEmpty $rhymingSoundSetMembers]\nif {$hasRhymingSoundSetMembers} {\n$rhymingSoundSetMembers remove $actualWordId\nset hasRhymingSoundSetMembers [isNotEmpty $rhymingSoundSetMembers]\nif {$hasRhymingSoundSetMembers} {\nset rhymingSoundWords [getWordList $rhymingSoundSetMembers $language_id]\nreturn $rhymingSoundWords\n}\n}\n}\n}\n}\n}\n}\nreturn [java::new ArrayList]\n}\nset searchProperty [java::new HashMap]\n$searchProperty put \"lemma\" $lemma\nset property [create_search_property $searchProperty]\nset search_response [getNodesByProperty $language_id $property]\nset check_error [check_response_error $search_response]\nif {$check_error} {\nreturn $search_response;\n}\nset graph_nodes [get_resp_value $search_response \"node_list\"]\nset isListNull [java::isnull $graph_nodes]\nif {$isListNull == 0} {\n#set graph_nodes [java::cast ArrayList $graph_nodes]\nset listSize [$graph_nodes size]\nif {$listSize > 0} {\nset word_node [$graph_nodes get 0]\nset word_node [java::cast Node $word_node]\nset words [getRhymingSoundWords $word_node $language_id]\n# create rhyming sound words response\nset resp_object [java::new HashMap]\n$resp_object put \"words\" $words\nset response [create_response $resp_object]\nreturn $response\n}\n}", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true }, { "name" : "lemma", "index" : 1, "routing_param" : false } ], "request_path" : { "type" : "POST", "url" : "/v3/tools/rhymingwords/list" } }
,{ "_id" : { "$oid" : "5970a6e6e8e24814a84be56b" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getVowelsList_v3", "api_id" : "ekstep.language.varnas.vowels.list", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package com.ilimi.graph.dac.model Node\nset varnas [getAllVarnas $language_id \"Vowel\"]\nreturn $varnas", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "GET", "url" : "/v3/varnas/vowels/list/", "request_params" : [ "language_id" ] } }
,{ "_id" : { "$oid" : "5970a6fee8e24814a84be56c" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "getWordsCurateList_v3", "api_id" : "ekstep.language.words.curate.list", "version" : "3.0", "body" : "package require java\njava::import -package java.util ArrayList List\njava::import -package java.util HashMap Map\njava::import -package java.util Calendar Date\njava::import -package com.ilimi.graph.common DateUtils\njava::import -package com.ilimi.graph.dac.model Node Relation\nset filters [java::new HashMap]\n$filters put \"objectType\" \"Word\"\n$filters put \"graph_id\" $language_id\nset statusList [java::new ArrayList]\n$statusList add \"Live\"\n$statusList add \"Draft\"\n$filters put \"status\" $statusList\nset calendar [java::call Calendar getInstance]\n$calendar add [java::field Calendar DAY_OF_MONTH] [java::new Integer -2]\nset dateValue [$calendar getTime]\nset dateStr [java::call DateUtils format $dateValue]\nset dateRange [java::new HashMap]\n$dateRange put \"max\" $dateStr\n$filters put \"lastUpdatedOn\" $dateRange\nset limit [java::new Integer 5]\nset exists [java::new ArrayList]\n$exists add \"primaryMeaningId\"\nset notExists [java::new ArrayList]\n$notExists add \"pictures\"\n$notExists add \"pronunciations\"\nset sortMap [java::new HashMap]\n$sortMap put \"lastUpdatedOn\" \"desc\"\nset null_var [java::null]\nset empty_list [java::new ArrayList]\nset empty_map [java::new HashMap]\nset searchResponse [indexSearch $null_var $null_var $filters $exists $notExists $sortMap $empty_list $null_var $limit]\nset searchResultsMap [$searchResponse getResult]\nset compositeSearchResponse [groupSearchResultByObjectType $searchResultsMap]\nreturn $compositeSearchResponse", "type" : "SCRIPT", "parameters" : [ { "name" : "language_id", "index" : 0, "routing_param" : true } ], "request_path" : { "type" : "POST", "url" : "/v3/words/curate/list" } }
,{ "_id" : { "$oid" : "597c77eb28271925f4d3882e" }, "_class" : "com.ilimi.orchestrator.dac.model.OrchestratorScript", "name" : "logs", "type" : "COMMAND", "command_class" : "com.ilimi.orchestrator.interpreter.command.Logs" }]
