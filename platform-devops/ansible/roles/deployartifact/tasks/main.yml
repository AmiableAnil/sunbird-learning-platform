---
#tasks file for deployartifact

- name: pwd
  become: yes
  command: pwd
  ignore_errors: yes

- name: stop tomcat
  become: yes
  service: name=tomcat state=stopped

- name: Change ownership of Tomcat installation
  become: yes
  file: path=/usr/share/tomcat/ owner=ec2-user group=ec2-user recurse=yes

- name: Change ownership of Tomcat installation
  become: yes
  file: path=/home/ec2-user/apache-tomcat-8.0.36 owner=ec2-user group=ec2-user  recurse=yes

- name: Change ownership of /data
  become: yes
  file: path=/data owner=ec2-user group=ec2-user recurse=yes mode=0755

- name: copy the database.properties
  template: src=language/database.properties.j2 dest=/data/properties/language/database.properties

- name: copy the elasticsearch.properties
  template: src=language/elasticsearch.properties.j2 dest=/data/properties/language/elasticsearch.properties

- name: copy the graph.properties
  template: src=language/graph.properties.j2 dest=/data/properties/language/graph.properties


- name: copy the language-indexes.properties
  template: src=language/language-indexes.properties.j2 dest=/data/properties/language/language-indexes.properties


- name: copy the mongo.properties
  template: src=language/mongo.properties.j2 dest=/data/properties/language/mongo.properties

#------------------------------------------------------------------------------------

- name: copy the consumer-config.xml
  template: src=learning/consumer-config.xml.j2 dest=/data/properties/learning/consumer-config.xml

- name: copy the database.properties
  template: src=learning/database.properties.j2 dest=/data/properties/learning/database.properties

- name: copy the elasticsearch.properties
  template: src=learning/elasticsearch.properties.j2 dest=/data/properties/learning/elasticsearch.properties

- name: copy the graph.properties
  template: src=learning/graph.properties.j2 dest=/data/properties/learning/graph.properties

- name: copy the mongo.properties
  template: src=learning/mongo.properties.j2 dest=/data/properties/learning/mongo.properties


#------------------------------------------------------------------------------------
- name: copy the elasticsearch.properties
  template: src=search/elasticsearch.properties.j2 dest=/data/properties/search/elasticsearch.properties
#------------------------------------------------------------------------------------
- name: copy the artifacts files 
  copy: src=learning-service.war dest=/home/ec2-user/apache-tomcat-8.0.36/webapps

- name: copy the artifacts files
  copy: src=search-service.war dest=/home/ec2-user/apache-tomcat-8.0.36/webapps

- name: copy the artifacts files
  copy: src=language-service.war dest=/home/ec2-user/apache-tomcat-8.0.36/webapps

- name: copy the artifacts file config-service.war
  copy: src=config-service.war dest=/home/ec2-user/apache-tomcat-8.0.36/webapps
#------------------------------------------------------------------------------------
- name: remove learning-service
  file: name=/home/ec2-user/apache-tomcat-8.0.36/webapps/learning-service state=absent

- name: remove search-service
  file: name=/home/ec2-user/apache-tomcat-8.0.36/webapps/search-service state=absent

- name: remove language-service
  file: name=/home/ec2-user/apache-tomcat-8.0.36/webapps/language-service state=absent

- name: remove config-service
  file: name=/home/ec2-user/apache-tomcat-8.0.36/webapps/config-service state=absent


- name: start tomcat
  become_user: ec2-user
  become: yes
  service: name=tomcat state=started

- name: wait for tomcat to start
  wait_for: port=8080

- name: check language-service health
  shell: curl 'http://{{ service_url }}/language-service/health' | grep '"healthy":false' | wc -l
  register: language_process

- name: check search-service health
  shell: curl 'http://{{ service_url }}/search-service/health' | grep '"healthy":false' | wc -l
  register: search_process

- name: check learning-service health
  shell: curl 'http://{{ service_url }}/learning-service/health' | grep '"healthy":false' | wc -l
  register: learning_process

- name: check config-service health
  shell: curl 'http://{{ service_url }}/config-service/health' | grep '"healthy":false' | wc -l
  register: config_process


- name: failed language-service health check
  fail: msg="Health check failed for language-service"
  when: "language_process.stdout >='1'"

- name: failed search-service health check
  fail: msg="Health check failed for search-service"
  when: "search_process.stdout >= '1'"

- name: failed learning-service health check
  fail: msg="Health check failed for learning-service"
  when: "learning_process.stdout >= '1'"

- name: failed config-service health check
  fail: msg="Health check failed for config-service"
  when: "config_process.stdout >= '1'"



